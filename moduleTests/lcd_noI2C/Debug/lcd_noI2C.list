
lcd_noI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080042a8  080042a8  000142a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200001e0  08004710  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004710  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058a1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000122e  00000000  00000000  00025ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000518  00000000  00000000  00026ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000470  00000000  00000000  000271f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002003d  00000000  00000000  00027668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000051a1  00000000  00000000  000476a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c04f4  00000000  00000000  0004c846  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cd3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  0010cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800428c 	.word	0x0800428c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	0800428c 	.word	0x0800428c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LCD1602_EnablePulse+0x38>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LCD1602_EnablePulse+0x3c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f001 f82a 	bl	8001ea8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000e54:	230a      	movs	r3, #10
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f97a 	bl	8001150 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LCD1602_EnablePulse+0x38>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LCD1602_EnablePulse+0x3c>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	f001 f81e 	bl	8001ea8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000e6c:	203c      	movs	r0, #60	; 0x3c
 8000e6e:	f000 f96f 	bl	8001150 <LCD1602_TIM_MicorSecDelay>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001fc 	.word	0x200001fc
 8000e7c:	20000202 	.word	0x20000202

08000e80 <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <LCD1602_RS+0x22>
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <LCD1602_RS+0x3c>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <LCD1602_RS+0x40>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f001 f804 	bl	8001ea8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000ea0:	e007      	b.n	8000eb2 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <LCD1602_RS+0x3c>)
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <LCD1602_RS+0x40>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	f000 fffb 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001fc 	.word	0x200001fc
 8000ec0:	20000200 	.word	0x20000200

08000ec4 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000edc:	4b61      	ldr	r3, [pc, #388]	; (8001064 <LCD1602_write+0x1a0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d15a      	bne.n	8000f9a <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000ee4:	4b60      	ldr	r3, [pc, #384]	; (8001068 <LCD1602_write+0x1a4>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <LCD1602_write+0x1a8>)
 8000eea:	8819      	ldrh	r1, [r3, #0]
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f000 ffd7 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000efa:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <LCD1602_write+0x1a4>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <LCD1602_write+0x1ac>)
 8000f00:	8819      	ldrh	r1, [r3, #0]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f000 ffcc 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <LCD1602_write+0x1a4>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <LCD1602_write+0x1b0>)
 8000f16:	8819      	ldrh	r1, [r3, #0]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	f000 ffc1 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <LCD1602_write+0x1a4>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <LCD1602_write+0x1b4>)
 8000f2c:	8819      	ldrh	r1, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	f000 ffb6 	bl	8001ea8 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	; (800107c <LCD1602_write+0x1b8>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <LCD1602_write+0x1bc>)
 8000f42:	8819      	ldrh	r1, [r3, #0]
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f000 ffab 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <LCD1602_write+0x1b8>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <LCD1602_write+0x1c0>)
 8000f58:	8819      	ldrh	r1, [r3, #0]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	f000 ffa0 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <LCD1602_write+0x1b8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	4b46      	ldr	r3, [pc, #280]	; (8001088 <LCD1602_write+0x1c4>)
 8000f6e:	8819      	ldrh	r1, [r3, #0]
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f000 ff95 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	; (800107c <LCD1602_write+0x1b8>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <LCD1602_write+0x1c8>)
 8000f84:	8819      	ldrh	r1, [r3, #0]
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f000 ff8a 	bl	8001ea8 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000f94:	f7ff ff54 	bl	8000e40 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000f98:	e05f      	b.n	800105a <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <LCD1602_write+0x1a0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d15b      	bne.n	800105a <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <LCD1602_write+0x1b8>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <LCD1602_write+0x1bc>)
 8000fa8:	8819      	ldrh	r1, [r3, #0]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f000 ff78 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <LCD1602_write+0x1b8>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <LCD1602_write+0x1c0>)
 8000fbe:	8819      	ldrh	r1, [r3, #0]
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f000 ff6d 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <LCD1602_write+0x1b8>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <LCD1602_write+0x1c4>)
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f000 ff62 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <LCD1602_write+0x1b8>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <LCD1602_write+0x1c8>)
 8000fea:	8819      	ldrh	r1, [r3, #0]
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f000 ff57 	bl	8001ea8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000ffa:	f7ff ff21 	bl	8000e40 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <LCD1602_write+0x1b8>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <LCD1602_write+0x1bc>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	f000 ff4a 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <LCD1602_write+0x1b8>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <LCD1602_write+0x1c0>)
 800101a:	8819      	ldrh	r1, [r3, #0]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	f000 ff3f 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <LCD1602_write+0x1b8>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <LCD1602_write+0x1c4>)
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	f000 ff34 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <LCD1602_write+0x1b8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <LCD1602_write+0x1c8>)
 8001046:	8819      	ldrh	r1, [r3, #0]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	b2db      	uxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	f000 ff29 	bl	8001ea8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001056:	f7ff fef3 	bl	8000e40 <LCD1602_EnablePulse>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000000 	.word	0x20000000
 8001068:	20000204 	.word	0x20000204
 800106c:	20000208 	.word	0x20000208
 8001070:	2000020a 	.word	0x2000020a
 8001074:	2000020c 	.word	0x2000020c
 8001078:	2000020e 	.word	0x2000020e
 800107c:	20000210 	.word	0x20000210
 8001080:	20000214 	.word	0x20000214
 8001084:	20000216 	.word	0x20000216
 8001088:	20000218 	.word	0x20000218
 800108c:	2000021a 	.word	0x2000021a

08001090 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb6a 	bl	8002778 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80010aa:	f001 fb51 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80010ae:	61f8      	str	r0, [r7, #28]
 80010b0:	e004      	b.n	80010bc <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80010b2:	f001 fb4d 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80010b6:	4603      	mov	r3, r0
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 80010bc:	69f8      	ldr	r0, [r7, #28]
 80010be:	f7ff f9cd 	bl	800045c <__aeabi_ui2d>
 80010c2:	a321      	add	r3, pc, #132	; (adr r3, 8001148 <LCD1602_TIM_Config+0xb8>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa42 	bl	8000550 <__aeabi_dmul>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fd14 	bl	8000b00 <__aeabi_d2uiz>
 80010d8:	4603      	mov	r3, r0
 80010da:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <LCD1602_TIM_Config+0xb0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <LCD1602_TIM_Config+0xb0>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001106:	f023 0304 	bic.w	r3, r3, #4
 800110a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b01      	subs	r3, #1
 800111e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001122:	2209      	movs	r2, #9
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <LCD1602_TIM_Config+0xb4>)
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	6113      	str	r3, [r2, #16]
}
 8001138:	bf00      	nop
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40000400 	.word	0x40000400
 8001148:	a0b5ed8d 	.word	0xa0b5ed8d
 800114c:	3eb0c6f7 	.word	0x3eb0c6f7

08001150 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b01      	subs	r3, #1
 800115e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8001178:	bf00      	nop
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LCD1602_TIM_MicorSecDelay+0x44>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d1f9      	bne.n	800117a <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40000400 	.word	0x40000400

08001198 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fe6c 	bl	8000e80 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fe8a 	bl	8000ec4 <LCD1602_write>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fe5c 	bl	8000e80 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe7a 	bl	8000ec4 <LCD1602_write>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <LCD1602_write4bitCommand>:
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fe48 	bl	8000e80 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <LCD1602_write4bitCommand+0x7c>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <LCD1602_write4bitCommand+0x80>)
 80011f6:	8819      	ldrh	r1, [r3, #0]
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	f000 fe51 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <LCD1602_write4bitCommand+0x7c>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <LCD1602_write4bitCommand+0x84>)
 800120c:	8819      	ldrh	r1, [r3, #0]
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	f000 fe46 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <LCD1602_write4bitCommand+0x7c>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <LCD1602_write4bitCommand+0x88>)
 8001222:	8819      	ldrh	r1, [r3, #0]
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	f000 fe3b 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LCD1602_write4bitCommand+0x7c>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <LCD1602_write4bitCommand+0x8c>)
 8001238:	8819      	ldrh	r1, [r3, #0]
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	f000 fe30 	bl	8001ea8 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8001248:	f7ff fdfa 	bl	8000e40 <LCD1602_EnablePulse>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000210 	.word	0x20000210
 8001258:	20000214 	.word	0x20000214
 800125c:	20000216 	.word	0x20000216
 8001260:	20000218 	.word	0x20000218
 8001264:	2000021a 	.word	0x2000021a

08001268 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	817b      	strh	r3, [r7, #10]
 8001276:	4613      	mov	r3, r2
 8001278:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800127a:	4a27      	ldr	r2, [pc, #156]	; (8001318 <LCD1602_Begin4BIT+0xb0>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <LCD1602_Begin4BIT+0xb4>)
 8001282:	897b      	ldrh	r3, [r7, #10]
 8001284:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <LCD1602_Begin4BIT+0xb8>)
 8001288:	893b      	ldrh	r3, [r7, #8]
 800128a:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800128c:	4a25      	ldr	r2, [pc, #148]	; (8001324 <LCD1602_Begin4BIT+0xbc>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <LCD1602_Begin4BIT+0xc0>)
 8001294:	8b3b      	ldrh	r3, [r7, #24]
 8001296:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <LCD1602_Begin4BIT+0xc4>)
 800129a:	8bbb      	ldrh	r3, [r7, #28]
 800129c:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <LCD1602_Begin4BIT+0xc8>)
 80012a0:	8c3b      	ldrh	r3, [r7, #32]
 80012a2:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 80012a4:	4a23      	ldr	r2, [pc, #140]	; (8001334 <LCD1602_Begin4BIT+0xcc>)
 80012a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012a8:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80012aa:	f7ff fef1 	bl	8001090 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <LCD1602_Begin4BIT+0xd0>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <LCD1602_Begin4BIT+0xd4>)
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80012ba:	2014      	movs	r0, #20
 80012bc:	f000 fb3a 	bl	8001934 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff ff89 	bl	80011d8 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb34 	bl	8001934 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff83 	bl	80011d8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 fb2e 	bl	8001934 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80012d8:	2003      	movs	r0, #3
 80012da:	f7ff ff7d 	bl	80011d8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fb28 	bl	8001934 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff ff77 	bl	80011d8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fb22 	bl	8001934 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80012f0:	200f      	movs	r0, #15
 80012f2:	f7ff ff51 	bl	8001198 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff ff4e 	bl	8001198 <LCD1602_writeCommand>
	HAL_Delay(3);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 fb19 	bl	8001934 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001302:	2028      	movs	r0, #40	; 0x28
 8001304:	f7ff ff48 	bl	8001198 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fb13 	bl	8001934 <HAL_Delay>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001fc 	.word	0x200001fc
 800131c:	20000200 	.word	0x20000200
 8001320:	20000202 	.word	0x20000202
 8001324:	20000210 	.word	0x20000210
 8001328:	20000214 	.word	0x20000214
 800132c:	20000216 	.word	0x20000216
 8001330:	20000218 	.word	0x20000218
 8001334:	2000021a 	.word	0x2000021a
 8001338:	20000000 	.word	0x20000000
 800133c:	20000002 	.word	0x20000002

08001340 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e009      	b.n	8001362 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff2e 	bl	80011b8 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	3301      	adds	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d805      	bhi.n	8001374 <LCD1602_print+0x34>
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ec      	bne.n	800134e <LCD1602_print+0xe>
	}
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	3b01      	subs	r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a4:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fef5 	bl	8001198 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 80013ae:	e007      	b.n	80013c0 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80013b6:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff feec 	bl	8001198 <LCD1602_writeCommand>
}	
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LCD1602_2ndLine>:
void LCD1602_1stLine(void)
{
	LCD1602_setCursor(1,1);
}
void LCD1602_2ndLine(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff ffd4 	bl	800137c <LCD1602_setCursor>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <LCD1602_noCursor+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f023 0302 	bic.w	r3, r3, #2
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <LCD1602_noCursor+0x20>)
 80013e8:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <LCD1602_noCursor+0x20>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fed2 	bl	8001198 <LCD1602_writeCommand>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000001 	.word	0x20000001

080013fc <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fec9 	bl	8001198 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001406:	2003      	movs	r0, #3
 8001408:	f000 fa94 	bl	8001934 <HAL_Delay>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <LCD1602_noBlink+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <LCD1602_noBlink+0x20>)
 8001420:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001422:	4b03      	ldr	r3, [pc, #12]	; (8001430 <LCD1602_noBlink+0x20>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff feb6 	bl	8001198 <LCD1602_writeCommand>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000001 	.word	0x20000001

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 fa09 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f84f 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 f8b7 	bl	80015b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800144a:	9303      	str	r3, [sp, #12]
 800144c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x90>)
 8001460:	2202      	movs	r2, #2
 8001462:	2101      	movs	r1, #1
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <main+0x94>)
 8001466:	f7ff feff 	bl	8001268 <LCD1602_Begin4BIT>

  LCD1602_noCursor();
 800146a:	f7ff ffb5 	bl	80013d8 <LCD1602_noCursor>
  LCD1602_noBlink();
 800146e:	f7ff ffcf 	bl	8001410 <LCD1602_noBlink>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int value = HAL_GPIO_ReadPin(GPIOB, Key4_Pin);
 8001472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001476:	4815      	ldr	r0, [pc, #84]	; (80014cc <main+0x98>)
 8001478:	f000 fcfe 	bl	8001e78 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	607b      	str	r3, [r7, #4]
	  if(value){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00e      	beq.n	80014a4 <main+0x70>
	  LCD1602_clear();
 8001486:	f7ff ffb9 	bl	80013fc <LCD1602_clear>
	  LCD1602_print("Hello world");
 800148a:	4811      	ldr	r0, [pc, #68]	; (80014d0 <main+0x9c>)
 800148c:	f7ff ff58 	bl	8001340 <LCD1602_print>
	  LCD1602_2ndLine();
 8001490:	f7ff ff9a 	bl	80013c8 <LCD1602_2ndLine>
	  LCD1602_print("Radio Pogoda");
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <main+0xa0>)
 8001496:	f7ff ff53 	bl	8001340 <LCD1602_print>
	  HAL_Delay(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149e:	f000 fa49 	bl	8001934 <HAL_Delay>
 80014a2:	e7e6      	b.n	8001472 <main+0x3e>
	  }else{
	  LCD1602_clear();
 80014a4:	f7ff ffaa 	bl	80013fc <LCD1602_clear>
	  LCD1602_print("Projekt PTM");
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <main+0xa4>)
 80014aa:	f7ff ff49 	bl	8001340 <LCD1602_print>
	  LCD1602_2ndLine();
 80014ae:	f7ff ff8b 	bl	80013c8 <LCD1602_2ndLine>
	  LCD1602_print("MM MM JP");
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <main+0xa8>)
 80014b4:	f7ff ff44 	bl	8001340 <LCD1602_print>
	  HAL_Delay(500);
 80014b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014bc:	f000 fa3a 	bl	8001934 <HAL_Delay>
  {
 80014c0:	e7d7      	b.n	8001472 <main+0x3e>
 80014c2:	bf00      	nop
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	080042a8 	.word	0x080042a8
 80014d4:	080042b4 	.word	0x080042b4
 80014d8:	080042c4 	.word	0x080042c4
 80014dc:	080042d0 	.word	0x080042d0

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 f99e 	bl	8002830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <SystemClock_Config+0xcc>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <SystemClock_Config+0xcc>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <SystemClock_Config+0xd0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SystemClock_Config+0xd0>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <SystemClock_Config+0xd0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001550:	2304      	movs	r3, #4
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001554:	23a8      	movs	r3, #168	; 0xa8
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001558:	2302      	movs	r3, #2
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fcb9 	bl	8001edc <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001570:	f000 f8a4 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001580:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2105      	movs	r1, #5
 8001592:	4618      	mov	r0, r3
 8001594:	f000 ff12 	bl	80023bc <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800159e:	f000 f88d 	bl	80016bc <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a36      	ldr	r2, [pc, #216]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <MX_GPIO_Init+0xf8>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001640:	481b      	ldr	r0, [pc, #108]	; (80016b0 <MX_GPIO_Init+0xfc>)
 8001642:	f000 fc31 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2103      	movs	r1, #3
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <MX_GPIO_Init+0x100>)
 800164c:	f000 fc2c 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Key1_Pin Key2_Pin Key3_Pin Key4_Pin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin|Key3_Pin|Key4_Pin;
 8001650:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_GPIO_Init+0x104>)
 8001666:	f000 fa6d 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 800166a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0xfc>)
 8001684:	f000 fa5e 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8001688:	2303      	movs	r3, #3
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0x100>)
 80016a0:	f000 fa50 	bl	8001b44 <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40020400 	.word	0x40020400

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_MspInit+0x4c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_MspInit+0x4c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_MspInit+0x4c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8c0 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x50>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x16>
		heap_end = &end;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <_sbrk+0x50>)
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <_sbrk+0x54>)
 800178c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <_sbrk+0x50>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <_sbrk+0x50>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	466a      	mov	r2, sp
 800179e:	4293      	cmp	r3, r2
 80017a0:	d907      	bls.n	80017b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017a2:	f001 f81b 	bl	80027dc <__errno>
 80017a6:	4602      	mov	r2, r0
 80017a8:	230c      	movs	r3, #12
 80017aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b0:	e006      	b.n	80017c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <_sbrk+0x50>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <_sbrk+0x50>)
 80017bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000021c 	.word	0x2000021c
 80017cc:	20000230 	.word	0x20000230

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <SystemInit+0x28>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <SystemInit+0x28>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SystemInit+0x28>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001802:	e003      	b.n	800180c <LoopCopyDataInit>

08001804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800180a:	3104      	adds	r1, #4

0800180c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001814:	d3f6      	bcc.n	8001804 <CopyDataInit>
  ldr  r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001818:	e002      	b.n	8001820 <LoopFillZerobss>

0800181a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800181a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800181c:	f842 3b04 	str.w	r3, [r2], #4

08001820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001824:	d3f9      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd3 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f000 ffdd 	bl	80027e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff fe01 	bl	8001434 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001838:	08004530 	.word	0x08004530
  ldr  r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001840:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001844:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001848:	20000230 	.word	0x20000230

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f92f 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff ff22 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f939 	bl	8001b2a <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d0:	f000 f90f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000228 	.word	0x20000228

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000228 	.word	0x20000228

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_Delay+0x40>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000000c 	.word	0x2000000c

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5c 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e16b      	b.n	8001e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 815a 	bne.w	8001e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00b      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0xfc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80b4 	beq.w	8001e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_GPIO_Init+0x308>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_GPIO_Init+0x308>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_GPIO_Init+0x308>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00e      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4934      	ldr	r1, [pc, #208]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae90 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	3724      	adds	r7, #36	; 0x24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021c00 	.word	0x40021c00
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e25b      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d075      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efa:	4ba3      	ldr	r3, [pc, #652]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d00c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4ba0      	ldr	r3, [pc, #640]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d112      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b9d      	ldr	r3, [pc, #628]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	4b99      	ldr	r3, [pc, #612]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x108>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d157      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e236      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x74>
 8001f42:	4b91      	ldr	r3, [pc, #580]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a90      	ldr	r2, [pc, #576]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xb0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a8a      	ldr	r2, [pc, #552]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a87      	ldr	r2, [pc, #540]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xb0>
 8001f74:	4b84      	ldr	r3, [pc, #528]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a83      	ldr	r2, [pc, #524]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a80      	ldr	r2, [pc, #512]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fcc2 	bl	800191c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fcbe 	bl	800191c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1fb      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xc0>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fcae 	bl	800191c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fcaa 	bl	800191c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1e7      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xe8>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x152>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1bb      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4952      	ldr	r1, [pc, #328]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_RCC_OscConfig+0x2b0>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff fc63 	bl	800191c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff fc5f 	bl	800191c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e19c      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4940      	ldr	r1, [pc, #256]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_OscConfig+0x2b0>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fc42 	bl	800191c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fc3e 	bl	800191c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e17b      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d030      	beq.n	8002128 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_OscConfig+0x2b4>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7ff fc22 	bl	800191c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc1e 	bl	800191c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e15b      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x200>
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_OscConfig+0x2b4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fc0b 	bl	800191c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff fc07 	bl	800191c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e144      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a0 	beq.w	8002276 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x2b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d121      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_OscConfig+0x2b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_RCC_OscConfig+0x2b8>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff fbcd 	bl	800191c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e011      	b.n	80021aa <HAL_RCC_OscConfig+0x2ce>
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	42470000 	.word	0x42470000
 8002190:	42470e80 	.word	0x42470e80
 8002194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff fbc0 	bl	800191c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0fd      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x4d4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d106      	bne.n	80021cc <HAL_RCC_OscConfig+0x2f0>
 80021be:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a7c      	ldr	r2, [pc, #496]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e01c      	b.n	8002206 <HAL_RCC_OscConfig+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021d4:	4b77      	ldr	r3, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a76      	ldr	r2, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	4b74      	ldr	r3, [pc, #464]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a73      	ldr	r2, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	e00b      	b.n	8002206 <HAL_RCC_OscConfig+0x32a>
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a70      	ldr	r2, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a6d      	ldr	r2, [pc, #436]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7ff fb85 	bl	800191c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff fb81 	bl	800191c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0bc      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ee      	beq.n	8002216 <HAL_RCC_OscConfig+0x33a>
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff fb6f 	bl	800191c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff fb6b 	bl	800191c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0a6      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8092 	beq.w	80023a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d05c      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d141      	bne.n	8002318 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <HAL_RCC_OscConfig+0x4dc>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff fb3f 	bl	800191c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff fb3b 	bl	800191c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e078      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
 80022e4:	4933      	ldr	r1, [pc, #204]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ea:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <HAL_RCC_OscConfig+0x4dc>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb14 	bl	800191c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff fb10 	bl	800191c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e04d      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x41c>
 8002316:	e045      	b.n	80023a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x4dc>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fafd 	bl	800191c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff faf9 	bl	800191c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e036      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x44a>
 8002344:	e02e      	b.n	80023a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e029      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_RCC_OscConfig+0x4d8>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d115      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002380:	4293      	cmp	r3, r2
 8002382:	d10d      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470060 	.word	0x42470060

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0cc      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d90c      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d044      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d119      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d003      	beq.n	800247a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	2b03      	cmp	r3, #3
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e06f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e067      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7ff fa36 	bl	800191c <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7ff fa32 	bl	800191c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e04f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d20c      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4601      	mov	r1, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	fa21 f303 	lsr.w	r3, r1, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f996 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00
 8002578:	40023800 	.word	0x40023800
 800257c:	080042dc 	.word	0x080042dc
 8002580:	20000004 	.word	0x20000004
 8002584:	20000008 	.word	0x20000008

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d007      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x32>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d008      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x38>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 80b4 	bne.w	800271c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025b6:	60bb      	str	r3, [r7, #8]
       break;
 80025b8:	e0b3      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ba:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025bc:	60bb      	str	r3, [r7, #8]
      break;
 80025be:	e0b0      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ca:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04a      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	f04f 0400 	mov.w	r4, #0
 80025e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	ea03 0501 	and.w	r5, r3, r1
 80025ec:	ea04 0602 	and.w	r6, r4, r2
 80025f0:	4629      	mov	r1, r5
 80025f2:	4632      	mov	r2, r6
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	0154      	lsls	r4, r2, #5
 80025fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	4619      	mov	r1, r3
 8002606:	4622      	mov	r2, r4
 8002608:	1b49      	subs	r1, r1, r5
 800260a:	eb62 0206 	sbc.w	r2, r2, r6
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	f04f 0400 	mov.w	r4, #0
 8002616:	0194      	lsls	r4, r2, #6
 8002618:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800261c:	018b      	lsls	r3, r1, #6
 800261e:	1a5b      	subs	r3, r3, r1
 8002620:	eb64 0402 	sbc.w	r4, r4, r2
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	00e2      	lsls	r2, r4, #3
 800262e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002632:	00d9      	lsls	r1, r3, #3
 8002634:	460b      	mov	r3, r1
 8002636:	4614      	mov	r4, r2
 8002638:	195b      	adds	r3, r3, r5
 800263a:	eb44 0406 	adc.w	r4, r4, r6
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	0262      	lsls	r2, r4, #9
 8002648:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800264c:	0259      	lsls	r1, r3, #9
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	4618      	mov	r0, r3
 8002654:	4621      	mov	r1, r4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	461a      	mov	r2, r3
 800265e:	4623      	mov	r3, r4
 8002660:	f7fe fa6e 	bl	8000b40 <__aeabi_uldivmod>
 8002664:	4603      	mov	r3, r0
 8002666:	460c      	mov	r4, r1
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e049      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	f04f 0400 	mov.w	r4, #0
 8002676:	f240 11ff 	movw	r1, #511	; 0x1ff
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	ea03 0501 	and.w	r5, r3, r1
 8002682:	ea04 0602 	and.w	r6, r4, r2
 8002686:	4629      	mov	r1, r5
 8002688:	4632      	mov	r2, r6
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	0154      	lsls	r4, r2, #5
 8002694:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002698:	014b      	lsls	r3, r1, #5
 800269a:	4619      	mov	r1, r3
 800269c:	4622      	mov	r2, r4
 800269e:	1b49      	subs	r1, r1, r5
 80026a0:	eb62 0206 	sbc.w	r2, r2, r6
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	0194      	lsls	r4, r2, #6
 80026ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	1a5b      	subs	r3, r3, r1
 80026b6:	eb64 0402 	sbc.w	r4, r4, r2
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	00e2      	lsls	r2, r4, #3
 80026c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026c8:	00d9      	lsls	r1, r3, #3
 80026ca:	460b      	mov	r3, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	195b      	adds	r3, r3, r5
 80026d0:	eb44 0406 	adc.w	r4, r4, r6
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	02a2      	lsls	r2, r4, #10
 80026de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026e2:	0299      	lsls	r1, r3, #10
 80026e4:	460b      	mov	r3, r1
 80026e6:	4614      	mov	r4, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	4621      	mov	r1, r4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fe fa23 	bl	8000b40 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	60bb      	str	r3, [r7, #8]
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800271e:	60bb      	str	r3, [r7, #8]
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	68bb      	ldr	r3, [r7, #8]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000004 	.word	0x20000004

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4601      	mov	r1, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a9b      	lsrs	r3, r3, #10
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	080042ec 	.word	0x080042ec

08002778 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	220f      	movs	r2, #15
 8002786:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_GetClockConfig+0x5c>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	08db      	lsrs	r3, r3, #3
 80027b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_RCC_GetClockConfig+0x60>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40023c00 	.word	0x40023c00

080027dc <__errno>:
 80027dc:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <__errno+0x8>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000010 	.word	0x20000010

080027e8 <__libc_init_array>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	4e0d      	ldr	r6, [pc, #52]	; (8002820 <__libc_init_array+0x38>)
 80027ec:	4c0d      	ldr	r4, [pc, #52]	; (8002824 <__libc_init_array+0x3c>)
 80027ee:	1ba4      	subs	r4, r4, r6
 80027f0:	10a4      	asrs	r4, r4, #2
 80027f2:	2500      	movs	r5, #0
 80027f4:	42a5      	cmp	r5, r4
 80027f6:	d109      	bne.n	800280c <__libc_init_array+0x24>
 80027f8:	4e0b      	ldr	r6, [pc, #44]	; (8002828 <__libc_init_array+0x40>)
 80027fa:	4c0c      	ldr	r4, [pc, #48]	; (800282c <__libc_init_array+0x44>)
 80027fc:	f001 fd46 	bl	800428c <_init>
 8002800:	1ba4      	subs	r4, r4, r6
 8002802:	10a4      	asrs	r4, r4, #2
 8002804:	2500      	movs	r5, #0
 8002806:	42a5      	cmp	r5, r4
 8002808:	d105      	bne.n	8002816 <__libc_init_array+0x2e>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002810:	4798      	blx	r3
 8002812:	3501      	adds	r5, #1
 8002814:	e7ee      	b.n	80027f4 <__libc_init_array+0xc>
 8002816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800281a:	4798      	blx	r3
 800281c:	3501      	adds	r5, #1
 800281e:	e7f2      	b.n	8002806 <__libc_init_array+0x1e>
 8002820:	08004528 	.word	0x08004528
 8002824:	08004528 	.word	0x08004528
 8002828:	08004528 	.word	0x08004528
 800282c:	0800452c 	.word	0x0800452c

08002830 <memset>:
 8002830:	4402      	add	r2, r0
 8002832:	4603      	mov	r3, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <__cvt>:
 8002840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	ec55 4b10 	vmov	r4, r5, d0
 8002848:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800284a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800284e:	2d00      	cmp	r5, #0
 8002850:	460e      	mov	r6, r1
 8002852:	4691      	mov	r9, r2
 8002854:	4619      	mov	r1, r3
 8002856:	bfb8      	it	lt
 8002858:	4622      	movlt	r2, r4
 800285a:	462b      	mov	r3, r5
 800285c:	f027 0720 	bic.w	r7, r7, #32
 8002860:	bfbb      	ittet	lt
 8002862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002866:	461d      	movlt	r5, r3
 8002868:	2300      	movge	r3, #0
 800286a:	232d      	movlt	r3, #45	; 0x2d
 800286c:	bfb8      	it	lt
 800286e:	4614      	movlt	r4, r2
 8002870:	2f46      	cmp	r7, #70	; 0x46
 8002872:	700b      	strb	r3, [r1, #0]
 8002874:	d004      	beq.n	8002880 <__cvt+0x40>
 8002876:	2f45      	cmp	r7, #69	; 0x45
 8002878:	d100      	bne.n	800287c <__cvt+0x3c>
 800287a:	3601      	adds	r6, #1
 800287c:	2102      	movs	r1, #2
 800287e:	e000      	b.n	8002882 <__cvt+0x42>
 8002880:	2103      	movs	r1, #3
 8002882:	ab03      	add	r3, sp, #12
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	ab02      	add	r3, sp, #8
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4632      	mov	r2, r6
 800288c:	4653      	mov	r3, sl
 800288e:	ec45 4b10 	vmov	d0, r4, r5
 8002892:	f000 fbad 	bl	8002ff0 <_dtoa_r>
 8002896:	2f47      	cmp	r7, #71	; 0x47
 8002898:	4680      	mov	r8, r0
 800289a:	d102      	bne.n	80028a2 <__cvt+0x62>
 800289c:	f019 0f01 	tst.w	r9, #1
 80028a0:	d026      	beq.n	80028f0 <__cvt+0xb0>
 80028a2:	2f46      	cmp	r7, #70	; 0x46
 80028a4:	eb08 0906 	add.w	r9, r8, r6
 80028a8:	d111      	bne.n	80028ce <__cvt+0x8e>
 80028aa:	f898 3000 	ldrb.w	r3, [r8]
 80028ae:	2b30      	cmp	r3, #48	; 0x30
 80028b0:	d10a      	bne.n	80028c8 <__cvt+0x88>
 80028b2:	2200      	movs	r2, #0
 80028b4:	2300      	movs	r3, #0
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fe f8b1 	bl	8000a20 <__aeabi_dcmpeq>
 80028be:	b918      	cbnz	r0, 80028c8 <__cvt+0x88>
 80028c0:	f1c6 0601 	rsb	r6, r6, #1
 80028c4:	f8ca 6000 	str.w	r6, [sl]
 80028c8:	f8da 3000 	ldr.w	r3, [sl]
 80028cc:	4499      	add	r9, r3
 80028ce:	2200      	movs	r2, #0
 80028d0:	2300      	movs	r3, #0
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fe f8a3 	bl	8000a20 <__aeabi_dcmpeq>
 80028da:	b938      	cbnz	r0, 80028ec <__cvt+0xac>
 80028dc:	2230      	movs	r2, #48	; 0x30
 80028de:	9b03      	ldr	r3, [sp, #12]
 80028e0:	454b      	cmp	r3, r9
 80028e2:	d205      	bcs.n	80028f0 <__cvt+0xb0>
 80028e4:	1c59      	adds	r1, r3, #1
 80028e6:	9103      	str	r1, [sp, #12]
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e7f8      	b.n	80028de <__cvt+0x9e>
 80028ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028f4:	eba3 0308 	sub.w	r3, r3, r8
 80028f8:	4640      	mov	r0, r8
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	b004      	add	sp, #16
 80028fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002902 <__exponent>:
 8002902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002904:	2900      	cmp	r1, #0
 8002906:	4604      	mov	r4, r0
 8002908:	bfba      	itte	lt
 800290a:	4249      	neglt	r1, r1
 800290c:	232d      	movlt	r3, #45	; 0x2d
 800290e:	232b      	movge	r3, #43	; 0x2b
 8002910:	2909      	cmp	r1, #9
 8002912:	f804 2b02 	strb.w	r2, [r4], #2
 8002916:	7043      	strb	r3, [r0, #1]
 8002918:	dd20      	ble.n	800295c <__exponent+0x5a>
 800291a:	f10d 0307 	add.w	r3, sp, #7
 800291e:	461f      	mov	r7, r3
 8002920:	260a      	movs	r6, #10
 8002922:	fb91 f5f6 	sdiv	r5, r1, r6
 8002926:	fb06 1115 	mls	r1, r6, r5, r1
 800292a:	3130      	adds	r1, #48	; 0x30
 800292c:	2d09      	cmp	r5, #9
 800292e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002932:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002936:	4629      	mov	r1, r5
 8002938:	dc09      	bgt.n	800294e <__exponent+0x4c>
 800293a:	3130      	adds	r1, #48	; 0x30
 800293c:	3b02      	subs	r3, #2
 800293e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002942:	42bb      	cmp	r3, r7
 8002944:	4622      	mov	r2, r4
 8002946:	d304      	bcc.n	8002952 <__exponent+0x50>
 8002948:	1a10      	subs	r0, r2, r0
 800294a:	b003      	add	sp, #12
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	4613      	mov	r3, r2
 8002950:	e7e7      	b.n	8002922 <__exponent+0x20>
 8002952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002956:	f804 2b01 	strb.w	r2, [r4], #1
 800295a:	e7f2      	b.n	8002942 <__exponent+0x40>
 800295c:	2330      	movs	r3, #48	; 0x30
 800295e:	4419      	add	r1, r3
 8002960:	7083      	strb	r3, [r0, #2]
 8002962:	1d02      	adds	r2, r0, #4
 8002964:	70c1      	strb	r1, [r0, #3]
 8002966:	e7ef      	b.n	8002948 <__exponent+0x46>

08002968 <_printf_float>:
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	b08d      	sub	sp, #52	; 0x34
 800296e:	460c      	mov	r4, r1
 8002970:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002974:	4616      	mov	r6, r2
 8002976:	461f      	mov	r7, r3
 8002978:	4605      	mov	r5, r0
 800297a:	f001 f8f1 	bl	8003b60 <_localeconv_r>
 800297e:	6803      	ldr	r3, [r0, #0]
 8002980:	9304      	str	r3, [sp, #16]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fc20 	bl	80001c8 <strlen>
 8002988:	2300      	movs	r3, #0
 800298a:	930a      	str	r3, [sp, #40]	; 0x28
 800298c:	f8d8 3000 	ldr.w	r3, [r8]
 8002990:	9005      	str	r0, [sp, #20]
 8002992:	3307      	adds	r3, #7
 8002994:	f023 0307 	bic.w	r3, r3, #7
 8002998:	f103 0208 	add.w	r2, r3, #8
 800299c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80029a0:	f8d4 b000 	ldr.w	fp, [r4]
 80029a4:	f8c8 2000 	str.w	r2, [r8]
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80029b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80029b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80029b8:	9307      	str	r3, [sp, #28]
 80029ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80029be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c2:	4ba7      	ldr	r3, [pc, #668]	; (8002c60 <_printf_float+0x2f8>)
 80029c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029c8:	f7fe f85c 	bl	8000a84 <__aeabi_dcmpun>
 80029cc:	bb70      	cbnz	r0, 8002a2c <_printf_float+0xc4>
 80029ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d2:	4ba3      	ldr	r3, [pc, #652]	; (8002c60 <_printf_float+0x2f8>)
 80029d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029d8:	f7fe f836 	bl	8000a48 <__aeabi_dcmple>
 80029dc:	bb30      	cbnz	r0, 8002a2c <_printf_float+0xc4>
 80029de:	2200      	movs	r2, #0
 80029e0:	2300      	movs	r3, #0
 80029e2:	4640      	mov	r0, r8
 80029e4:	4649      	mov	r1, r9
 80029e6:	f7fe f825 	bl	8000a34 <__aeabi_dcmplt>
 80029ea:	b110      	cbz	r0, 80029f2 <_printf_float+0x8a>
 80029ec:	232d      	movs	r3, #45	; 0x2d
 80029ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029f2:	4a9c      	ldr	r2, [pc, #624]	; (8002c64 <_printf_float+0x2fc>)
 80029f4:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <_printf_float+0x300>)
 80029f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80029fa:	bf8c      	ite	hi
 80029fc:	4690      	movhi	r8, r2
 80029fe:	4698      	movls	r8, r3
 8002a00:	2303      	movs	r3, #3
 8002a02:	f02b 0204 	bic.w	r2, fp, #4
 8002a06:	6123      	str	r3, [r4, #16]
 8002a08:	6022      	str	r2, [r4, #0]
 8002a0a:	f04f 0900 	mov.w	r9, #0
 8002a0e:	9700      	str	r7, [sp, #0]
 8002a10:	4633      	mov	r3, r6
 8002a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a14:	4621      	mov	r1, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 f9e6 	bl	8002de8 <_printf_common>
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	f040 808d 	bne.w	8002b3c <_printf_float+0x1d4>
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a26:	b00d      	add	sp, #52	; 0x34
 8002a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fe f826 	bl	8000a84 <__aeabi_dcmpun>
 8002a38:	b110      	cbz	r0, 8002a40 <_printf_float+0xd8>
 8002a3a:	4a8c      	ldr	r2, [pc, #560]	; (8002c6c <_printf_float+0x304>)
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <_printf_float+0x308>)
 8002a3e:	e7da      	b.n	80029f6 <_printf_float+0x8e>
 8002a40:	6861      	ldr	r1, [r4, #4]
 8002a42:	1c4b      	adds	r3, r1, #1
 8002a44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002a48:	a80a      	add	r0, sp, #40	; 0x28
 8002a4a:	d13e      	bne.n	8002aca <_printf_float+0x162>
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	2300      	movs	r3, #0
 8002a52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002a56:	ab09      	add	r3, sp, #36	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	ec49 8b10 	vmov	d0, r8, r9
 8002a5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002a62:	6022      	str	r2, [r4, #0]
 8002a64:	f8cd a004 	str.w	sl, [sp, #4]
 8002a68:	6861      	ldr	r1, [r4, #4]
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f7ff fee8 	bl	8002840 <__cvt>
 8002a70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002a74:	2b47      	cmp	r3, #71	; 0x47
 8002a76:	4680      	mov	r8, r0
 8002a78:	d109      	bne.n	8002a8e <_printf_float+0x126>
 8002a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7c:	1cd8      	adds	r0, r3, #3
 8002a7e:	db02      	blt.n	8002a86 <_printf_float+0x11e>
 8002a80:	6862      	ldr	r2, [r4, #4]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	dd47      	ble.n	8002b16 <_printf_float+0x1ae>
 8002a86:	f1aa 0a02 	sub.w	sl, sl, #2
 8002a8a:	fa5f fa8a 	uxtb.w	sl, sl
 8002a8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a94:	d824      	bhi.n	8002ae0 <_printf_float+0x178>
 8002a96:	3901      	subs	r1, #1
 8002a98:	4652      	mov	r2, sl
 8002a9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a9e:	9109      	str	r1, [sp, #36]	; 0x24
 8002aa0:	f7ff ff2f 	bl	8002902 <__exponent>
 8002aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002aa6:	1813      	adds	r3, r2, r0
 8002aa8:	2a01      	cmp	r2, #1
 8002aaa:	4681      	mov	r9, r0
 8002aac:	6123      	str	r3, [r4, #16]
 8002aae:	dc02      	bgt.n	8002ab6 <_printf_float+0x14e>
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	07d1      	lsls	r1, r2, #31
 8002ab4:	d501      	bpl.n	8002aba <_printf_float+0x152>
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	6123      	str	r3, [r4, #16]
 8002aba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0a5      	beq.n	8002a0e <_printf_float+0xa6>
 8002ac2:	232d      	movs	r3, #45	; 0x2d
 8002ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac8:	e7a1      	b.n	8002a0e <_printf_float+0xa6>
 8002aca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002ace:	f000 8177 	beq.w	8002dc0 <_printf_float+0x458>
 8002ad2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002ad6:	d1bb      	bne.n	8002a50 <_printf_float+0xe8>
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d1b9      	bne.n	8002a50 <_printf_float+0xe8>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e7b6      	b.n	8002a4e <_printf_float+0xe6>
 8002ae0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002ae4:	d119      	bne.n	8002b1a <_printf_float+0x1b2>
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	6863      	ldr	r3, [r4, #4]
 8002aea:	dd0c      	ble.n	8002b06 <_printf_float+0x19e>
 8002aec:	6121      	str	r1, [r4, #16]
 8002aee:	b913      	cbnz	r3, 8002af6 <_printf_float+0x18e>
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	07d2      	lsls	r2, r2, #31
 8002af4:	d502      	bpl.n	8002afc <_printf_float+0x194>
 8002af6:	3301      	adds	r3, #1
 8002af8:	440b      	add	r3, r1
 8002afa:	6123      	str	r3, [r4, #16]
 8002afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002afe:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b00:	f04f 0900 	mov.w	r9, #0
 8002b04:	e7d9      	b.n	8002aba <_printf_float+0x152>
 8002b06:	b913      	cbnz	r3, 8002b0e <_printf_float+0x1a6>
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	07d0      	lsls	r0, r2, #31
 8002b0c:	d501      	bpl.n	8002b12 <_printf_float+0x1aa>
 8002b0e:	3302      	adds	r3, #2
 8002b10:	e7f3      	b.n	8002afa <_printf_float+0x192>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e7f1      	b.n	8002afa <_printf_float+0x192>
 8002b16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002b1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	db05      	blt.n	8002b2e <_printf_float+0x1c6>
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6123      	str	r3, [r4, #16]
 8002b26:	07d1      	lsls	r1, r2, #31
 8002b28:	d5e8      	bpl.n	8002afc <_printf_float+0x194>
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	e7e5      	b.n	8002afa <_printf_float+0x192>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bfd4      	ite	le
 8002b32:	f1c3 0302 	rsble	r3, r3, #2
 8002b36:	2301      	movgt	r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	e7de      	b.n	8002afa <_printf_float+0x192>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	055a      	lsls	r2, r3, #21
 8002b40:	d407      	bmi.n	8002b52 <_printf_float+0x1ea>
 8002b42:	6923      	ldr	r3, [r4, #16]
 8002b44:	4642      	mov	r2, r8
 8002b46:	4631      	mov	r1, r6
 8002b48:	4628      	mov	r0, r5
 8002b4a:	47b8      	blx	r7
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d12b      	bne.n	8002ba8 <_printf_float+0x240>
 8002b50:	e767      	b.n	8002a22 <_printf_float+0xba>
 8002b52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002b56:	f240 80dc 	bls.w	8002d12 <_printf_float+0x3aa>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b62:	f7fd ff5d 	bl	8000a20 <__aeabi_dcmpeq>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d033      	beq.n	8002bd2 <_printf_float+0x26a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <_printf_float+0x30c>)
 8002b6e:	4631      	mov	r1, r6
 8002b70:	4628      	mov	r0, r5
 8002b72:	47b8      	blx	r7
 8002b74:	3001      	adds	r0, #1
 8002b76:	f43f af54 	beq.w	8002a22 <_printf_float+0xba>
 8002b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	db02      	blt.n	8002b88 <_printf_float+0x220>
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	07d8      	lsls	r0, r3, #31
 8002b86:	d50f      	bpl.n	8002ba8 <_printf_float+0x240>
 8002b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b8c:	4631      	mov	r1, r6
 8002b8e:	4628      	mov	r0, r5
 8002b90:	47b8      	blx	r7
 8002b92:	3001      	adds	r0, #1
 8002b94:	f43f af45 	beq.w	8002a22 <_printf_float+0xba>
 8002b98:	f04f 0800 	mov.w	r8, #0
 8002b9c:	f104 091a 	add.w	r9, r4, #26
 8002ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	4543      	cmp	r3, r8
 8002ba6:	dc09      	bgt.n	8002bbc <_printf_float+0x254>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	079b      	lsls	r3, r3, #30
 8002bac:	f100 8103 	bmi.w	8002db6 <_printf_float+0x44e>
 8002bb0:	68e0      	ldr	r0, [r4, #12]
 8002bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	bfb8      	it	lt
 8002bb8:	4618      	movlt	r0, r3
 8002bba:	e734      	b.n	8002a26 <_printf_float+0xbe>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	464a      	mov	r2, r9
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	47b8      	blx	r7
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	f43f af2b 	beq.w	8002a22 <_printf_float+0xba>
 8002bcc:	f108 0801 	add.w	r8, r8, #1
 8002bd0:	e7e6      	b.n	8002ba0 <_printf_float+0x238>
 8002bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dc2b      	bgt.n	8002c30 <_printf_float+0x2c8>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <_printf_float+0x30c>)
 8002bdc:	4631      	mov	r1, r6
 8002bde:	4628      	mov	r0, r5
 8002be0:	47b8      	blx	r7
 8002be2:	3001      	adds	r0, #1
 8002be4:	f43f af1d 	beq.w	8002a22 <_printf_float+0xba>
 8002be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bea:	b923      	cbnz	r3, 8002bf6 <_printf_float+0x28e>
 8002bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bee:	b913      	cbnz	r3, 8002bf6 <_printf_float+0x28e>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	07d9      	lsls	r1, r3, #31
 8002bf4:	d5d8      	bpl.n	8002ba8 <_printf_float+0x240>
 8002bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f af0e 	beq.w	8002a22 <_printf_float+0xba>
 8002c06:	f04f 0900 	mov.w	r9, #0
 8002c0a:	f104 0a1a 	add.w	sl, r4, #26
 8002c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c10:	425b      	negs	r3, r3
 8002c12:	454b      	cmp	r3, r9
 8002c14:	dc01      	bgt.n	8002c1a <_printf_float+0x2b2>
 8002c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c18:	e794      	b.n	8002b44 <_printf_float+0x1dc>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4652      	mov	r2, sl
 8002c1e:	4631      	mov	r1, r6
 8002c20:	4628      	mov	r0, r5
 8002c22:	47b8      	blx	r7
 8002c24:	3001      	adds	r0, #1
 8002c26:	f43f aefc 	beq.w	8002a22 <_printf_float+0xba>
 8002c2a:	f109 0901 	add.w	r9, r9, #1
 8002c2e:	e7ee      	b.n	8002c0e <_printf_float+0x2a6>
 8002c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bfa8      	it	ge
 8002c38:	461a      	movge	r2, r3
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	dd07      	ble.n	8002c50 <_printf_float+0x2e8>
 8002c40:	4613      	mov	r3, r2
 8002c42:	4631      	mov	r1, r6
 8002c44:	4642      	mov	r2, r8
 8002c46:	4628      	mov	r0, r5
 8002c48:	47b8      	blx	r7
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	f43f aee9 	beq.w	8002a22 <_printf_float+0xba>
 8002c50:	f104 031a 	add.w	r3, r4, #26
 8002c54:	f04f 0b00 	mov.w	fp, #0
 8002c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c5c:	9306      	str	r3, [sp, #24]
 8002c5e:	e015      	b.n	8002c8c <_printf_float+0x324>
 8002c60:	7fefffff 	.word	0x7fefffff
 8002c64:	080042f8 	.word	0x080042f8
 8002c68:	080042f4 	.word	0x080042f4
 8002c6c:	08004300 	.word	0x08004300
 8002c70:	080042fc 	.word	0x080042fc
 8002c74:	08004304 	.word	0x08004304
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9a06      	ldr	r2, [sp, #24]
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	4628      	mov	r0, r5
 8002c80:	47b8      	blx	r7
 8002c82:	3001      	adds	r0, #1
 8002c84:	f43f aecd 	beq.w	8002a22 <_printf_float+0xba>
 8002c88:	f10b 0b01 	add.w	fp, fp, #1
 8002c8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002c90:	ebaa 0309 	sub.w	r3, sl, r9
 8002c94:	455b      	cmp	r3, fp
 8002c96:	dcef      	bgt.n	8002c78 <_printf_float+0x310>
 8002c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	44d0      	add	r8, sl
 8002ca0:	db15      	blt.n	8002cce <_printf_float+0x366>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	07da      	lsls	r2, r3, #31
 8002ca6:	d412      	bmi.n	8002cce <_printf_float+0x366>
 8002ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cac:	eba3 020a 	sub.w	r2, r3, sl
 8002cb0:	eba3 0a01 	sub.w	sl, r3, r1
 8002cb4:	4592      	cmp	sl, r2
 8002cb6:	bfa8      	it	ge
 8002cb8:	4692      	movge	sl, r2
 8002cba:	f1ba 0f00 	cmp.w	sl, #0
 8002cbe:	dc0e      	bgt.n	8002cde <_printf_float+0x376>
 8002cc0:	f04f 0800 	mov.w	r8, #0
 8002cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002cc8:	f104 091a 	add.w	r9, r4, #26
 8002ccc:	e019      	b.n	8002d02 <_printf_float+0x39a>
 8002cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002cd2:	4631      	mov	r1, r6
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	47b8      	blx	r7
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d1e5      	bne.n	8002ca8 <_printf_float+0x340>
 8002cdc:	e6a1      	b.n	8002a22 <_printf_float+0xba>
 8002cde:	4653      	mov	r3, sl
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	4631      	mov	r1, r6
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	47b8      	blx	r7
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d1e9      	bne.n	8002cc0 <_printf_float+0x358>
 8002cec:	e699      	b.n	8002a22 <_printf_float+0xba>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	464a      	mov	r2, r9
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	47b8      	blx	r7
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	f43f ae92 	beq.w	8002a22 <_printf_float+0xba>
 8002cfe:	f108 0801 	add.w	r8, r8, #1
 8002d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	eba3 030a 	sub.w	r3, r3, sl
 8002d0c:	4543      	cmp	r3, r8
 8002d0e:	dcee      	bgt.n	8002cee <_printf_float+0x386>
 8002d10:	e74a      	b.n	8002ba8 <_printf_float+0x240>
 8002d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d14:	2a01      	cmp	r2, #1
 8002d16:	dc01      	bgt.n	8002d1c <_printf_float+0x3b4>
 8002d18:	07db      	lsls	r3, r3, #31
 8002d1a:	d53a      	bpl.n	8002d92 <_printf_float+0x42a>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4642      	mov	r2, r8
 8002d20:	4631      	mov	r1, r6
 8002d22:	4628      	mov	r0, r5
 8002d24:	47b8      	blx	r7
 8002d26:	3001      	adds	r0, #1
 8002d28:	f43f ae7b 	beq.w	8002a22 <_printf_float+0xba>
 8002d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d30:	4631      	mov	r1, r6
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b8      	blx	r7
 8002d36:	3001      	adds	r0, #1
 8002d38:	f108 0801 	add.w	r8, r8, #1
 8002d3c:	f43f ae71 	beq.w	8002a22 <_printf_float+0xba>
 8002d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d42:	2200      	movs	r2, #0
 8002d44:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8002d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f7fd fe67 	bl	8000a20 <__aeabi_dcmpeq>
 8002d52:	b9c8      	cbnz	r0, 8002d88 <_printf_float+0x420>
 8002d54:	4653      	mov	r3, sl
 8002d56:	4642      	mov	r2, r8
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	47b8      	blx	r7
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d10e      	bne.n	8002d80 <_printf_float+0x418>
 8002d62:	e65e      	b.n	8002a22 <_printf_float+0xba>
 8002d64:	2301      	movs	r3, #1
 8002d66:	4652      	mov	r2, sl
 8002d68:	4631      	mov	r1, r6
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b8      	blx	r7
 8002d6e:	3001      	adds	r0, #1
 8002d70:	f43f ae57 	beq.w	8002a22 <_printf_float+0xba>
 8002d74:	f108 0801 	add.w	r8, r8, #1
 8002d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4543      	cmp	r3, r8
 8002d7e:	dcf1      	bgt.n	8002d64 <_printf_float+0x3fc>
 8002d80:	464b      	mov	r3, r9
 8002d82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d86:	e6de      	b.n	8002b46 <_printf_float+0x1de>
 8002d88:	f04f 0800 	mov.w	r8, #0
 8002d8c:	f104 0a1a 	add.w	sl, r4, #26
 8002d90:	e7f2      	b.n	8002d78 <_printf_float+0x410>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e7df      	b.n	8002d56 <_printf_float+0x3ee>
 8002d96:	2301      	movs	r3, #1
 8002d98:	464a      	mov	r2, r9
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	47b8      	blx	r7
 8002da0:	3001      	adds	r0, #1
 8002da2:	f43f ae3e 	beq.w	8002a22 <_printf_float+0xba>
 8002da6:	f108 0801 	add.w	r8, r8, #1
 8002daa:	68e3      	ldr	r3, [r4, #12]
 8002dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	4543      	cmp	r3, r8
 8002db2:	dcf0      	bgt.n	8002d96 <_printf_float+0x42e>
 8002db4:	e6fc      	b.n	8002bb0 <_printf_float+0x248>
 8002db6:	f04f 0800 	mov.w	r8, #0
 8002dba:	f104 0919 	add.w	r9, r4, #25
 8002dbe:	e7f4      	b.n	8002daa <_printf_float+0x442>
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	f43f ae8b 	beq.w	8002adc <_printf_float+0x174>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002dcc:	ab09      	add	r3, sp, #36	; 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	ec49 8b10 	vmov	d0, r8, r9
 8002dd4:	6022      	str	r2, [r4, #0]
 8002dd6:	f8cd a004 	str.w	sl, [sp, #4]
 8002dda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7ff fd2e 	bl	8002840 <__cvt>
 8002de4:	4680      	mov	r8, r0
 8002de6:	e648      	b.n	8002a7a <_printf_float+0x112>

08002de8 <_printf_common>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	4691      	mov	r9, r2
 8002dee:	461f      	mov	r7, r3
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	690b      	ldr	r3, [r1, #16]
 8002df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bfb8      	it	lt
 8002dfc:	4613      	movlt	r3, r2
 8002dfe:	f8c9 3000 	str.w	r3, [r9]
 8002e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e06:	4606      	mov	r6, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	b112      	cbz	r2, 8002e12 <_printf_common+0x2a>
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f8c9 3000 	str.w	r3, [r9]
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	0699      	lsls	r1, r3, #26
 8002e16:	bf42      	ittt	mi
 8002e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e1c:	3302      	addmi	r3, #2
 8002e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8002e22:	6825      	ldr	r5, [r4, #0]
 8002e24:	f015 0506 	ands.w	r5, r5, #6
 8002e28:	d107      	bne.n	8002e3a <_printf_common+0x52>
 8002e2a:	f104 0a19 	add.w	sl, r4, #25
 8002e2e:	68e3      	ldr	r3, [r4, #12]
 8002e30:	f8d9 2000 	ldr.w	r2, [r9]
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	42ab      	cmp	r3, r5
 8002e38:	dc28      	bgt.n	8002e8c <_printf_common+0xa4>
 8002e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	3300      	adds	r3, #0
 8002e42:	bf18      	it	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	0692      	lsls	r2, r2, #26
 8002e48:	d42d      	bmi.n	8002ea6 <_printf_common+0xbe>
 8002e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e4e:	4639      	mov	r1, r7
 8002e50:	4630      	mov	r0, r6
 8002e52:	47c0      	blx	r8
 8002e54:	3001      	adds	r0, #1
 8002e56:	d020      	beq.n	8002e9a <_printf_common+0xb2>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	68e5      	ldr	r5, [r4, #12]
 8002e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e60:	f003 0306 	and.w	r3, r3, #6
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	bf08      	it	eq
 8002e68:	1aad      	subeq	r5, r5, r2
 8002e6a:	68a3      	ldr	r3, [r4, #8]
 8002e6c:	6922      	ldr	r2, [r4, #16]
 8002e6e:	bf0c      	ite	eq
 8002e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e74:	2500      	movne	r5, #0
 8002e76:	4293      	cmp	r3, r2
 8002e78:	bfc4      	itt	gt
 8002e7a:	1a9b      	subgt	r3, r3, r2
 8002e7c:	18ed      	addgt	r5, r5, r3
 8002e7e:	f04f 0900 	mov.w	r9, #0
 8002e82:	341a      	adds	r4, #26
 8002e84:	454d      	cmp	r5, r9
 8002e86:	d11a      	bne.n	8002ebe <_printf_common+0xd6>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e008      	b.n	8002e9e <_printf_common+0xb6>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	4652      	mov	r2, sl
 8002e90:	4639      	mov	r1, r7
 8002e92:	4630      	mov	r0, r6
 8002e94:	47c0      	blx	r8
 8002e96:	3001      	adds	r0, #1
 8002e98:	d103      	bne.n	8002ea2 <_printf_common+0xba>
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7c3      	b.n	8002e2e <_printf_common+0x46>
 8002ea6:	18e1      	adds	r1, r4, r3
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	2030      	movs	r0, #48	; 0x30
 8002eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002eb0:	4422      	add	r2, r4
 8002eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eba:	3302      	adds	r3, #2
 8002ebc:	e7c5      	b.n	8002e4a <_printf_common+0x62>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d0e6      	beq.n	8002e9a <_printf_common+0xb2>
 8002ecc:	f109 0901 	add.w	r9, r9, #1
 8002ed0:	e7d8      	b.n	8002e84 <_printf_common+0x9c>

08002ed2 <quorem>:
 8002ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed6:	6903      	ldr	r3, [r0, #16]
 8002ed8:	690c      	ldr	r4, [r1, #16]
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	4680      	mov	r8, r0
 8002ede:	f2c0 8082 	blt.w	8002fe6 <quorem+0x114>
 8002ee2:	3c01      	subs	r4, #1
 8002ee4:	f101 0714 	add.w	r7, r1, #20
 8002ee8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002eec:	f100 0614 	add.w	r6, r0, #20
 8002ef0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002ef4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002ef8:	eb06 030c 	add.w	r3, r6, ip
 8002efc:	3501      	adds	r5, #1
 8002efe:	eb07 090c 	add.w	r9, r7, ip
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f08:	b395      	cbz	r5, 8002f70 <quorem+0x9e>
 8002f0a:	f04f 0a00 	mov.w	sl, #0
 8002f0e:	4638      	mov	r0, r7
 8002f10:	46b6      	mov	lr, r6
 8002f12:	46d3      	mov	fp, sl
 8002f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8002f18:	b293      	uxth	r3, r2
 8002f1a:	fb05 a303 	mla	r3, r5, r3, sl
 8002f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	ebab 0303 	sub.w	r3, fp, r3
 8002f28:	0c12      	lsrs	r2, r2, #16
 8002f2a:	f8de b000 	ldr.w	fp, [lr]
 8002f2e:	fb05 a202 	mla	r2, r5, r2, sl
 8002f32:	fa13 f38b 	uxtah	r3, r3, fp
 8002f36:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002f3a:	fa1f fb82 	uxth.w	fp, r2
 8002f3e:	f8de 2000 	ldr.w	r2, [lr]
 8002f42:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002f46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f50:	4581      	cmp	r9, r0
 8002f52:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002f56:	f84e 3b04 	str.w	r3, [lr], #4
 8002f5a:	d2db      	bcs.n	8002f14 <quorem+0x42>
 8002f5c:	f856 300c 	ldr.w	r3, [r6, ip]
 8002f60:	b933      	cbnz	r3, 8002f70 <quorem+0x9e>
 8002f62:	9b01      	ldr	r3, [sp, #4]
 8002f64:	3b04      	subs	r3, #4
 8002f66:	429e      	cmp	r6, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	d330      	bcc.n	8002fce <quorem+0xfc>
 8002f6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f70:	4640      	mov	r0, r8
 8002f72:	f001 f82b 	bl	8003fcc <__mcmp>
 8002f76:	2800      	cmp	r0, #0
 8002f78:	db25      	blt.n	8002fc6 <quorem+0xf4>
 8002f7a:	3501      	adds	r5, #1
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f04f 0c00 	mov.w	ip, #0
 8002f82:	f857 2b04 	ldr.w	r2, [r7], #4
 8002f86:	f8d0 e000 	ldr.w	lr, [r0]
 8002f8a:	b293      	uxth	r3, r2
 8002f8c:	ebac 0303 	sub.w	r3, ip, r3
 8002f90:	0c12      	lsrs	r2, r2, #16
 8002f92:	fa13 f38e 	uxtah	r3, r3, lr
 8002f96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fa4:	45b9      	cmp	r9, r7
 8002fa6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002faa:	f840 3b04 	str.w	r3, [r0], #4
 8002fae:	d2e8      	bcs.n	8002f82 <quorem+0xb0>
 8002fb0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002fb4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002fb8:	b92a      	cbnz	r2, 8002fc6 <quorem+0xf4>
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	429e      	cmp	r6, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	d30b      	bcc.n	8002fda <quorem+0x108>
 8002fc2:	f8c8 4010 	str.w	r4, [r8, #16]
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	b003      	add	sp, #12
 8002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d1ca      	bne.n	8002f6c <quorem+0x9a>
 8002fd6:	3c01      	subs	r4, #1
 8002fd8:	e7c5      	b.n	8002f66 <quorem+0x94>
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	3b04      	subs	r3, #4
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d1ef      	bne.n	8002fc2 <quorem+0xf0>
 8002fe2:	3c01      	subs	r4, #1
 8002fe4:	e7ea      	b.n	8002fbc <quorem+0xea>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e7ee      	b.n	8002fc8 <quorem+0xf6>
 8002fea:	0000      	movs	r0, r0
 8002fec:	0000      	movs	r0, r0
	...

08002ff0 <_dtoa_r>:
 8002ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff4:	ec57 6b10 	vmov	r6, r7, d0
 8002ff8:	b097      	sub	sp, #92	; 0x5c
 8002ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ffc:	9106      	str	r1, [sp, #24]
 8002ffe:	4604      	mov	r4, r0
 8003000:	920b      	str	r2, [sp, #44]	; 0x2c
 8003002:	9312      	str	r3, [sp, #72]	; 0x48
 8003004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003008:	e9cd 6700 	strd	r6, r7, [sp]
 800300c:	b93d      	cbnz	r5, 800301e <_dtoa_r+0x2e>
 800300e:	2010      	movs	r0, #16
 8003010:	f000 fdb4 	bl	8003b7c <malloc>
 8003014:	6260      	str	r0, [r4, #36]	; 0x24
 8003016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800301a:	6005      	str	r5, [r0, #0]
 800301c:	60c5      	str	r5, [r0, #12]
 800301e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	b151      	cbz	r1, 800303a <_dtoa_r+0x4a>
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	604a      	str	r2, [r1, #4]
 8003028:	2301      	movs	r3, #1
 800302a:	4093      	lsls	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fdeb 	bl	8003c0a <_Bfree>
 8003034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	1e3b      	subs	r3, r7, #0
 800303c:	bfbb      	ittet	lt
 800303e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003042:	9301      	strlt	r3, [sp, #4]
 8003044:	2300      	movge	r3, #0
 8003046:	2201      	movlt	r2, #1
 8003048:	bfac      	ite	ge
 800304a:	f8c8 3000 	strge.w	r3, [r8]
 800304e:	f8c8 2000 	strlt.w	r2, [r8]
 8003052:	4baf      	ldr	r3, [pc, #700]	; (8003310 <_dtoa_r+0x320>)
 8003054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003058:	ea33 0308 	bics.w	r3, r3, r8
 800305c:	d114      	bne.n	8003088 <_dtoa_r+0x98>
 800305e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003060:	f242 730f 	movw	r3, #9999	; 0x270f
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	9b00      	ldr	r3, [sp, #0]
 8003068:	b923      	cbnz	r3, 8003074 <_dtoa_r+0x84>
 800306a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800306e:	2800      	cmp	r0, #0
 8003070:	f000 8542 	beq.w	8003af8 <_dtoa_r+0xb08>
 8003074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003076:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003324 <_dtoa_r+0x334>
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8544 	beq.w	8003b08 <_dtoa_r+0xb18>
 8003080:	f10b 0303 	add.w	r3, fp, #3
 8003084:	f000 bd3e 	b.w	8003b04 <_dtoa_r+0xb14>
 8003088:	e9dd 6700 	ldrd	r6, r7, [sp]
 800308c:	2200      	movs	r2, #0
 800308e:	2300      	movs	r3, #0
 8003090:	4630      	mov	r0, r6
 8003092:	4639      	mov	r1, r7
 8003094:	f7fd fcc4 	bl	8000a20 <__aeabi_dcmpeq>
 8003098:	4681      	mov	r9, r0
 800309a:	b168      	cbz	r0, 80030b8 <_dtoa_r+0xc8>
 800309c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800309e:	2301      	movs	r3, #1
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8524 	beq.w	8003af2 <_dtoa_r+0xb02>
 80030aa:	4b9a      	ldr	r3, [pc, #616]	; (8003314 <_dtoa_r+0x324>)
 80030ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80030ae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	f000 bd28 	b.w	8003b08 <_dtoa_r+0xb18>
 80030b8:	aa14      	add	r2, sp, #80	; 0x50
 80030ba:	a915      	add	r1, sp, #84	; 0x54
 80030bc:	ec47 6b10 	vmov	d0, r6, r7
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 fffa 	bl	80040ba <__d2b>
 80030c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80030ca:	9004      	str	r0, [sp, #16]
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	d07c      	beq.n	80031ca <_dtoa_r+0x1da>
 80030d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80030d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80030d8:	46b2      	mov	sl, r6
 80030da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80030de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80030e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80030e6:	2200      	movs	r2, #0
 80030e8:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <_dtoa_r+0x328>)
 80030ea:	4650      	mov	r0, sl
 80030ec:	4659      	mov	r1, fp
 80030ee:	f7fd f877 	bl	80001e0 <__aeabi_dsub>
 80030f2:	a381      	add	r3, pc, #516	; (adr r3, 80032f8 <_dtoa_r+0x308>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa2a 	bl	8000550 <__aeabi_dmul>
 80030fc:	a380      	add	r3, pc, #512	; (adr r3, 8003300 <_dtoa_r+0x310>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd f86f 	bl	80001e4 <__adddf3>
 8003106:	4606      	mov	r6, r0
 8003108:	4628      	mov	r0, r5
 800310a:	460f      	mov	r7, r1
 800310c:	f7fd f9b6 	bl	800047c <__aeabi_i2d>
 8003110:	a37d      	add	r3, pc, #500	; (adr r3, 8003308 <_dtoa_r+0x318>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa1b 	bl	8000550 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	f7fd f85f 	bl	80001e4 <__adddf3>
 8003126:	4606      	mov	r6, r0
 8003128:	460f      	mov	r7, r1
 800312a:	f7fd fcc1 	bl	8000ab0 <__aeabi_d2iz>
 800312e:	2200      	movs	r2, #0
 8003130:	4682      	mov	sl, r0
 8003132:	2300      	movs	r3, #0
 8003134:	4630      	mov	r0, r6
 8003136:	4639      	mov	r1, r7
 8003138:	f7fd fc7c 	bl	8000a34 <__aeabi_dcmplt>
 800313c:	b148      	cbz	r0, 8003152 <_dtoa_r+0x162>
 800313e:	4650      	mov	r0, sl
 8003140:	f7fd f99c 	bl	800047c <__aeabi_i2d>
 8003144:	4632      	mov	r2, r6
 8003146:	463b      	mov	r3, r7
 8003148:	f7fd fc6a 	bl	8000a20 <__aeabi_dcmpeq>
 800314c:	b908      	cbnz	r0, 8003152 <_dtoa_r+0x162>
 800314e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003152:	f1ba 0f16 	cmp.w	sl, #22
 8003156:	d859      	bhi.n	800320c <_dtoa_r+0x21c>
 8003158:	4970      	ldr	r1, [pc, #448]	; (800331c <_dtoa_r+0x32c>)
 800315a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800315e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003166:	f7fd fc83 	bl	8000a70 <__aeabi_dcmpgt>
 800316a:	2800      	cmp	r0, #0
 800316c:	d050      	beq.n	8003210 <_dtoa_r+0x220>
 800316e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003172:	2300      	movs	r3, #0
 8003174:	930f      	str	r3, [sp, #60]	; 0x3c
 8003176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003178:	1b5d      	subs	r5, r3, r5
 800317a:	f1b5 0801 	subs.w	r8, r5, #1
 800317e:	bf49      	itett	mi
 8003180:	f1c5 0301 	rsbmi	r3, r5, #1
 8003184:	2300      	movpl	r3, #0
 8003186:	9305      	strmi	r3, [sp, #20]
 8003188:	f04f 0800 	movmi.w	r8, #0
 800318c:	bf58      	it	pl
 800318e:	9305      	strpl	r3, [sp, #20]
 8003190:	f1ba 0f00 	cmp.w	sl, #0
 8003194:	db3e      	blt.n	8003214 <_dtoa_r+0x224>
 8003196:	2300      	movs	r3, #0
 8003198:	44d0      	add	r8, sl
 800319a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800319e:	9307      	str	r3, [sp, #28]
 80031a0:	9b06      	ldr	r3, [sp, #24]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	f200 8090 	bhi.w	80032c8 <_dtoa_r+0x2d8>
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	bfc4      	itt	gt
 80031ac:	3b04      	subgt	r3, #4
 80031ae:	9306      	strgt	r3, [sp, #24]
 80031b0:	9b06      	ldr	r3, [sp, #24]
 80031b2:	f1a3 0302 	sub.w	r3, r3, #2
 80031b6:	bfcc      	ite	gt
 80031b8:	2500      	movgt	r5, #0
 80031ba:	2501      	movle	r5, #1
 80031bc:	2b03      	cmp	r3, #3
 80031be:	f200 808f 	bhi.w	80032e0 <_dtoa_r+0x2f0>
 80031c2:	e8df f003 	tbb	[pc, r3]
 80031c6:	7f7d      	.short	0x7f7d
 80031c8:	7131      	.short	0x7131
 80031ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80031ce:	441d      	add	r5, r3
 80031d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80031d4:	2820      	cmp	r0, #32
 80031d6:	dd13      	ble.n	8003200 <_dtoa_r+0x210>
 80031d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80031dc:	9b00      	ldr	r3, [sp, #0]
 80031de:	fa08 f800 	lsl.w	r8, r8, r0
 80031e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80031e6:	fa23 f000 	lsr.w	r0, r3, r0
 80031ea:	ea48 0000 	orr.w	r0, r8, r0
 80031ee:	f7fd f935 	bl	800045c <__aeabi_ui2d>
 80031f2:	2301      	movs	r3, #1
 80031f4:	4682      	mov	sl, r0
 80031f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80031fa:	3d01      	subs	r5, #1
 80031fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80031fe:	e772      	b.n	80030e6 <_dtoa_r+0xf6>
 8003200:	9b00      	ldr	r3, [sp, #0]
 8003202:	f1c0 0020 	rsb	r0, r0, #32
 8003206:	fa03 f000 	lsl.w	r0, r3, r0
 800320a:	e7f0      	b.n	80031ee <_dtoa_r+0x1fe>
 800320c:	2301      	movs	r3, #1
 800320e:	e7b1      	b.n	8003174 <_dtoa_r+0x184>
 8003210:	900f      	str	r0, [sp, #60]	; 0x3c
 8003212:	e7b0      	b.n	8003176 <_dtoa_r+0x186>
 8003214:	9b05      	ldr	r3, [sp, #20]
 8003216:	eba3 030a 	sub.w	r3, r3, sl
 800321a:	9305      	str	r3, [sp, #20]
 800321c:	f1ca 0300 	rsb	r3, sl, #0
 8003220:	9307      	str	r3, [sp, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	930e      	str	r3, [sp, #56]	; 0x38
 8003226:	e7bb      	b.n	80031a0 <_dtoa_r+0x1b0>
 8003228:	2301      	movs	r3, #1
 800322a:	930a      	str	r3, [sp, #40]	; 0x28
 800322c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800322e:	2b00      	cmp	r3, #0
 8003230:	dd59      	ble.n	80032e6 <_dtoa_r+0x2f6>
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	4699      	mov	r9, r3
 8003236:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003238:	2200      	movs	r2, #0
 800323a:	6072      	str	r2, [r6, #4]
 800323c:	2204      	movs	r2, #4
 800323e:	f102 0014 	add.w	r0, r2, #20
 8003242:	4298      	cmp	r0, r3
 8003244:	6871      	ldr	r1, [r6, #4]
 8003246:	d953      	bls.n	80032f0 <_dtoa_r+0x300>
 8003248:	4620      	mov	r0, r4
 800324a:	f000 fcaa 	bl	8003ba2 <_Balloc>
 800324e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003250:	6030      	str	r0, [r6, #0]
 8003252:	f1b9 0f0e 	cmp.w	r9, #14
 8003256:	f8d3 b000 	ldr.w	fp, [r3]
 800325a:	f200 80e6 	bhi.w	800342a <_dtoa_r+0x43a>
 800325e:	2d00      	cmp	r5, #0
 8003260:	f000 80e3 	beq.w	800342a <_dtoa_r+0x43a>
 8003264:	ed9d 7b00 	vldr	d7, [sp]
 8003268:	f1ba 0f00 	cmp.w	sl, #0
 800326c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003270:	dd74      	ble.n	800335c <_dtoa_r+0x36c>
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <_dtoa_r+0x32c>)
 8003274:	f00a 030f 	and.w	r3, sl, #15
 8003278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800327c:	ed93 7b00 	vldr	d7, [r3]
 8003280:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003284:	06f0      	lsls	r0, r6, #27
 8003286:	ed8d 7b08 	vstr	d7, [sp, #32]
 800328a:	d565      	bpl.n	8003358 <_dtoa_r+0x368>
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <_dtoa_r+0x330>)
 800328e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003292:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003296:	f7fd fa85 	bl	80007a4 <__aeabi_ddiv>
 800329a:	e9cd 0100 	strd	r0, r1, [sp]
 800329e:	f006 060f 	and.w	r6, r6, #15
 80032a2:	2503      	movs	r5, #3
 80032a4:	4f1e      	ldr	r7, [pc, #120]	; (8003320 <_dtoa_r+0x330>)
 80032a6:	e04c      	b.n	8003342 <_dtoa_r+0x352>
 80032a8:	2301      	movs	r3, #1
 80032aa:	930a      	str	r3, [sp, #40]	; 0x28
 80032ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032ae:	4453      	add	r3, sl
 80032b0:	f103 0901 	add.w	r9, r3, #1
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	464b      	mov	r3, r9
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bfb8      	it	lt
 80032bc:	2301      	movlt	r3, #1
 80032be:	e7ba      	b.n	8003236 <_dtoa_r+0x246>
 80032c0:	2300      	movs	r3, #0
 80032c2:	e7b2      	b.n	800322a <_dtoa_r+0x23a>
 80032c4:	2300      	movs	r3, #0
 80032c6:	e7f0      	b.n	80032aa <_dtoa_r+0x2ba>
 80032c8:	2501      	movs	r5, #1
 80032ca:	2300      	movs	r3, #0
 80032cc:	9306      	str	r3, [sp, #24]
 80032ce:	950a      	str	r5, [sp, #40]	; 0x28
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	4699      	mov	r9, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	2312      	movs	r3, #18
 80032dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80032de:	e7aa      	b.n	8003236 <_dtoa_r+0x246>
 80032e0:	2301      	movs	r3, #1
 80032e2:	930a      	str	r3, [sp, #40]	; 0x28
 80032e4:	e7f4      	b.n	80032d0 <_dtoa_r+0x2e0>
 80032e6:	2301      	movs	r3, #1
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	4699      	mov	r9, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	e7f5      	b.n	80032dc <_dtoa_r+0x2ec>
 80032f0:	3101      	adds	r1, #1
 80032f2:	6071      	str	r1, [r6, #4]
 80032f4:	0052      	lsls	r2, r2, #1
 80032f6:	e7a2      	b.n	800323e <_dtoa_r+0x24e>
 80032f8:	636f4361 	.word	0x636f4361
 80032fc:	3fd287a7 	.word	0x3fd287a7
 8003300:	8b60c8b3 	.word	0x8b60c8b3
 8003304:	3fc68a28 	.word	0x3fc68a28
 8003308:	509f79fb 	.word	0x509f79fb
 800330c:	3fd34413 	.word	0x3fd34413
 8003310:	7ff00000 	.word	0x7ff00000
 8003314:	08004305 	.word	0x08004305
 8003318:	3ff80000 	.word	0x3ff80000
 800331c:	08004340 	.word	0x08004340
 8003320:	08004318 	.word	0x08004318
 8003324:	0800430f 	.word	0x0800430f
 8003328:	07f1      	lsls	r1, r6, #31
 800332a:	d508      	bpl.n	800333e <_dtoa_r+0x34e>
 800332c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003334:	f7fd f90c 	bl	8000550 <__aeabi_dmul>
 8003338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800333c:	3501      	adds	r5, #1
 800333e:	1076      	asrs	r6, r6, #1
 8003340:	3708      	adds	r7, #8
 8003342:	2e00      	cmp	r6, #0
 8003344:	d1f0      	bne.n	8003328 <_dtoa_r+0x338>
 8003346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800334a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800334e:	f7fd fa29 	bl	80007a4 <__aeabi_ddiv>
 8003352:	e9cd 0100 	strd	r0, r1, [sp]
 8003356:	e01a      	b.n	800338e <_dtoa_r+0x39e>
 8003358:	2502      	movs	r5, #2
 800335a:	e7a3      	b.n	80032a4 <_dtoa_r+0x2b4>
 800335c:	f000 80a0 	beq.w	80034a0 <_dtoa_r+0x4b0>
 8003360:	f1ca 0600 	rsb	r6, sl, #0
 8003364:	4b9f      	ldr	r3, [pc, #636]	; (80035e4 <_dtoa_r+0x5f4>)
 8003366:	4fa0      	ldr	r7, [pc, #640]	; (80035e8 <_dtoa_r+0x5f8>)
 8003368:	f006 020f 	and.w	r2, r6, #15
 800336c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003378:	f7fd f8ea 	bl	8000550 <__aeabi_dmul>
 800337c:	e9cd 0100 	strd	r0, r1, [sp]
 8003380:	1136      	asrs	r6, r6, #4
 8003382:	2300      	movs	r3, #0
 8003384:	2502      	movs	r5, #2
 8003386:	2e00      	cmp	r6, #0
 8003388:	d17f      	bne.n	800348a <_dtoa_r+0x49a>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e1      	bne.n	8003352 <_dtoa_r+0x362>
 800338e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8087 	beq.w	80034a4 <_dtoa_r+0x4b4>
 8003396:	e9dd 6700 	ldrd	r6, r7, [sp]
 800339a:	2200      	movs	r2, #0
 800339c:	4b93      	ldr	r3, [pc, #588]	; (80035ec <_dtoa_r+0x5fc>)
 800339e:	4630      	mov	r0, r6
 80033a0:	4639      	mov	r1, r7
 80033a2:	f7fd fb47 	bl	8000a34 <__aeabi_dcmplt>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d07c      	beq.n	80034a4 <_dtoa_r+0x4b4>
 80033aa:	f1b9 0f00 	cmp.w	r9, #0
 80033ae:	d079      	beq.n	80034a4 <_dtoa_r+0x4b4>
 80033b0:	9b02      	ldr	r3, [sp, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dd35      	ble.n	8003422 <_dtoa_r+0x432>
 80033b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80033ba:	9308      	str	r3, [sp, #32]
 80033bc:	4639      	mov	r1, r7
 80033be:	2200      	movs	r2, #0
 80033c0:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <_dtoa_r+0x600>)
 80033c2:	4630      	mov	r0, r6
 80033c4:	f7fd f8c4 	bl	8000550 <__aeabi_dmul>
 80033c8:	e9cd 0100 	strd	r0, r1, [sp]
 80033cc:	9f02      	ldr	r7, [sp, #8]
 80033ce:	3501      	adds	r5, #1
 80033d0:	4628      	mov	r0, r5
 80033d2:	f7fd f853 	bl	800047c <__aeabi_i2d>
 80033d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033da:	f7fd f8b9 	bl	8000550 <__aeabi_dmul>
 80033de:	2200      	movs	r2, #0
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <_dtoa_r+0x604>)
 80033e2:	f7fc feff 	bl	80001e4 <__adddf3>
 80033e6:	4605      	mov	r5, r0
 80033e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80033ec:	2f00      	cmp	r7, #0
 80033ee:	d15d      	bne.n	80034ac <_dtoa_r+0x4bc>
 80033f0:	2200      	movs	r2, #0
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <_dtoa_r+0x608>)
 80033f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033f8:	f7fc fef2 	bl	80001e0 <__aeabi_dsub>
 80033fc:	462a      	mov	r2, r5
 80033fe:	4633      	mov	r3, r6
 8003400:	e9cd 0100 	strd	r0, r1, [sp]
 8003404:	f7fd fb34 	bl	8000a70 <__aeabi_dcmpgt>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 8288 	bne.w	800391e <_dtoa_r+0x92e>
 800340e:	462a      	mov	r2, r5
 8003410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003418:	f7fd fb0c 	bl	8000a34 <__aeabi_dcmplt>
 800341c:	2800      	cmp	r0, #0
 800341e:	f040 827c 	bne.w	800391a <_dtoa_r+0x92a>
 8003422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003426:	e9cd 2300 	strd	r2, r3, [sp]
 800342a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800342c:	2b00      	cmp	r3, #0
 800342e:	f2c0 8150 	blt.w	80036d2 <_dtoa_r+0x6e2>
 8003432:	f1ba 0f0e 	cmp.w	sl, #14
 8003436:	f300 814c 	bgt.w	80036d2 <_dtoa_r+0x6e2>
 800343a:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <_dtoa_r+0x5f4>)
 800343c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003440:	ed93 7b00 	vldr	d7, [r3]
 8003444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003446:	2b00      	cmp	r3, #0
 8003448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800344c:	f280 80d8 	bge.w	8003600 <_dtoa_r+0x610>
 8003450:	f1b9 0f00 	cmp.w	r9, #0
 8003454:	f300 80d4 	bgt.w	8003600 <_dtoa_r+0x610>
 8003458:	f040 825e 	bne.w	8003918 <_dtoa_r+0x928>
 800345c:	2200      	movs	r2, #0
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <_dtoa_r+0x608>)
 8003460:	ec51 0b17 	vmov	r0, r1, d7
 8003464:	f7fd f874 	bl	8000550 <__aeabi_dmul>
 8003468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800346c:	f7fd faf6 	bl	8000a5c <__aeabi_dcmpge>
 8003470:	464f      	mov	r7, r9
 8003472:	464e      	mov	r6, r9
 8003474:	2800      	cmp	r0, #0
 8003476:	f040 8234 	bne.w	80038e2 <_dtoa_r+0x8f2>
 800347a:	2331      	movs	r3, #49	; 0x31
 800347c:	f10b 0501 	add.w	r5, fp, #1
 8003480:	f88b 3000 	strb.w	r3, [fp]
 8003484:	f10a 0a01 	add.w	sl, sl, #1
 8003488:	e22f      	b.n	80038ea <_dtoa_r+0x8fa>
 800348a:	07f2      	lsls	r2, r6, #31
 800348c:	d505      	bpl.n	800349a <_dtoa_r+0x4aa>
 800348e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003492:	f7fd f85d 	bl	8000550 <__aeabi_dmul>
 8003496:	3501      	adds	r5, #1
 8003498:	2301      	movs	r3, #1
 800349a:	1076      	asrs	r6, r6, #1
 800349c:	3708      	adds	r7, #8
 800349e:	e772      	b.n	8003386 <_dtoa_r+0x396>
 80034a0:	2502      	movs	r5, #2
 80034a2:	e774      	b.n	800338e <_dtoa_r+0x39e>
 80034a4:	f8cd a020 	str.w	sl, [sp, #32]
 80034a8:	464f      	mov	r7, r9
 80034aa:	e791      	b.n	80033d0 <_dtoa_r+0x3e0>
 80034ac:	4b4d      	ldr	r3, [pc, #308]	; (80035e4 <_dtoa_r+0x5f4>)
 80034ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80034b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80034b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d047      	beq.n	800354c <_dtoa_r+0x55c>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	2000      	movs	r0, #0
 80034c2:	494e      	ldr	r1, [pc, #312]	; (80035fc <_dtoa_r+0x60c>)
 80034c4:	f7fd f96e 	bl	80007a4 <__aeabi_ddiv>
 80034c8:	462a      	mov	r2, r5
 80034ca:	4633      	mov	r3, r6
 80034cc:	f7fc fe88 	bl	80001e0 <__aeabi_dsub>
 80034d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80034d4:	465d      	mov	r5, fp
 80034d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034da:	f7fd fae9 	bl	8000ab0 <__aeabi_d2iz>
 80034de:	4606      	mov	r6, r0
 80034e0:	f7fc ffcc 	bl	800047c <__aeabi_i2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034ec:	f7fc fe78 	bl	80001e0 <__aeabi_dsub>
 80034f0:	3630      	adds	r6, #48	; 0x30
 80034f2:	f805 6b01 	strb.w	r6, [r5], #1
 80034f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80034fa:	e9cd 0100 	strd	r0, r1, [sp]
 80034fe:	f7fd fa99 	bl	8000a34 <__aeabi_dcmplt>
 8003502:	2800      	cmp	r0, #0
 8003504:	d163      	bne.n	80035ce <_dtoa_r+0x5de>
 8003506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800350a:	2000      	movs	r0, #0
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <_dtoa_r+0x5fc>)
 800350e:	f7fc fe67 	bl	80001e0 <__aeabi_dsub>
 8003512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003516:	f7fd fa8d 	bl	8000a34 <__aeabi_dcmplt>
 800351a:	2800      	cmp	r0, #0
 800351c:	f040 80b7 	bne.w	800368e <_dtoa_r+0x69e>
 8003520:	eba5 030b 	sub.w	r3, r5, fp
 8003524:	429f      	cmp	r7, r3
 8003526:	f77f af7c 	ble.w	8003422 <_dtoa_r+0x432>
 800352a:	2200      	movs	r2, #0
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <_dtoa_r+0x600>)
 800352e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003532:	f7fd f80d 	bl	8000550 <__aeabi_dmul>
 8003536:	2200      	movs	r2, #0
 8003538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800353c:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <_dtoa_r+0x600>)
 800353e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003542:	f7fd f805 	bl	8000550 <__aeabi_dmul>
 8003546:	e9cd 0100 	strd	r0, r1, [sp]
 800354a:	e7c4      	b.n	80034d6 <_dtoa_r+0x4e6>
 800354c:	462a      	mov	r2, r5
 800354e:	4633      	mov	r3, r6
 8003550:	f7fc fffe 	bl	8000550 <__aeabi_dmul>
 8003554:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003558:	eb0b 0507 	add.w	r5, fp, r7
 800355c:	465e      	mov	r6, fp
 800355e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003562:	f7fd faa5 	bl	8000ab0 <__aeabi_d2iz>
 8003566:	4607      	mov	r7, r0
 8003568:	f7fc ff88 	bl	800047c <__aeabi_i2d>
 800356c:	3730      	adds	r7, #48	; 0x30
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003576:	f7fc fe33 	bl	80001e0 <__aeabi_dsub>
 800357a:	f806 7b01 	strb.w	r7, [r6], #1
 800357e:	42ae      	cmp	r6, r5
 8003580:	e9cd 0100 	strd	r0, r1, [sp]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	d126      	bne.n	80035d8 <_dtoa_r+0x5e8>
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <_dtoa_r+0x60c>)
 800358c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003590:	f7fc fe28 	bl	80001e4 <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800359c:	f7fd fa68 	bl	8000a70 <__aeabi_dcmpgt>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d174      	bne.n	800368e <_dtoa_r+0x69e>
 80035a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80035a8:	2000      	movs	r0, #0
 80035aa:	4914      	ldr	r1, [pc, #80]	; (80035fc <_dtoa_r+0x60c>)
 80035ac:	f7fc fe18 	bl	80001e0 <__aeabi_dsub>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b8:	f7fd fa3c 	bl	8000a34 <__aeabi_dcmplt>
 80035bc:	2800      	cmp	r0, #0
 80035be:	f43f af30 	beq.w	8003422 <_dtoa_r+0x432>
 80035c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80035c6:	2b30      	cmp	r3, #48	; 0x30
 80035c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80035cc:	d002      	beq.n	80035d4 <_dtoa_r+0x5e4>
 80035ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80035d2:	e04a      	b.n	800366a <_dtoa_r+0x67a>
 80035d4:	4615      	mov	r5, r2
 80035d6:	e7f4      	b.n	80035c2 <_dtoa_r+0x5d2>
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <_dtoa_r+0x600>)
 80035da:	f7fc ffb9 	bl	8000550 <__aeabi_dmul>
 80035de:	e9cd 0100 	strd	r0, r1, [sp]
 80035e2:	e7bc      	b.n	800355e <_dtoa_r+0x56e>
 80035e4:	08004340 	.word	0x08004340
 80035e8:	08004318 	.word	0x08004318
 80035ec:	3ff00000 	.word	0x3ff00000
 80035f0:	40240000 	.word	0x40240000
 80035f4:	401c0000 	.word	0x401c0000
 80035f8:	40140000 	.word	0x40140000
 80035fc:	3fe00000 	.word	0x3fe00000
 8003600:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003604:	465d      	mov	r5, fp
 8003606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800360a:	4630      	mov	r0, r6
 800360c:	4639      	mov	r1, r7
 800360e:	f7fd f8c9 	bl	80007a4 <__aeabi_ddiv>
 8003612:	f7fd fa4d 	bl	8000ab0 <__aeabi_d2iz>
 8003616:	4680      	mov	r8, r0
 8003618:	f7fc ff30 	bl	800047c <__aeabi_i2d>
 800361c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003620:	f7fc ff96 	bl	8000550 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4630      	mov	r0, r6
 800362a:	4639      	mov	r1, r7
 800362c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003630:	f7fc fdd6 	bl	80001e0 <__aeabi_dsub>
 8003634:	f805 6b01 	strb.w	r6, [r5], #1
 8003638:	eba5 060b 	sub.w	r6, r5, fp
 800363c:	45b1      	cmp	r9, r6
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	d139      	bne.n	80036b8 <_dtoa_r+0x6c8>
 8003644:	f7fc fdce 	bl	80001e4 <__adddf3>
 8003648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800364c:	4606      	mov	r6, r0
 800364e:	460f      	mov	r7, r1
 8003650:	f7fd fa0e 	bl	8000a70 <__aeabi_dcmpgt>
 8003654:	b9c8      	cbnz	r0, 800368a <_dtoa_r+0x69a>
 8003656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800365a:	4630      	mov	r0, r6
 800365c:	4639      	mov	r1, r7
 800365e:	f7fd f9df 	bl	8000a20 <__aeabi_dcmpeq>
 8003662:	b110      	cbz	r0, 800366a <_dtoa_r+0x67a>
 8003664:	f018 0f01 	tst.w	r8, #1
 8003668:	d10f      	bne.n	800368a <_dtoa_r+0x69a>
 800366a:	9904      	ldr	r1, [sp, #16]
 800366c:	4620      	mov	r0, r4
 800366e:	f000 facc 	bl	8003c0a <_Bfree>
 8003672:	2300      	movs	r3, #0
 8003674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003676:	702b      	strb	r3, [r5, #0]
 8003678:	f10a 0301 	add.w	r3, sl, #1
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8241 	beq.w	8003b08 <_dtoa_r+0xb18>
 8003686:	601d      	str	r5, [r3, #0]
 8003688:	e23e      	b.n	8003b08 <_dtoa_r+0xb18>
 800368a:	f8cd a020 	str.w	sl, [sp, #32]
 800368e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003692:	2a39      	cmp	r2, #57	; 0x39
 8003694:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003698:	d108      	bne.n	80036ac <_dtoa_r+0x6bc>
 800369a:	459b      	cmp	fp, r3
 800369c:	d10a      	bne.n	80036b4 <_dtoa_r+0x6c4>
 800369e:	9b08      	ldr	r3, [sp, #32]
 80036a0:	3301      	adds	r3, #1
 80036a2:	9308      	str	r3, [sp, #32]
 80036a4:	2330      	movs	r3, #48	; 0x30
 80036a6:	f88b 3000 	strb.w	r3, [fp]
 80036aa:	465b      	mov	r3, fp
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	3201      	adds	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e78c      	b.n	80035ce <_dtoa_r+0x5de>
 80036b4:	461d      	mov	r5, r3
 80036b6:	e7ea      	b.n	800368e <_dtoa_r+0x69e>
 80036b8:	2200      	movs	r2, #0
 80036ba:	4b9b      	ldr	r3, [pc, #620]	; (8003928 <_dtoa_r+0x938>)
 80036bc:	f7fc ff48 	bl	8000550 <__aeabi_dmul>
 80036c0:	2200      	movs	r2, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	4606      	mov	r6, r0
 80036c6:	460f      	mov	r7, r1
 80036c8:	f7fd f9aa 	bl	8000a20 <__aeabi_dcmpeq>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d09a      	beq.n	8003606 <_dtoa_r+0x616>
 80036d0:	e7cb      	b.n	800366a <_dtoa_r+0x67a>
 80036d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036d4:	2a00      	cmp	r2, #0
 80036d6:	f000 808b 	beq.w	80037f0 <_dtoa_r+0x800>
 80036da:	9a06      	ldr	r2, [sp, #24]
 80036dc:	2a01      	cmp	r2, #1
 80036de:	dc6e      	bgt.n	80037be <_dtoa_r+0x7ce>
 80036e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d067      	beq.n	80037b6 <_dtoa_r+0x7c6>
 80036e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80036ea:	9f07      	ldr	r7, [sp, #28]
 80036ec:	9d05      	ldr	r5, [sp, #20]
 80036ee:	9a05      	ldr	r2, [sp, #20]
 80036f0:	2101      	movs	r1, #1
 80036f2:	441a      	add	r2, r3
 80036f4:	4620      	mov	r0, r4
 80036f6:	9205      	str	r2, [sp, #20]
 80036f8:	4498      	add	r8, r3
 80036fa:	f000 fb26 	bl	8003d4a <__i2b>
 80036fe:	4606      	mov	r6, r0
 8003700:	2d00      	cmp	r5, #0
 8003702:	dd0c      	ble.n	800371e <_dtoa_r+0x72e>
 8003704:	f1b8 0f00 	cmp.w	r8, #0
 8003708:	dd09      	ble.n	800371e <_dtoa_r+0x72e>
 800370a:	4545      	cmp	r5, r8
 800370c:	9a05      	ldr	r2, [sp, #20]
 800370e:	462b      	mov	r3, r5
 8003710:	bfa8      	it	ge
 8003712:	4643      	movge	r3, r8
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	9205      	str	r2, [sp, #20]
 8003718:	1aed      	subs	r5, r5, r3
 800371a:	eba8 0803 	sub.w	r8, r8, r3
 800371e:	9b07      	ldr	r3, [sp, #28]
 8003720:	b1eb      	cbz	r3, 800375e <_dtoa_r+0x76e>
 8003722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d067      	beq.n	80037f8 <_dtoa_r+0x808>
 8003728:	b18f      	cbz	r7, 800374e <_dtoa_r+0x75e>
 800372a:	4631      	mov	r1, r6
 800372c:	463a      	mov	r2, r7
 800372e:	4620      	mov	r0, r4
 8003730:	f000 fbaa 	bl	8003e88 <__pow5mult>
 8003734:	9a04      	ldr	r2, [sp, #16]
 8003736:	4601      	mov	r1, r0
 8003738:	4606      	mov	r6, r0
 800373a:	4620      	mov	r0, r4
 800373c:	f000 fb0e 	bl	8003d5c <__multiply>
 8003740:	9904      	ldr	r1, [sp, #16]
 8003742:	9008      	str	r0, [sp, #32]
 8003744:	4620      	mov	r0, r4
 8003746:	f000 fa60 	bl	8003c0a <_Bfree>
 800374a:	9b08      	ldr	r3, [sp, #32]
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	9b07      	ldr	r3, [sp, #28]
 8003750:	1bda      	subs	r2, r3, r7
 8003752:	d004      	beq.n	800375e <_dtoa_r+0x76e>
 8003754:	9904      	ldr	r1, [sp, #16]
 8003756:	4620      	mov	r0, r4
 8003758:	f000 fb96 	bl	8003e88 <__pow5mult>
 800375c:	9004      	str	r0, [sp, #16]
 800375e:	2101      	movs	r1, #1
 8003760:	4620      	mov	r0, r4
 8003762:	f000 faf2 	bl	8003d4a <__i2b>
 8003766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003768:	4607      	mov	r7, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 81d0 	beq.w	8003b10 <_dtoa_r+0xb20>
 8003770:	461a      	mov	r2, r3
 8003772:	4601      	mov	r1, r0
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fb87 	bl	8003e88 <__pow5mult>
 800377a:	9b06      	ldr	r3, [sp, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	4607      	mov	r7, r0
 8003780:	dc40      	bgt.n	8003804 <_dtoa_r+0x814>
 8003782:	9b00      	ldr	r3, [sp, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d139      	bne.n	80037fc <_dtoa_r+0x80c>
 8003788:	9b01      	ldr	r3, [sp, #4]
 800378a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378e:	2b00      	cmp	r3, #0
 8003790:	d136      	bne.n	8003800 <_dtoa_r+0x810>
 8003792:	9b01      	ldr	r3, [sp, #4]
 8003794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003798:	0d1b      	lsrs	r3, r3, #20
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	b12b      	cbz	r3, 80037aa <_dtoa_r+0x7ba>
 800379e:	9b05      	ldr	r3, [sp, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	9305      	str	r3, [sp, #20]
 80037a4:	f108 0801 	add.w	r8, r8, #1
 80037a8:	2301      	movs	r3, #1
 80037aa:	9307      	str	r3, [sp, #28]
 80037ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12a      	bne.n	8003808 <_dtoa_r+0x818>
 80037b2:	2001      	movs	r0, #1
 80037b4:	e030      	b.n	8003818 <_dtoa_r+0x828>
 80037b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80037b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80037bc:	e795      	b.n	80036ea <_dtoa_r+0x6fa>
 80037be:	9b07      	ldr	r3, [sp, #28]
 80037c0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80037c4:	42bb      	cmp	r3, r7
 80037c6:	bfbf      	itttt	lt
 80037c8:	9b07      	ldrlt	r3, [sp, #28]
 80037ca:	9707      	strlt	r7, [sp, #28]
 80037cc:	1afa      	sublt	r2, r7, r3
 80037ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80037d0:	bfbb      	ittet	lt
 80037d2:	189b      	addlt	r3, r3, r2
 80037d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80037d6:	1bdf      	subge	r7, r3, r7
 80037d8:	2700      	movlt	r7, #0
 80037da:	f1b9 0f00 	cmp.w	r9, #0
 80037de:	bfb5      	itete	lt
 80037e0:	9b05      	ldrlt	r3, [sp, #20]
 80037e2:	9d05      	ldrge	r5, [sp, #20]
 80037e4:	eba3 0509 	sublt.w	r5, r3, r9
 80037e8:	464b      	movge	r3, r9
 80037ea:	bfb8      	it	lt
 80037ec:	2300      	movlt	r3, #0
 80037ee:	e77e      	b.n	80036ee <_dtoa_r+0x6fe>
 80037f0:	9f07      	ldr	r7, [sp, #28]
 80037f2:	9d05      	ldr	r5, [sp, #20]
 80037f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80037f6:	e783      	b.n	8003700 <_dtoa_r+0x710>
 80037f8:	9a07      	ldr	r2, [sp, #28]
 80037fa:	e7ab      	b.n	8003754 <_dtoa_r+0x764>
 80037fc:	2300      	movs	r3, #0
 80037fe:	e7d4      	b.n	80037aa <_dtoa_r+0x7ba>
 8003800:	9b00      	ldr	r3, [sp, #0]
 8003802:	e7d2      	b.n	80037aa <_dtoa_r+0x7ba>
 8003804:	2300      	movs	r3, #0
 8003806:	9307      	str	r3, [sp, #28]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800380e:	6918      	ldr	r0, [r3, #16]
 8003810:	f000 fa4d 	bl	8003cae <__hi0bits>
 8003814:	f1c0 0020 	rsb	r0, r0, #32
 8003818:	4440      	add	r0, r8
 800381a:	f010 001f 	ands.w	r0, r0, #31
 800381e:	d047      	beq.n	80038b0 <_dtoa_r+0x8c0>
 8003820:	f1c0 0320 	rsb	r3, r0, #32
 8003824:	2b04      	cmp	r3, #4
 8003826:	dd3b      	ble.n	80038a0 <_dtoa_r+0x8b0>
 8003828:	9b05      	ldr	r3, [sp, #20]
 800382a:	f1c0 001c 	rsb	r0, r0, #28
 800382e:	4403      	add	r3, r0
 8003830:	9305      	str	r3, [sp, #20]
 8003832:	4405      	add	r5, r0
 8003834:	4480      	add	r8, r0
 8003836:	9b05      	ldr	r3, [sp, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	dd05      	ble.n	8003848 <_dtoa_r+0x858>
 800383c:	461a      	mov	r2, r3
 800383e:	9904      	ldr	r1, [sp, #16]
 8003840:	4620      	mov	r0, r4
 8003842:	f000 fb6f 	bl	8003f24 <__lshift>
 8003846:	9004      	str	r0, [sp, #16]
 8003848:	f1b8 0f00 	cmp.w	r8, #0
 800384c:	dd05      	ble.n	800385a <_dtoa_r+0x86a>
 800384e:	4639      	mov	r1, r7
 8003850:	4642      	mov	r2, r8
 8003852:	4620      	mov	r0, r4
 8003854:	f000 fb66 	bl	8003f24 <__lshift>
 8003858:	4607      	mov	r7, r0
 800385a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800385c:	b353      	cbz	r3, 80038b4 <_dtoa_r+0x8c4>
 800385e:	4639      	mov	r1, r7
 8003860:	9804      	ldr	r0, [sp, #16]
 8003862:	f000 fbb3 	bl	8003fcc <__mcmp>
 8003866:	2800      	cmp	r0, #0
 8003868:	da24      	bge.n	80038b4 <_dtoa_r+0x8c4>
 800386a:	2300      	movs	r3, #0
 800386c:	220a      	movs	r2, #10
 800386e:	9904      	ldr	r1, [sp, #16]
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f9e1 	bl	8003c38 <__multadd>
 8003876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003878:	9004      	str	r0, [sp, #16]
 800387a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 814d 	beq.w	8003b1e <_dtoa_r+0xb2e>
 8003884:	2300      	movs	r3, #0
 8003886:	4631      	mov	r1, r6
 8003888:	220a      	movs	r2, #10
 800388a:	4620      	mov	r0, r4
 800388c:	f000 f9d4 	bl	8003c38 <__multadd>
 8003890:	9b02      	ldr	r3, [sp, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	4606      	mov	r6, r0
 8003896:	dc4f      	bgt.n	8003938 <_dtoa_r+0x948>
 8003898:	9b06      	ldr	r3, [sp, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	dd4c      	ble.n	8003938 <_dtoa_r+0x948>
 800389e:	e011      	b.n	80038c4 <_dtoa_r+0x8d4>
 80038a0:	d0c9      	beq.n	8003836 <_dtoa_r+0x846>
 80038a2:	9a05      	ldr	r2, [sp, #20]
 80038a4:	331c      	adds	r3, #28
 80038a6:	441a      	add	r2, r3
 80038a8:	9205      	str	r2, [sp, #20]
 80038aa:	441d      	add	r5, r3
 80038ac:	4498      	add	r8, r3
 80038ae:	e7c2      	b.n	8003836 <_dtoa_r+0x846>
 80038b0:	4603      	mov	r3, r0
 80038b2:	e7f6      	b.n	80038a2 <_dtoa_r+0x8b2>
 80038b4:	f1b9 0f00 	cmp.w	r9, #0
 80038b8:	dc38      	bgt.n	800392c <_dtoa_r+0x93c>
 80038ba:	9b06      	ldr	r3, [sp, #24]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	dd35      	ble.n	800392c <_dtoa_r+0x93c>
 80038c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80038c4:	9b02      	ldr	r3, [sp, #8]
 80038c6:	b963      	cbnz	r3, 80038e2 <_dtoa_r+0x8f2>
 80038c8:	4639      	mov	r1, r7
 80038ca:	2205      	movs	r2, #5
 80038cc:	4620      	mov	r0, r4
 80038ce:	f000 f9b3 	bl	8003c38 <__multadd>
 80038d2:	4601      	mov	r1, r0
 80038d4:	4607      	mov	r7, r0
 80038d6:	9804      	ldr	r0, [sp, #16]
 80038d8:	f000 fb78 	bl	8003fcc <__mcmp>
 80038dc:	2800      	cmp	r0, #0
 80038de:	f73f adcc 	bgt.w	800347a <_dtoa_r+0x48a>
 80038e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038e4:	465d      	mov	r5, fp
 80038e6:	ea6f 0a03 	mvn.w	sl, r3
 80038ea:	f04f 0900 	mov.w	r9, #0
 80038ee:	4639      	mov	r1, r7
 80038f0:	4620      	mov	r0, r4
 80038f2:	f000 f98a 	bl	8003c0a <_Bfree>
 80038f6:	2e00      	cmp	r6, #0
 80038f8:	f43f aeb7 	beq.w	800366a <_dtoa_r+0x67a>
 80038fc:	f1b9 0f00 	cmp.w	r9, #0
 8003900:	d005      	beq.n	800390e <_dtoa_r+0x91e>
 8003902:	45b1      	cmp	r9, r6
 8003904:	d003      	beq.n	800390e <_dtoa_r+0x91e>
 8003906:	4649      	mov	r1, r9
 8003908:	4620      	mov	r0, r4
 800390a:	f000 f97e 	bl	8003c0a <_Bfree>
 800390e:	4631      	mov	r1, r6
 8003910:	4620      	mov	r0, r4
 8003912:	f000 f97a 	bl	8003c0a <_Bfree>
 8003916:	e6a8      	b.n	800366a <_dtoa_r+0x67a>
 8003918:	2700      	movs	r7, #0
 800391a:	463e      	mov	r6, r7
 800391c:	e7e1      	b.n	80038e2 <_dtoa_r+0x8f2>
 800391e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003922:	463e      	mov	r6, r7
 8003924:	e5a9      	b.n	800347a <_dtoa_r+0x48a>
 8003926:	bf00      	nop
 8003928:	40240000 	.word	0x40240000
 800392c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800392e:	f8cd 9008 	str.w	r9, [sp, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80fa 	beq.w	8003b2c <_dtoa_r+0xb3c>
 8003938:	2d00      	cmp	r5, #0
 800393a:	dd05      	ble.n	8003948 <_dtoa_r+0x958>
 800393c:	4631      	mov	r1, r6
 800393e:	462a      	mov	r2, r5
 8003940:	4620      	mov	r0, r4
 8003942:	f000 faef 	bl	8003f24 <__lshift>
 8003946:	4606      	mov	r6, r0
 8003948:	9b07      	ldr	r3, [sp, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04c      	beq.n	80039e8 <_dtoa_r+0x9f8>
 800394e:	6871      	ldr	r1, [r6, #4]
 8003950:	4620      	mov	r0, r4
 8003952:	f000 f926 	bl	8003ba2 <_Balloc>
 8003956:	6932      	ldr	r2, [r6, #16]
 8003958:	3202      	adds	r2, #2
 800395a:	4605      	mov	r5, r0
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	f106 010c 	add.w	r1, r6, #12
 8003962:	300c      	adds	r0, #12
 8003964:	f000 f912 	bl	8003b8c <memcpy>
 8003968:	2201      	movs	r2, #1
 800396a:	4629      	mov	r1, r5
 800396c:	4620      	mov	r0, r4
 800396e:	f000 fad9 	bl	8003f24 <__lshift>
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	f8cd b014 	str.w	fp, [sp, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	46b1      	mov	r9, r6
 800397e:	9307      	str	r3, [sp, #28]
 8003980:	4606      	mov	r6, r0
 8003982:	4639      	mov	r1, r7
 8003984:	9804      	ldr	r0, [sp, #16]
 8003986:	f7ff faa4 	bl	8002ed2 <quorem>
 800398a:	4649      	mov	r1, r9
 800398c:	4605      	mov	r5, r0
 800398e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003992:	9804      	ldr	r0, [sp, #16]
 8003994:	f000 fb1a 	bl	8003fcc <__mcmp>
 8003998:	4632      	mov	r2, r6
 800399a:	9000      	str	r0, [sp, #0]
 800399c:	4639      	mov	r1, r7
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 fb2e 	bl	8004000 <__mdiff>
 80039a4:	68c3      	ldr	r3, [r0, #12]
 80039a6:	4602      	mov	r2, r0
 80039a8:	bb03      	cbnz	r3, 80039ec <_dtoa_r+0x9fc>
 80039aa:	4601      	mov	r1, r0
 80039ac:	9008      	str	r0, [sp, #32]
 80039ae:	9804      	ldr	r0, [sp, #16]
 80039b0:	f000 fb0c 	bl	8003fcc <__mcmp>
 80039b4:	9a08      	ldr	r2, [sp, #32]
 80039b6:	4603      	mov	r3, r0
 80039b8:	4611      	mov	r1, r2
 80039ba:	4620      	mov	r0, r4
 80039bc:	9308      	str	r3, [sp, #32]
 80039be:	f000 f924 	bl	8003c0a <_Bfree>
 80039c2:	9b08      	ldr	r3, [sp, #32]
 80039c4:	b9a3      	cbnz	r3, 80039f0 <_dtoa_r+0xa00>
 80039c6:	9a06      	ldr	r2, [sp, #24]
 80039c8:	b992      	cbnz	r2, 80039f0 <_dtoa_r+0xa00>
 80039ca:	9a07      	ldr	r2, [sp, #28]
 80039cc:	b982      	cbnz	r2, 80039f0 <_dtoa_r+0xa00>
 80039ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80039d2:	d029      	beq.n	8003a28 <_dtoa_r+0xa38>
 80039d4:	9b00      	ldr	r3, [sp, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dd01      	ble.n	80039de <_dtoa_r+0x9ee>
 80039da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80039de:	9b05      	ldr	r3, [sp, #20]
 80039e0:	1c5d      	adds	r5, r3, #1
 80039e2:	f883 8000 	strb.w	r8, [r3]
 80039e6:	e782      	b.n	80038ee <_dtoa_r+0x8fe>
 80039e8:	4630      	mov	r0, r6
 80039ea:	e7c2      	b.n	8003972 <_dtoa_r+0x982>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e7e3      	b.n	80039b8 <_dtoa_r+0x9c8>
 80039f0:	9a00      	ldr	r2, [sp, #0]
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	db04      	blt.n	8003a00 <_dtoa_r+0xa10>
 80039f6:	d125      	bne.n	8003a44 <_dtoa_r+0xa54>
 80039f8:	9a06      	ldr	r2, [sp, #24]
 80039fa:	bb1a      	cbnz	r2, 8003a44 <_dtoa_r+0xa54>
 80039fc:	9a07      	ldr	r2, [sp, #28]
 80039fe:	bb0a      	cbnz	r2, 8003a44 <_dtoa_r+0xa54>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	ddec      	ble.n	80039de <_dtoa_r+0x9ee>
 8003a04:	2201      	movs	r2, #1
 8003a06:	9904      	ldr	r1, [sp, #16]
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f000 fa8b 	bl	8003f24 <__lshift>
 8003a0e:	4639      	mov	r1, r7
 8003a10:	9004      	str	r0, [sp, #16]
 8003a12:	f000 fadb 	bl	8003fcc <__mcmp>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	dc03      	bgt.n	8003a22 <_dtoa_r+0xa32>
 8003a1a:	d1e0      	bne.n	80039de <_dtoa_r+0x9ee>
 8003a1c:	f018 0f01 	tst.w	r8, #1
 8003a20:	d0dd      	beq.n	80039de <_dtoa_r+0x9ee>
 8003a22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003a26:	d1d8      	bne.n	80039da <_dtoa_r+0x9ea>
 8003a28:	9b05      	ldr	r3, [sp, #20]
 8003a2a:	9a05      	ldr	r2, [sp, #20]
 8003a2c:	1c5d      	adds	r5, r3, #1
 8003a2e:	2339      	movs	r3, #57	; 0x39
 8003a30:	7013      	strb	r3, [r2, #0]
 8003a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a36:	2b39      	cmp	r3, #57	; 0x39
 8003a38:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003a3c:	d04f      	beq.n	8003ade <_dtoa_r+0xaee>
 8003a3e:	3301      	adds	r3, #1
 8003a40:	7013      	strb	r3, [r2, #0]
 8003a42:	e754      	b.n	80038ee <_dtoa_r+0x8fe>
 8003a44:	9a05      	ldr	r2, [sp, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f102 0501 	add.w	r5, r2, #1
 8003a4c:	dd06      	ble.n	8003a5c <_dtoa_r+0xa6c>
 8003a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003a52:	d0e9      	beq.n	8003a28 <_dtoa_r+0xa38>
 8003a54:	f108 0801 	add.w	r8, r8, #1
 8003a58:	9b05      	ldr	r3, [sp, #20]
 8003a5a:	e7c2      	b.n	80039e2 <_dtoa_r+0x9f2>
 8003a5c:	9a02      	ldr	r2, [sp, #8]
 8003a5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003a62:	eba5 030b 	sub.w	r3, r5, fp
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d021      	beq.n	8003aae <_dtoa_r+0xabe>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	220a      	movs	r2, #10
 8003a6e:	9904      	ldr	r1, [sp, #16]
 8003a70:	4620      	mov	r0, r4
 8003a72:	f000 f8e1 	bl	8003c38 <__multadd>
 8003a76:	45b1      	cmp	r9, r6
 8003a78:	9004      	str	r0, [sp, #16]
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f04f 020a 	mov.w	r2, #10
 8003a82:	4649      	mov	r1, r9
 8003a84:	4620      	mov	r0, r4
 8003a86:	d105      	bne.n	8003a94 <_dtoa_r+0xaa4>
 8003a88:	f000 f8d6 	bl	8003c38 <__multadd>
 8003a8c:	4681      	mov	r9, r0
 8003a8e:	4606      	mov	r6, r0
 8003a90:	9505      	str	r5, [sp, #20]
 8003a92:	e776      	b.n	8003982 <_dtoa_r+0x992>
 8003a94:	f000 f8d0 	bl	8003c38 <__multadd>
 8003a98:	4631      	mov	r1, r6
 8003a9a:	4681      	mov	r9, r0
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	220a      	movs	r2, #10
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 f8c9 	bl	8003c38 <__multadd>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	e7f2      	b.n	8003a90 <_dtoa_r+0xaa0>
 8003aaa:	f04f 0900 	mov.w	r9, #0
 8003aae:	2201      	movs	r2, #1
 8003ab0:	9904      	ldr	r1, [sp, #16]
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 fa36 	bl	8003f24 <__lshift>
 8003ab8:	4639      	mov	r1, r7
 8003aba:	9004      	str	r0, [sp, #16]
 8003abc:	f000 fa86 	bl	8003fcc <__mcmp>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	dcb6      	bgt.n	8003a32 <_dtoa_r+0xa42>
 8003ac4:	d102      	bne.n	8003acc <_dtoa_r+0xadc>
 8003ac6:	f018 0f01 	tst.w	r8, #1
 8003aca:	d1b2      	bne.n	8003a32 <_dtoa_r+0xa42>
 8003acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003ad6:	f47f af0a 	bne.w	80038ee <_dtoa_r+0x8fe>
 8003ada:	4615      	mov	r5, r2
 8003adc:	e7f6      	b.n	8003acc <_dtoa_r+0xadc>
 8003ade:	4593      	cmp	fp, r2
 8003ae0:	d105      	bne.n	8003aee <_dtoa_r+0xafe>
 8003ae2:	2331      	movs	r3, #49	; 0x31
 8003ae4:	f10a 0a01 	add.w	sl, sl, #1
 8003ae8:	f88b 3000 	strb.w	r3, [fp]
 8003aec:	e6ff      	b.n	80038ee <_dtoa_r+0x8fe>
 8003aee:	4615      	mov	r5, r2
 8003af0:	e79f      	b.n	8003a32 <_dtoa_r+0xa42>
 8003af2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003b58 <_dtoa_r+0xb68>
 8003af6:	e007      	b.n	8003b08 <_dtoa_r+0xb18>
 8003af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003afa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003b5c <_dtoa_r+0xb6c>
 8003afe:	b11b      	cbz	r3, 8003b08 <_dtoa_r+0xb18>
 8003b00:	f10b 0308 	add.w	r3, fp, #8
 8003b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4658      	mov	r0, fp
 8003b0a:	b017      	add	sp, #92	; 0x5c
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b10:	9b06      	ldr	r3, [sp, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f77f ae35 	ble.w	8003782 <_dtoa_r+0x792>
 8003b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b1a:	9307      	str	r3, [sp, #28]
 8003b1c:	e649      	b.n	80037b2 <_dtoa_r+0x7c2>
 8003b1e:	9b02      	ldr	r3, [sp, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	dc03      	bgt.n	8003b2c <_dtoa_r+0xb3c>
 8003b24:	9b06      	ldr	r3, [sp, #24]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f73f aecc 	bgt.w	80038c4 <_dtoa_r+0x8d4>
 8003b2c:	465d      	mov	r5, fp
 8003b2e:	4639      	mov	r1, r7
 8003b30:	9804      	ldr	r0, [sp, #16]
 8003b32:	f7ff f9ce 	bl	8002ed2 <quorem>
 8003b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003b3a:	f805 8b01 	strb.w	r8, [r5], #1
 8003b3e:	9a02      	ldr	r2, [sp, #8]
 8003b40:	eba5 030b 	sub.w	r3, r5, fp
 8003b44:	429a      	cmp	r2, r3
 8003b46:	ddb0      	ble.n	8003aaa <_dtoa_r+0xaba>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	220a      	movs	r2, #10
 8003b4c:	9904      	ldr	r1, [sp, #16]
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 f872 	bl	8003c38 <__multadd>
 8003b54:	9004      	str	r0, [sp, #16]
 8003b56:	e7ea      	b.n	8003b2e <_dtoa_r+0xb3e>
 8003b58:	08004304 	.word	0x08004304
 8003b5c:	08004306 	.word	0x08004306

08003b60 <_localeconv_r>:
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <_localeconv_r+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a18      	ldr	r0, [r3, #32]
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <_localeconv_r+0x18>)
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	bf08      	it	eq
 8003b6c:	4618      	moveq	r0, r3
 8003b6e:	30f0      	adds	r0, #240	; 0xf0
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000010 	.word	0x20000010
 8003b78:	20000074 	.word	0x20000074

08003b7c <malloc>:
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <malloc+0xc>)
 8003b7e:	4601      	mov	r1, r0
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f000 baf7 	b.w	8004174 <_malloc_r>
 8003b86:	bf00      	nop
 8003b88:	20000010 	.word	0x20000010

08003b8c <memcpy>:
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	1e43      	subs	r3, r0, #1
 8003b90:	440a      	add	r2, r1
 8003b92:	4291      	cmp	r1, r2
 8003b94:	d100      	bne.n	8003b98 <memcpy+0xc>
 8003b96:	bd10      	pop	{r4, pc}
 8003b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba0:	e7f7      	b.n	8003b92 <memcpy+0x6>

08003ba2 <_Balloc>:
 8003ba2:	b570      	push	{r4, r5, r6, lr}
 8003ba4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	460e      	mov	r6, r1
 8003baa:	b93d      	cbnz	r5, 8003bbc <_Balloc+0x1a>
 8003bac:	2010      	movs	r0, #16
 8003bae:	f7ff ffe5 	bl	8003b7c <malloc>
 8003bb2:	6260      	str	r0, [r4, #36]	; 0x24
 8003bb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003bb8:	6005      	str	r5, [r0, #0]
 8003bba:	60c5      	str	r5, [r0, #12]
 8003bbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003bbe:	68eb      	ldr	r3, [r5, #12]
 8003bc0:	b183      	cbz	r3, 8003be4 <_Balloc+0x42>
 8003bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003bca:	b9b8      	cbnz	r0, 8003bfc <_Balloc+0x5a>
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f506 	lsl.w	r5, r1, r6
 8003bd2:	1d6a      	adds	r2, r5, #5
 8003bd4:	0092      	lsls	r2, r2, #2
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 fabe 	bl	8004158 <_calloc_r>
 8003bdc:	b160      	cbz	r0, 8003bf8 <_Balloc+0x56>
 8003bde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003be2:	e00e      	b.n	8003c02 <_Balloc+0x60>
 8003be4:	2221      	movs	r2, #33	; 0x21
 8003be6:	2104      	movs	r1, #4
 8003be8:	4620      	mov	r0, r4
 8003bea:	f000 fab5 	bl	8004158 <_calloc_r>
 8003bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bf0:	60e8      	str	r0, [r5, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e4      	bne.n	8003bc2 <_Balloc+0x20>
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	6802      	ldr	r2, [r0, #0]
 8003bfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003c02:	2300      	movs	r3, #0
 8003c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003c08:	e7f7      	b.n	8003bfa <_Balloc+0x58>

08003c0a <_Bfree>:
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c0e:	4606      	mov	r6, r0
 8003c10:	460d      	mov	r5, r1
 8003c12:	b93c      	cbnz	r4, 8003c24 <_Bfree+0x1a>
 8003c14:	2010      	movs	r0, #16
 8003c16:	f7ff ffb1 	bl	8003b7c <malloc>
 8003c1a:	6270      	str	r0, [r6, #36]	; 0x24
 8003c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c20:	6004      	str	r4, [r0, #0]
 8003c22:	60c4      	str	r4, [r0, #12]
 8003c24:	b13d      	cbz	r5, 8003c36 <_Bfree+0x2c>
 8003c26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c28:	686a      	ldr	r2, [r5, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c30:	6029      	str	r1, [r5, #0]
 8003c32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003c36:	bd70      	pop	{r4, r5, r6, pc}

08003c38 <__multadd>:
 8003c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3c:	690d      	ldr	r5, [r1, #16]
 8003c3e:	461f      	mov	r7, r3
 8003c40:	4606      	mov	r6, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	f101 0c14 	add.w	ip, r1, #20
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8dc 0000 	ldr.w	r0, [ip]
 8003c4e:	b281      	uxth	r1, r0
 8003c50:	fb02 7101 	mla	r1, r2, r1, r7
 8003c54:	0c0f      	lsrs	r7, r1, #16
 8003c56:	0c00      	lsrs	r0, r0, #16
 8003c58:	fb02 7000 	mla	r0, r2, r0, r7
 8003c5c:	b289      	uxth	r1, r1
 8003c5e:	3301      	adds	r3, #1
 8003c60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003c64:	429d      	cmp	r5, r3
 8003c66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8003c6e:	dcec      	bgt.n	8003c4a <__multadd+0x12>
 8003c70:	b1d7      	cbz	r7, 8003ca8 <__multadd+0x70>
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dc12      	bgt.n	8003c9e <__multadd+0x66>
 8003c78:	6861      	ldr	r1, [r4, #4]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	3101      	adds	r1, #1
 8003c7e:	f7ff ff90 	bl	8003ba2 <_Balloc>
 8003c82:	6922      	ldr	r2, [r4, #16]
 8003c84:	3202      	adds	r2, #2
 8003c86:	f104 010c 	add.w	r1, r4, #12
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	300c      	adds	r0, #12
 8003c90:	f7ff ff7c 	bl	8003b8c <memcpy>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff ffb7 	bl	8003c0a <_Bfree>
 8003c9c:	4644      	mov	r4, r8
 8003c9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	615f      	str	r7, [r3, #20]
 8003ca6:	6125      	str	r5, [r4, #16]
 8003ca8:	4620      	mov	r0, r4
 8003caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003cae <__hi0bits>:
 8003cae:	0c02      	lsrs	r2, r0, #16
 8003cb0:	0412      	lsls	r2, r2, #16
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b9b2      	cbnz	r2, 8003ce4 <__hi0bits+0x36>
 8003cb6:	0403      	lsls	r3, r0, #16
 8003cb8:	2010      	movs	r0, #16
 8003cba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003cbe:	bf04      	itt	eq
 8003cc0:	021b      	lsleq	r3, r3, #8
 8003cc2:	3008      	addeq	r0, #8
 8003cc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003cc8:	bf04      	itt	eq
 8003cca:	011b      	lsleq	r3, r3, #4
 8003ccc:	3004      	addeq	r0, #4
 8003cce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003cd2:	bf04      	itt	eq
 8003cd4:	009b      	lsleq	r3, r3, #2
 8003cd6:	3002      	addeq	r0, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db06      	blt.n	8003cea <__hi0bits+0x3c>
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	d503      	bpl.n	8003ce8 <__hi0bits+0x3a>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	4770      	bx	lr
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e7e8      	b.n	8003cba <__hi0bits+0xc>
 8003ce8:	2020      	movs	r0, #32
 8003cea:	4770      	bx	lr

08003cec <__lo0bits>:
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	f013 0207 	ands.w	r2, r3, #7
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	d00b      	beq.n	8003d0e <__lo0bits+0x22>
 8003cf6:	07da      	lsls	r2, r3, #31
 8003cf8:	d423      	bmi.n	8003d42 <__lo0bits+0x56>
 8003cfa:	0798      	lsls	r0, r3, #30
 8003cfc:	bf49      	itett	mi
 8003cfe:	085b      	lsrmi	r3, r3, #1
 8003d00:	089b      	lsrpl	r3, r3, #2
 8003d02:	2001      	movmi	r0, #1
 8003d04:	600b      	strmi	r3, [r1, #0]
 8003d06:	bf5c      	itt	pl
 8003d08:	600b      	strpl	r3, [r1, #0]
 8003d0a:	2002      	movpl	r0, #2
 8003d0c:	4770      	bx	lr
 8003d0e:	b298      	uxth	r0, r3
 8003d10:	b9a8      	cbnz	r0, 8003d3e <__lo0bits+0x52>
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	2010      	movs	r0, #16
 8003d16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d1a:	bf04      	itt	eq
 8003d1c:	0a1b      	lsreq	r3, r3, #8
 8003d1e:	3008      	addeq	r0, #8
 8003d20:	071a      	lsls	r2, r3, #28
 8003d22:	bf04      	itt	eq
 8003d24:	091b      	lsreq	r3, r3, #4
 8003d26:	3004      	addeq	r0, #4
 8003d28:	079a      	lsls	r2, r3, #30
 8003d2a:	bf04      	itt	eq
 8003d2c:	089b      	lsreq	r3, r3, #2
 8003d2e:	3002      	addeq	r0, #2
 8003d30:	07da      	lsls	r2, r3, #31
 8003d32:	d402      	bmi.n	8003d3a <__lo0bits+0x4e>
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	d006      	beq.n	8003d46 <__lo0bits+0x5a>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	4610      	mov	r0, r2
 8003d40:	e7e9      	b.n	8003d16 <__lo0bits+0x2a>
 8003d42:	2000      	movs	r0, #0
 8003d44:	4770      	bx	lr
 8003d46:	2020      	movs	r0, #32
 8003d48:	4770      	bx	lr

08003d4a <__i2b>:
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	2101      	movs	r1, #1
 8003d50:	f7ff ff27 	bl	8003ba2 <_Balloc>
 8003d54:	2201      	movs	r2, #1
 8003d56:	6144      	str	r4, [r0, #20]
 8003d58:	6102      	str	r2, [r0, #16]
 8003d5a:	bd10      	pop	{r4, pc}

08003d5c <__multiply>:
 8003d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	4614      	mov	r4, r2
 8003d62:	690a      	ldr	r2, [r1, #16]
 8003d64:	6923      	ldr	r3, [r4, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bfb8      	it	lt
 8003d6a:	460b      	movlt	r3, r1
 8003d6c:	4688      	mov	r8, r1
 8003d6e:	bfbc      	itt	lt
 8003d70:	46a0      	movlt	r8, r4
 8003d72:	461c      	movlt	r4, r3
 8003d74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003d78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003d7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003d80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d84:	eb07 0609 	add.w	r6, r7, r9
 8003d88:	42b3      	cmp	r3, r6
 8003d8a:	bfb8      	it	lt
 8003d8c:	3101      	addlt	r1, #1
 8003d8e:	f7ff ff08 	bl	8003ba2 <_Balloc>
 8003d92:	f100 0514 	add.w	r5, r0, #20
 8003d96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4573      	cmp	r3, lr
 8003da0:	d316      	bcc.n	8003dd0 <__multiply+0x74>
 8003da2:	f104 0214 	add.w	r2, r4, #20
 8003da6:	f108 0114 	add.w	r1, r8, #20
 8003daa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003dae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	9b00      	ldr	r3, [sp, #0]
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d80c      	bhi.n	8003dd6 <__multiply+0x7a>
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	dd03      	ble.n	8003dc8 <__multiply+0x6c>
 8003dc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05d      	beq.n	8003e84 <__multiply+0x128>
 8003dc8:	6106      	str	r6, [r0, #16]
 8003dca:	b003      	add	sp, #12
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	f843 2b04 	str.w	r2, [r3], #4
 8003dd4:	e7e3      	b.n	8003d9e <__multiply+0x42>
 8003dd6:	f8b2 b000 	ldrh.w	fp, [r2]
 8003dda:	f1bb 0f00 	cmp.w	fp, #0
 8003dde:	d023      	beq.n	8003e28 <__multiply+0xcc>
 8003de0:	4689      	mov	r9, r1
 8003de2:	46ac      	mov	ip, r5
 8003de4:	f04f 0800 	mov.w	r8, #0
 8003de8:	f859 4b04 	ldr.w	r4, [r9], #4
 8003dec:	f8dc a000 	ldr.w	sl, [ip]
 8003df0:	b2a3      	uxth	r3, r4
 8003df2:	fa1f fa8a 	uxth.w	sl, sl
 8003df6:	fb0b a303 	mla	r3, fp, r3, sl
 8003dfa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003dfe:	f8dc 4000 	ldr.w	r4, [ip]
 8003e02:	4443      	add	r3, r8
 8003e04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003e08:	fb0b 840a 	mla	r4, fp, sl, r8
 8003e0c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003e10:	46e2      	mov	sl, ip
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003e18:	454f      	cmp	r7, r9
 8003e1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8003e22:	d82b      	bhi.n	8003e7c <__multiply+0x120>
 8003e24:	f8cc 8004 	str.w	r8, [ip, #4]
 8003e28:	9b01      	ldr	r3, [sp, #4]
 8003e2a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003e2e:	3204      	adds	r2, #4
 8003e30:	f1ba 0f00 	cmp.w	sl, #0
 8003e34:	d020      	beq.n	8003e78 <__multiply+0x11c>
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	4689      	mov	r9, r1
 8003e3a:	46a8      	mov	r8, r5
 8003e3c:	f04f 0b00 	mov.w	fp, #0
 8003e40:	f8b9 c000 	ldrh.w	ip, [r9]
 8003e44:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003e48:	fb0a 440c 	mla	r4, sl, ip, r4
 8003e4c:	445c      	add	r4, fp
 8003e4e:	46c4      	mov	ip, r8
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003e56:	f84c 3b04 	str.w	r3, [ip], #4
 8003e5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8003e5e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	fb0a b303 	mla	r3, sl, r3, fp
 8003e68:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003e6c:	454f      	cmp	r7, r9
 8003e6e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003e72:	d805      	bhi.n	8003e80 <__multiply+0x124>
 8003e74:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e78:	3504      	adds	r5, #4
 8003e7a:	e79b      	b.n	8003db4 <__multiply+0x58>
 8003e7c:	46d4      	mov	ip, sl
 8003e7e:	e7b3      	b.n	8003de8 <__multiply+0x8c>
 8003e80:	46e0      	mov	r8, ip
 8003e82:	e7dd      	b.n	8003e40 <__multiply+0xe4>
 8003e84:	3e01      	subs	r6, #1
 8003e86:	e799      	b.n	8003dbc <__multiply+0x60>

08003e88 <__pow5mult>:
 8003e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e8c:	4615      	mov	r5, r2
 8003e8e:	f012 0203 	ands.w	r2, r2, #3
 8003e92:	4606      	mov	r6, r0
 8003e94:	460f      	mov	r7, r1
 8003e96:	d007      	beq.n	8003ea8 <__pow5mult+0x20>
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	4c21      	ldr	r4, [pc, #132]	; (8003f20 <__pow5mult+0x98>)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ea2:	f7ff fec9 	bl	8003c38 <__multadd>
 8003ea6:	4607      	mov	r7, r0
 8003ea8:	10ad      	asrs	r5, r5, #2
 8003eaa:	d035      	beq.n	8003f18 <__pow5mult+0x90>
 8003eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003eae:	b93c      	cbnz	r4, 8003ec0 <__pow5mult+0x38>
 8003eb0:	2010      	movs	r0, #16
 8003eb2:	f7ff fe63 	bl	8003b7c <malloc>
 8003eb6:	6270      	str	r0, [r6, #36]	; 0x24
 8003eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ebc:	6004      	str	r4, [r0, #0]
 8003ebe:	60c4      	str	r4, [r0, #12]
 8003ec0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ec8:	b94c      	cbnz	r4, 8003ede <__pow5mult+0x56>
 8003eca:	f240 2171 	movw	r1, #625	; 0x271
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f7ff ff3b 	bl	8003d4a <__i2b>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003eda:	4604      	mov	r4, r0
 8003edc:	6003      	str	r3, [r0, #0]
 8003ede:	f04f 0800 	mov.w	r8, #0
 8003ee2:	07eb      	lsls	r3, r5, #31
 8003ee4:	d50a      	bpl.n	8003efc <__pow5mult+0x74>
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4630      	mov	r0, r6
 8003eec:	f7ff ff36 	bl	8003d5c <__multiply>
 8003ef0:	4639      	mov	r1, r7
 8003ef2:	4681      	mov	r9, r0
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f7ff fe88 	bl	8003c0a <_Bfree>
 8003efa:	464f      	mov	r7, r9
 8003efc:	106d      	asrs	r5, r5, #1
 8003efe:	d00b      	beq.n	8003f18 <__pow5mult+0x90>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	b938      	cbnz	r0, 8003f14 <__pow5mult+0x8c>
 8003f04:	4622      	mov	r2, r4
 8003f06:	4621      	mov	r1, r4
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f7ff ff27 	bl	8003d5c <__multiply>
 8003f0e:	6020      	str	r0, [r4, #0]
 8003f10:	f8c0 8000 	str.w	r8, [r0]
 8003f14:	4604      	mov	r4, r0
 8003f16:	e7e4      	b.n	8003ee2 <__pow5mult+0x5a>
 8003f18:	4638      	mov	r0, r7
 8003f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f1e:	bf00      	nop
 8003f20:	08004408 	.word	0x08004408

08003f24 <__lshift>:
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	460c      	mov	r4, r1
 8003f2a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	6849      	ldr	r1, [r1, #4]
 8003f32:	eb0a 0903 	add.w	r9, sl, r3
 8003f36:	68a3      	ldr	r3, [r4, #8]
 8003f38:	4607      	mov	r7, r0
 8003f3a:	4616      	mov	r6, r2
 8003f3c:	f109 0501 	add.w	r5, r9, #1
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	db32      	blt.n	8003faa <__lshift+0x86>
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff fe2c 	bl	8003ba2 <_Balloc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	4680      	mov	r8, r0
 8003f4e:	f100 0114 	add.w	r1, r0, #20
 8003f52:	461a      	mov	r2, r3
 8003f54:	4553      	cmp	r3, sl
 8003f56:	db2b      	blt.n	8003fb0 <__lshift+0x8c>
 8003f58:	6920      	ldr	r0, [r4, #16]
 8003f5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f5e:	f104 0314 	add.w	r3, r4, #20
 8003f62:	f016 021f 	ands.w	r2, r6, #31
 8003f66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f6a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f6e:	d025      	beq.n	8003fbc <__lshift+0x98>
 8003f70:	f1c2 0e20 	rsb	lr, r2, #32
 8003f74:	2000      	movs	r0, #0
 8003f76:	681e      	ldr	r6, [r3, #0]
 8003f78:	468a      	mov	sl, r1
 8003f7a:	4096      	lsls	r6, r2
 8003f7c:	4330      	orrs	r0, r6
 8003f7e:	f84a 0b04 	str.w	r0, [sl], #4
 8003f82:	f853 0b04 	ldr.w	r0, [r3], #4
 8003f86:	459c      	cmp	ip, r3
 8003f88:	fa20 f00e 	lsr.w	r0, r0, lr
 8003f8c:	d814      	bhi.n	8003fb8 <__lshift+0x94>
 8003f8e:	6048      	str	r0, [r1, #4]
 8003f90:	b108      	cbz	r0, 8003f96 <__lshift+0x72>
 8003f92:	f109 0502 	add.w	r5, r9, #2
 8003f96:	3d01      	subs	r5, #1
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f8c8 5010 	str.w	r5, [r8, #16]
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	f7ff fe33 	bl	8003c0a <_Bfree>
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003faa:	3101      	adds	r1, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	e7c7      	b.n	8003f40 <__lshift+0x1c>
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	e7cd      	b.n	8003f54 <__lshift+0x30>
 8003fb8:	4651      	mov	r1, sl
 8003fba:	e7dc      	b.n	8003f76 <__lshift+0x52>
 8003fbc:	3904      	subs	r1, #4
 8003fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fc6:	459c      	cmp	ip, r3
 8003fc8:	d8f9      	bhi.n	8003fbe <__lshift+0x9a>
 8003fca:	e7e4      	b.n	8003f96 <__lshift+0x72>

08003fcc <__mcmp>:
 8003fcc:	6903      	ldr	r3, [r0, #16]
 8003fce:	690a      	ldr	r2, [r1, #16]
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	b530      	push	{r4, r5, lr}
 8003fd4:	d10c      	bne.n	8003ff0 <__mcmp+0x24>
 8003fd6:	0092      	lsls	r2, r2, #2
 8003fd8:	3014      	adds	r0, #20
 8003fda:	3114      	adds	r1, #20
 8003fdc:	1884      	adds	r4, r0, r2
 8003fde:	4411      	add	r1, r2
 8003fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003fe8:	4295      	cmp	r5, r2
 8003fea:	d003      	beq.n	8003ff4 <__mcmp+0x28>
 8003fec:	d305      	bcc.n	8003ffa <__mcmp+0x2e>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd30      	pop	{r4, r5, pc}
 8003ff4:	42a0      	cmp	r0, r4
 8003ff6:	d3f3      	bcc.n	8003fe0 <__mcmp+0x14>
 8003ff8:	e7fa      	b.n	8003ff0 <__mcmp+0x24>
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ffe:	e7f7      	b.n	8003ff0 <__mcmp+0x24>

08004000 <__mdiff>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	460d      	mov	r5, r1
 8004006:	4607      	mov	r7, r0
 8004008:	4611      	mov	r1, r2
 800400a:	4628      	mov	r0, r5
 800400c:	4614      	mov	r4, r2
 800400e:	f7ff ffdd 	bl	8003fcc <__mcmp>
 8004012:	1e06      	subs	r6, r0, #0
 8004014:	d108      	bne.n	8004028 <__mdiff+0x28>
 8004016:	4631      	mov	r1, r6
 8004018:	4638      	mov	r0, r7
 800401a:	f7ff fdc2 	bl	8003ba2 <_Balloc>
 800401e:	2301      	movs	r3, #1
 8004020:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004028:	bfa4      	itt	ge
 800402a:	4623      	movge	r3, r4
 800402c:	462c      	movge	r4, r5
 800402e:	4638      	mov	r0, r7
 8004030:	6861      	ldr	r1, [r4, #4]
 8004032:	bfa6      	itte	ge
 8004034:	461d      	movge	r5, r3
 8004036:	2600      	movge	r6, #0
 8004038:	2601      	movlt	r6, #1
 800403a:	f7ff fdb2 	bl	8003ba2 <_Balloc>
 800403e:	692b      	ldr	r3, [r5, #16]
 8004040:	60c6      	str	r6, [r0, #12]
 8004042:	6926      	ldr	r6, [r4, #16]
 8004044:	f105 0914 	add.w	r9, r5, #20
 8004048:	f104 0214 	add.w	r2, r4, #20
 800404c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004050:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004054:	f100 0514 	add.w	r5, r0, #20
 8004058:	f04f 0e00 	mov.w	lr, #0
 800405c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004060:	f859 4b04 	ldr.w	r4, [r9], #4
 8004064:	fa1e f18a 	uxtah	r1, lr, sl
 8004068:	b2a3      	uxth	r3, r4
 800406a:	1ac9      	subs	r1, r1, r3
 800406c:	0c23      	lsrs	r3, r4, #16
 800406e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004072:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004076:	b289      	uxth	r1, r1
 8004078:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800407c:	45c8      	cmp	r8, r9
 800407e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004082:	4694      	mov	ip, r2
 8004084:	f845 3b04 	str.w	r3, [r5], #4
 8004088:	d8e8      	bhi.n	800405c <__mdiff+0x5c>
 800408a:	45bc      	cmp	ip, r7
 800408c:	d304      	bcc.n	8004098 <__mdiff+0x98>
 800408e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004092:	b183      	cbz	r3, 80040b6 <__mdiff+0xb6>
 8004094:	6106      	str	r6, [r0, #16]
 8004096:	e7c5      	b.n	8004024 <__mdiff+0x24>
 8004098:	f85c 1b04 	ldr.w	r1, [ip], #4
 800409c:	fa1e f381 	uxtah	r3, lr, r1
 80040a0:	141a      	asrs	r2, r3, #16
 80040a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80040b0:	f845 3b04 	str.w	r3, [r5], #4
 80040b4:	e7e9      	b.n	800408a <__mdiff+0x8a>
 80040b6:	3e01      	subs	r6, #1
 80040b8:	e7e9      	b.n	800408e <__mdiff+0x8e>

080040ba <__d2b>:
 80040ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	2101      	movs	r1, #1
 80040c2:	ec59 8b10 	vmov	r8, r9, d0
 80040c6:	4615      	mov	r5, r2
 80040c8:	f7ff fd6b 	bl	8003ba2 <_Balloc>
 80040cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040d0:	4607      	mov	r7, r0
 80040d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040d6:	bb34      	cbnz	r4, 8004126 <__d2b+0x6c>
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	f1b8 0300 	subs.w	r3, r8, #0
 80040de:	d027      	beq.n	8004130 <__d2b+0x76>
 80040e0:	a802      	add	r0, sp, #8
 80040e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80040e6:	f7ff fe01 	bl	8003cec <__lo0bits>
 80040ea:	9900      	ldr	r1, [sp, #0]
 80040ec:	b1f0      	cbz	r0, 800412c <__d2b+0x72>
 80040ee:	9a01      	ldr	r2, [sp, #4]
 80040f0:	f1c0 0320 	rsb	r3, r0, #32
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	430b      	orrs	r3, r1
 80040fa:	40c2      	lsrs	r2, r0
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	9201      	str	r2, [sp, #4]
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf14      	ite	ne
 8004108:	2102      	movne	r1, #2
 800410a:	2101      	moveq	r1, #1
 800410c:	6139      	str	r1, [r7, #16]
 800410e:	b1c4      	cbz	r4, 8004142 <__d2b+0x88>
 8004110:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004114:	4404      	add	r4, r0
 8004116:	6034      	str	r4, [r6, #0]
 8004118:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800411c:	6028      	str	r0, [r5, #0]
 800411e:	4638      	mov	r0, r7
 8004120:	b003      	add	sp, #12
 8004122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412a:	e7d5      	b.n	80040d8 <__d2b+0x1e>
 800412c:	6179      	str	r1, [r7, #20]
 800412e:	e7e7      	b.n	8004100 <__d2b+0x46>
 8004130:	a801      	add	r0, sp, #4
 8004132:	f7ff fddb 	bl	8003cec <__lo0bits>
 8004136:	9b01      	ldr	r3, [sp, #4]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2101      	movs	r1, #1
 800413c:	6139      	str	r1, [r7, #16]
 800413e:	3020      	adds	r0, #32
 8004140:	e7e5      	b.n	800410e <__d2b+0x54>
 8004142:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004146:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800414a:	6030      	str	r0, [r6, #0]
 800414c:	6918      	ldr	r0, [r3, #16]
 800414e:	f7ff fdae 	bl	8003cae <__hi0bits>
 8004152:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004156:	e7e1      	b.n	800411c <__d2b+0x62>

08004158 <_calloc_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	fb02 f401 	mul.w	r4, r2, r1
 800415e:	4621      	mov	r1, r4
 8004160:	f000 f808 	bl	8004174 <_malloc_r>
 8004164:	4605      	mov	r5, r0
 8004166:	b118      	cbz	r0, 8004170 <_calloc_r+0x18>
 8004168:	4622      	mov	r2, r4
 800416a:	2100      	movs	r1, #0
 800416c:	f7fe fb60 	bl	8002830 <memset>
 8004170:	4628      	mov	r0, r5
 8004172:	bd38      	pop	{r3, r4, r5, pc}

08004174 <_malloc_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	1ccd      	adds	r5, r1, #3
 8004178:	f025 0503 	bic.w	r5, r5, #3
 800417c:	3508      	adds	r5, #8
 800417e:	2d0c      	cmp	r5, #12
 8004180:	bf38      	it	cc
 8004182:	250c      	movcc	r5, #12
 8004184:	2d00      	cmp	r5, #0
 8004186:	4606      	mov	r6, r0
 8004188:	db01      	blt.n	800418e <_malloc_r+0x1a>
 800418a:	42a9      	cmp	r1, r5
 800418c:	d903      	bls.n	8004196 <_malloc_r+0x22>
 800418e:	230c      	movs	r3, #12
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	bd70      	pop	{r4, r5, r6, pc}
 8004196:	f000 f869 	bl	800426c <__malloc_lock>
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <_malloc_r+0xac>)
 800419c:	6814      	ldr	r4, [r2, #0]
 800419e:	4621      	mov	r1, r4
 80041a0:	b991      	cbnz	r1, 80041c8 <_malloc_r+0x54>
 80041a2:	4c20      	ldr	r4, [pc, #128]	; (8004224 <_malloc_r+0xb0>)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	b91b      	cbnz	r3, 80041b0 <_malloc_r+0x3c>
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f83d 	bl	8004228 <_sbrk_r>
 80041ae:	6020      	str	r0, [r4, #0]
 80041b0:	4629      	mov	r1, r5
 80041b2:	4630      	mov	r0, r6
 80041b4:	f000 f838 	bl	8004228 <_sbrk_r>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d124      	bne.n	8004206 <_malloc_r+0x92>
 80041bc:	230c      	movs	r3, #12
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	4630      	mov	r0, r6
 80041c2:	f000 f854 	bl	800426e <__malloc_unlock>
 80041c6:	e7e4      	b.n	8004192 <_malloc_r+0x1e>
 80041c8:	680b      	ldr	r3, [r1, #0]
 80041ca:	1b5b      	subs	r3, r3, r5
 80041cc:	d418      	bmi.n	8004200 <_malloc_r+0x8c>
 80041ce:	2b0b      	cmp	r3, #11
 80041d0:	d90f      	bls.n	80041f2 <_malloc_r+0x7e>
 80041d2:	600b      	str	r3, [r1, #0]
 80041d4:	50cd      	str	r5, [r1, r3]
 80041d6:	18cc      	adds	r4, r1, r3
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 f848 	bl	800426e <__malloc_unlock>
 80041de:	f104 000b 	add.w	r0, r4, #11
 80041e2:	1d23      	adds	r3, r4, #4
 80041e4:	f020 0007 	bic.w	r0, r0, #7
 80041e8:	1ac3      	subs	r3, r0, r3
 80041ea:	d0d3      	beq.n	8004194 <_malloc_r+0x20>
 80041ec:	425a      	negs	r2, r3
 80041ee:	50e2      	str	r2, [r4, r3]
 80041f0:	e7d0      	b.n	8004194 <_malloc_r+0x20>
 80041f2:	428c      	cmp	r4, r1
 80041f4:	684b      	ldr	r3, [r1, #4]
 80041f6:	bf16      	itet	ne
 80041f8:	6063      	strne	r3, [r4, #4]
 80041fa:	6013      	streq	r3, [r2, #0]
 80041fc:	460c      	movne	r4, r1
 80041fe:	e7eb      	b.n	80041d8 <_malloc_r+0x64>
 8004200:	460c      	mov	r4, r1
 8004202:	6849      	ldr	r1, [r1, #4]
 8004204:	e7cc      	b.n	80041a0 <_malloc_r+0x2c>
 8004206:	1cc4      	adds	r4, r0, #3
 8004208:	f024 0403 	bic.w	r4, r4, #3
 800420c:	42a0      	cmp	r0, r4
 800420e:	d005      	beq.n	800421c <_malloc_r+0xa8>
 8004210:	1a21      	subs	r1, r4, r0
 8004212:	4630      	mov	r0, r6
 8004214:	f000 f808 	bl	8004228 <_sbrk_r>
 8004218:	3001      	adds	r0, #1
 800421a:	d0cf      	beq.n	80041bc <_malloc_r+0x48>
 800421c:	6025      	str	r5, [r4, #0]
 800421e:	e7db      	b.n	80041d8 <_malloc_r+0x64>
 8004220:	20000220 	.word	0x20000220
 8004224:	20000224 	.word	0x20000224

08004228 <_sbrk_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4c06      	ldr	r4, [pc, #24]	; (8004244 <_sbrk_r+0x1c>)
 800422c:	2300      	movs	r3, #0
 800422e:	4605      	mov	r5, r0
 8004230:	4608      	mov	r0, r1
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	f7fd faa0 	bl	8001778 <_sbrk>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_sbrk_r+0x1a>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	b103      	cbz	r3, 8004242 <_sbrk_r+0x1a>
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	2000022c 	.word	0x2000022c

08004248 <__ascii_mbtowc>:
 8004248:	b082      	sub	sp, #8
 800424a:	b901      	cbnz	r1, 800424e <__ascii_mbtowc+0x6>
 800424c:	a901      	add	r1, sp, #4
 800424e:	b142      	cbz	r2, 8004262 <__ascii_mbtowc+0x1a>
 8004250:	b14b      	cbz	r3, 8004266 <__ascii_mbtowc+0x1e>
 8004252:	7813      	ldrb	r3, [r2, #0]
 8004254:	600b      	str	r3, [r1, #0]
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	1c10      	adds	r0, r2, #0
 800425a:	bf18      	it	ne
 800425c:	2001      	movne	r0, #1
 800425e:	b002      	add	sp, #8
 8004260:	4770      	bx	lr
 8004262:	4610      	mov	r0, r2
 8004264:	e7fb      	b.n	800425e <__ascii_mbtowc+0x16>
 8004266:	f06f 0001 	mvn.w	r0, #1
 800426a:	e7f8      	b.n	800425e <__ascii_mbtowc+0x16>

0800426c <__malloc_lock>:
 800426c:	4770      	bx	lr

0800426e <__malloc_unlock>:
 800426e:	4770      	bx	lr

08004270 <__ascii_wctomb>:
 8004270:	b149      	cbz	r1, 8004286 <__ascii_wctomb+0x16>
 8004272:	2aff      	cmp	r2, #255	; 0xff
 8004274:	bf85      	ittet	hi
 8004276:	238a      	movhi	r3, #138	; 0x8a
 8004278:	6003      	strhi	r3, [r0, #0]
 800427a:	700a      	strbls	r2, [r1, #0]
 800427c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004280:	bf98      	it	ls
 8004282:	2001      	movls	r0, #1
 8004284:	4770      	bx	lr
 8004286:	4608      	mov	r0, r1
 8004288:	4770      	bx	lr
	...

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
