
jajuzniewiemjaktonazywac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f04  08004f04  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f0c  08004f0c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000080  08004f94  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004f94  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc02  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cda  00000000  00000000  0002dcb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002427  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a42e  00000000  00000000  000337bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca9ab  00000000  00000000  0003dbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  00108614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e94 	.word	0x08004e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004e94 	.word	0x08004e94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LCD1602_EnablePulse>:
static uint8_t DisplayControl = 0x0F;
static uint8_t FunctionSet = 0x38;


static void LCD1602_EnablePulse(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <LCD1602_EnablePulse+0x38>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <LCD1602_EnablePulse+0x3c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	f001 fcf2 	bl	8001f68 <HAL_GPIO_WritePin>
	delay(writeTimeConstant);
 8000584:	230a      	movs	r3, #10
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fa3a 	bl	8000a00 <delay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LCD1602_EnablePulse+0x38>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LCD1602_EnablePulse+0x3c>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	f001 fce6 	bl	8001f68 <HAL_GPIO_WritePin>
	delay(60);
 800059c:	203c      	movs	r0, #60	; 0x3c
 800059e:	f000 fa2f 	bl	8000a00 <delay>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	200000a2 	.word	0x200000a2

080005b0 <LCD1602_RS>:


static void LCD1602_RS(bool state)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <LCD1602_RS+0x22>
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <LCD1602_RS+0x3c>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <LCD1602_RS+0x40>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f001 fccc 	bl	8001f68 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 80005d0:	e007      	b.n	80005e2 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LCD1602_RS+0x3c>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LCD1602_RS+0x40>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 fcc3 	bl	8001f68 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000009c 	.word	0x2000009c
 80005f0:	200000a0 	.word	0x200000a0

080005f4 <LCD1602_write>:



static void LCD1602_write(uint8_t byte)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <LCD1602_write+0x1a0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d15a      	bne.n	80006ca <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000614:	4b60      	ldr	r3, [pc, #384]	; (8000798 <LCD1602_write+0x1a4>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	4b60      	ldr	r3, [pc, #384]	; (800079c <LCD1602_write+0x1a8>)
 800061a:	8819      	ldrh	r1, [r3, #0]
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	f001 fc9f 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800062a:	4b5b      	ldr	r3, [pc, #364]	; (8000798 <LCD1602_write+0x1a4>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <LCD1602_write+0x1ac>)
 8000630:	8819      	ldrh	r1, [r3, #0]
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	f001 fc94 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000640:	4b55      	ldr	r3, [pc, #340]	; (8000798 <LCD1602_write+0x1a4>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <LCD1602_write+0x1b0>)
 8000646:	8819      	ldrh	r1, [r3, #0]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f001 fc89 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <LCD1602_write+0x1a4>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <LCD1602_write+0x1b4>)
 800065c:	8819      	ldrh	r1, [r3, #0]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	f001 fc7e 	bl	8001f68 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800066c:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <LCD1602_write+0x1b8>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <LCD1602_write+0x1bc>)
 8000672:	8819      	ldrh	r1, [r3, #0]
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	f001 fc73 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <LCD1602_write+0x1b8>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	4b4b      	ldr	r3, [pc, #300]	; (80007b4 <LCD1602_write+0x1c0>)
 8000688:	8819      	ldrh	r1, [r3, #0]
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	f001 fc68 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <LCD1602_write+0x1b8>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <LCD1602_write+0x1c4>)
 800069e:	8819      	ldrh	r1, [r3, #0]
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	f001 fc5d 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <LCD1602_write+0x1b8>)
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <LCD1602_write+0x1c8>)
 80006b4:	8819      	ldrh	r1, [r3, #0]
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	f001 fc52 	bl	8001f68 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 80006c4:	f7ff ff54 	bl	8000570 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 80006c8:	e05f      	b.n	800078a <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <LCD1602_write+0x1a0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d15b      	bne.n	800078a <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <LCD1602_write+0x1b8>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <LCD1602_write+0x1bc>)
 80006d8:	8819      	ldrh	r1, [r3, #0]
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	f001 fc40 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <LCD1602_write+0x1b8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <LCD1602_write+0x1c0>)
 80006ee:	8819      	ldrh	r1, [r3, #0]
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	f001 fc35 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <LCD1602_write+0x1b8>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <LCD1602_write+0x1c4>)
 8000704:	8819      	ldrh	r1, [r3, #0]
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f001 fc2a 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <LCD1602_write+0x1b8>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <LCD1602_write+0x1c8>)
 800071a:	8819      	ldrh	r1, [r3, #0]
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	f001 fc1f 	bl	8001f68 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800072a:	f7ff ff21 	bl	8000570 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <LCD1602_write+0x1b8>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <LCD1602_write+0x1bc>)
 8000734:	8819      	ldrh	r1, [r3, #0]
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	f001 fc12 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <LCD1602_write+0x1b8>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <LCD1602_write+0x1c0>)
 800074a:	8819      	ldrh	r1, [r3, #0]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f001 fc07 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <LCD1602_write+0x1b8>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <LCD1602_write+0x1c4>)
 8000760:	8819      	ldrh	r1, [r3, #0]
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	f001 fbfc 	bl	8001f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <LCD1602_write+0x1b8>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <LCD1602_write+0x1c8>)
 8000776:	8819      	ldrh	r1, [r3, #0]
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	f001 fbf1 	bl	8001f68 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000786:	f7ff fef3 	bl	8000570 <LCD1602_EnablePulse>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	200000a4 	.word	0x200000a4
 800079c:	200000a8 	.word	0x200000a8
 80007a0:	200000aa 	.word	0x200000aa
 80007a4:	200000ac 	.word	0x200000ac
 80007a8:	200000ae 	.word	0x200000ae
 80007ac:	200000b0 	.word	0x200000b0
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	200000b6 	.word	0x200000b6
 80007b8:	200000b8 	.word	0x200000b8
 80007bc:	200000ba 	.word	0x200000ba

080007c0 <LCD1602_writeCommand>:


static void LCD1602_writeCommand(uint8_t command)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(false);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fef0 	bl	80005b0 <LCD1602_RS>
	LCD1602_write(command);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff0e 	bl	80005f4 <LCD1602_write>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LCD1602_writeData>:


static void LCD1602_writeData(uint8_t data)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(true);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fee0 	bl	80005b0 <LCD1602_RS>
	LCD1602_write(data);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fefe 	bl	80005f4 <LCD1602_write>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <LCD1602_write4bitCommand>:


static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fecc 	bl	80005b0 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <LCD1602_write4bitCommand+0x7c>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <LCD1602_write4bitCommand+0x80>)
 800081e:	8819      	ldrh	r1, [r3, #0]
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	f001 fb9d 	bl	8001f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <LCD1602_write4bitCommand+0x7c>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <LCD1602_write4bitCommand+0x84>)
 8000834:	8819      	ldrh	r1, [r3, #0]
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	f001 fb92 	bl	8001f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <LCD1602_write4bitCommand+0x7c>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <LCD1602_write4bitCommand+0x88>)
 800084a:	8819      	ldrh	r1, [r3, #0]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	f001 fb87 	bl	8001f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <LCD1602_write4bitCommand+0x7c>)
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <LCD1602_write4bitCommand+0x8c>)
 8000860:	8819      	ldrh	r1, [r3, #0]
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	f001 fb7c 	bl	8001f68 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8000870:	f7ff fe7e 	bl	8000570 <LCD1602_EnablePulse>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000b0 	.word	0x200000b0
 8000880:	200000b4 	.word	0x200000b4
 8000884:	200000b6 	.word	0x200000b6
 8000888:	200000b8 	.word	0x200000b8
 800088c:	200000ba 	.word	0x200000ba

08000890 <LCD1602_Begin4BIT>:
	HAL_Delay(2);
}


void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	4613      	mov	r3, r2
 80008a0:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80008a2:	4a26      	ldr	r2, [pc, #152]	; (800093c <LCD1602_Begin4BIT+0xac>)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <LCD1602_Begin4BIT+0xb0>)
 80008aa:	897b      	ldrh	r3, [r7, #10]
 80008ac:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <LCD1602_Begin4BIT+0xb4>)
 80008b0:	893b      	ldrh	r3, [r7, #8]
 80008b2:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <LCD1602_Begin4BIT+0xb8>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <LCD1602_Begin4BIT+0xbc>)
 80008bc:	8b3b      	ldrh	r3, [r7, #24]
 80008be:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 80008c0:	4a23      	ldr	r2, [pc, #140]	; (8000950 <LCD1602_Begin4BIT+0xc0>)
 80008c2:	8bbb      	ldrh	r3, [r7, #28]
 80008c4:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <LCD1602_Begin4BIT+0xc4>)
 80008c8:	8c3b      	ldrh	r3, [r7, #32]
 80008ca:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <LCD1602_Begin4BIT+0xc8>)
 80008ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008d0:	8013      	strh	r3, [r2, #0]
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <LCD1602_Begin4BIT+0xcc>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <LCD1602_Begin4BIT+0xd0>)
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80008de:	2014      	movs	r0, #20
 80008e0:	f001 f85c 	bl	800199c <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff ff8b 	bl	8000800 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f001 f856 	bl	800199c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f7ff ff85 	bl	8000800 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f001 f850 	bl	800199c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f7ff ff7f 	bl	8000800 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f001 f84a 	bl	800199c <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8000908:	2002      	movs	r0, #2
 800090a:	f7ff ff79 	bl	8000800 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f001 f844 	bl	800199c <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000914:	200f      	movs	r0, #15
 8000916:	f7ff ff53 	bl	80007c0 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff ff50 	bl	80007c0 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000920:	2003      	movs	r0, #3
 8000922:	f001 f83b 	bl	800199c <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000926:	2028      	movs	r0, #40	; 0x28
 8000928:	f7ff ff4a 	bl	80007c0 <LCD1602_writeCommand>
	HAL_Delay(3);
 800092c:	2003      	movs	r0, #3
 800092e:	f001 f835 	bl	800199c <HAL_Delay>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000009c 	.word	0x2000009c
 8000940:	200000a0 	.word	0x200000a0
 8000944:	200000a2 	.word	0x200000a2
 8000948:	200000b0 	.word	0x200000b0
 800094c:	200000b4 	.word	0x200000b4
 8000950:	200000b6 	.word	0x200000b6
 8000954:	200000b8 	.word	0x200000b8
 8000958:	200000ba 	.word	0x200000ba
 800095c:	20000000 	.word	0x20000000
 8000960:	20000001 	.word	0x20000001

08000964 <LCD1602_print>:


void LCD1602_print(char string[])
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e009      	b.n	8000986 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff30 	bl	80007e0 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d805      	bhi.n	8000998 <LCD1602_print+0x34>
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1ec      	bne.n	8000972 <LCD1602_print+0xe>
	}
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <LCD1602_setCursor>:


void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d108      	bne.n	80009d4 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009c8:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fef7 	bl	80007c0 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}
 80009d2:	e007      	b.n	80009e4 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80009da:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff feee 	bl	80007c0 <LCD1602_writeCommand>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LCD1602_clear>:
	LCD1602_writeCommand(DisplayControl);
}


void LCD1602_clear(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fee5 	bl	80007c0 <LCD1602_writeCommand>
	HAL_Delay(3);
 80009f6:	2003      	movs	r0, #3
 80009f8:	f000 ffd0 	bl	800199c <HAL_Delay>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <delay>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <delay+0x2c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8000a12:	bf00      	nop
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <delay+0x2c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3f9      	bcc.n	8000a14 <delay+0x14>
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000174 	.word	0x20000174

08000a30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) { //Volume up
 8000a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3e:	4821      	ldr	r0, [pc, #132]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a40:	f001 fa7a 	bl	8001f38 <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10b      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x32>
		++RADIO_volume;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a52:	6013      	str	r3, [r2, #0]
		RDA5807M_setVolume(&hi2c1, RADIO_volume);
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481b      	ldr	r0, [pc, #108]	; (8000acc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a5e:	f000 fd2f 	bl	80014c0 <RDA5807M_setVolume>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) { //Volume down
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a68:	f001 fa66 	bl	8001f38 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d10b      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x5a>
		--RADIO_volume;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a7a:	6013      	str	r3, [r2, #0]
		RDA5807M_setVolume(&hi2c1, RADIO_volume);
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a86:	f000 fd1b 	bl	80014c0 <RDA5807M_setVolume>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) { //Channel down
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a90:	f001 fa52 	bl	8001f38 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d103      	bne.n	8000aa2 <HAL_GPIO_EXTI_Callback+0x72>
		RDA5807M_seek(&hi2c1,0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a9e:	f000 fcd0 	bl	8001442 <RDA5807M_seek>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) { //Channel up
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000aa8:	f001 fa46 	bl	8001f38 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d103      	bne.n	8000aba <HAL_GPIO_EXTI_Callback+0x8a>
		RDA5807M_seek(&hi2c1,1);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ab6:	f000 fcc4 	bl	8001442 <RDA5807M_seek>
	}
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000118 	.word	0x20000118

08000ad0 <convertIntToChar>:
		TEMP_decimalParts = trunc(TEMP_floatDecimalParts*10);
		sprintf(TEMP_charValue, "%d.%d",TEMP_beforeComma,TEMP_decimalParts);
	}
}

void convertIntToChar(uint16_t num){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	sprintf(RADIO_station, "%d", num);
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4904      	ldr	r1, [pc, #16]	; (8000af0 <convertIntToChar+0x20>)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <convertIntToChar+0x24>)
 8000ae2:	f003 fdd1 	bl	8004688 <siprintf>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08004eb4 	.word	0x08004eb4
 8000af4:	20000008 	.word	0x20000008

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fedb 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f85b 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f98d 	bl	8000e24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b0a:	f000 f8c1 	bl	8000c90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b0e:	f000 f8ed 	bl	8000cec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b12:	f000 f939 	bl	8000d88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <main+0xa4>)
 8000b18:	f003 faf3 	bl	8004102 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <main+0xa8>)
 8000b1e:	f003 faf0 	bl	8004102 <HAL_TIM_Base_Start>


  RDA5807M_init(&hi2c1);
 8000b22:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <main+0xac>)
 8000b24:	f000 fb12 	bl	800114c <RDA5807M_init>
  RDA5807M_setFreq(&hi2c1,870);
 8000b28:	f240 3166 	movw	r1, #870	; 0x366
 8000b2c:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <main+0xac>)
 8000b2e:	f000 fd14 	bl	800155a <RDA5807M_setFreq>
  RDA5807M_seek(&hi2c1, 1);
 8000b32:	2101      	movs	r1, #1
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <main+0xac>)
 8000b36:	f000 fc84 	bl	8001442 <RDA5807M_seek>
  RDA5807M_setVolume(&hi2c1,RADIO_volume);
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <main+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <main+0xac>)
 8000b44:	f000 fcbc 	bl	80014c0 <RDA5807M_setVolume>


  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8000b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4c:	9303      	str	r3, [sp, #12]
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <main+0xb4>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	2101      	movs	r1, #1
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <main+0xb8>)
 8000b68:	f7ff fe92 	bl	8000890 <LCD1602_Begin4BIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD1602_clear();
 8000b6c:	f7ff ff3e 	bl	80009ec <LCD1602_clear>
	  LCD1602_setCursor(1,1);
 8000b70:	2101      	movs	r1, #1
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff ff14 	bl	80009a0 <LCD1602_setCursor>
	  LCD1602_print(TEMP_charValue);
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <main+0xbc>)
 8000b7a:	f7ff fef3 	bl	8000964 <LCD1602_print>
	  LCD1602_setCursor(2,1);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff ff0d 	bl	80009a0 <LCD1602_setCursor>
	  convertIntToChar(RDA5807M_getFreq(&hi2c1));
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <main+0xac>)
 8000b88:	f000 fd1f 	bl	80015ca <RDA5807M_getFreq>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff9e 	bl	8000ad0 <convertIntToChar>
	  LCD1602_print(RADIO_station);
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <main+0xc0>)
 8000b96:	f7ff fee5 	bl	8000964 <LCD1602_print>
	  LCD1602_clear();
 8000b9a:	e7e7      	b.n	8000b6c <main+0x74>
 8000b9c:	20000174 	.word	0x20000174
 8000ba0:	200000d8 	.word	0x200000d8
 8000ba4:	20000118 	.word	0x20000118
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	20000008 	.word	0x20000008

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fd54 	bl	8004678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <SystemClock_Config+0xcc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c30:	23a8      	movs	r3, #168	; 0xa8
 8000c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fde5 	bl	8003810 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c4c:	f000 f99c 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f83e 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c7a:	f000 f985 	bl	8000f88 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	; 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <MX_I2C1_Init+0x54>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_I2C1_Init+0x58>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cce:	f001 f97d 	bl	8001fcc <HAL_I2C_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f000 f956 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000118 	.word	0x20000118
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	000186a0 	.word	0x000186a0

08000cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <MX_TIM3_Init+0x98>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d10:	2253      	movs	r2, #83	; 0x53
 8000d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d30:	f003 f9bc 	bl	80040ac <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f925 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d4c:	f003 f9fd 	bl	800414a <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f917 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_TIM3_Init+0x94>)
 8000d68:	f003 fbe0 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d72:	f000 f909 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000174 	.word	0x20000174
 8000d84:	40000400 	.word	0x40000400

08000d88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <MX_TIM4_Init+0x98>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000db0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dba:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000dbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dce:	f003 f96d 	bl	80040ac <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000dd8:	f000 f8d6 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000dea:	f003 f9ae 	bl	800414a <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000df4:	f000 f8c8 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM4_Init+0x94>)
 8000e06:	f003 fb91 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f000 f8ba 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000d8 	.word	0x200000d8
 8000e20:	40000800 	.word	0x40000800

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a4b      	ldr	r2, [pc, #300]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b45      	ldr	r3, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b42      	ldr	r3, [pc, #264]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a3d      	ldr	r2, [pc, #244]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_GPIO_Init+0x14c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2102      	movs	r1, #2
 8000eca:	482a      	ldr	r0, [pc, #168]	; (8000f74 <MX_GPIO_Init+0x150>)
 8000ecc:	f001 f84c 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000ed6:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MX_GPIO_Init+0x154>)
 8000ed8:	f001 f846 	bl	8001f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2103      	movs	r1, #3
 8000ee0:	4826      	ldr	r0, [pc, #152]	; (8000f7c <MX_GPIO_Init+0x158>)
 8000ee2:	f001 f841 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	481d      	ldr	r0, [pc, #116]	; (8000f74 <MX_GPIO_Init+0x150>)
 8000efe:	f000 fe81 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_GPIO_Init+0x15c>)
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	481b      	ldr	r0, [pc, #108]	; (8000f84 <MX_GPIO_Init+0x160>)
 8000f18:	f000 fe74 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000f1c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <MX_GPIO_Init+0x154>)
 8000f36:	f000 fe65 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_GPIO_Init+0x158>)
 8000f52:	f000 fe57 	bl	8001c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f000 fe1b 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f000 fe34 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	10110000 	.word	0x10110000
 8000f84:	40020400 	.word	0x40020400

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <__NVIC_SystemReset+0x20>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa8:	4903      	ldr	r1, [pc, #12]	; (8000fb8 <__NVIC_SystemReset+0x20>)
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_SystemReset+0x24>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60cb      	str	r3, [r1, #12]
 8000fb0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <__NVIC_SystemReset+0x1c>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0004 	.word	0x05fa0004

08000fc0 <RDA5807M_revertBytes>:
#include "rda5807m.h"

uint8_t buf1[64];
uint8_t buf2[64];

void RDA5807M_revertBytes(uint8_t *buf, uint8_t cnt){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	while(cnt > 1){
 8000fcc:	e010      	b.n	8000ff0 <RDA5807M_revertBytes+0x30>
		tmp = *(buf + 1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	73fb      	strb	r3, [r7, #15]
		*(buf + 1) = *buf;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	701a      	strb	r2, [r3, #0]
		*buf = tmp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	701a      	strb	r2, [r3, #0]
		buf += 2;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	607b      	str	r3, [r7, #4]
		cnt -= 2;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	70fb      	strb	r3, [r7, #3]
	while(cnt > 1){
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d8eb      	bhi.n	8000fce <RDA5807M_revertBytes+0xe>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <RDA5807M_write>:

void RDA5807M_write(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af04      	add	r7, sp, #16
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	461a      	mov	r2, r3
 8001010:	460b      	mov	r3, r1
 8001012:	72fb      	strb	r3, [r7, #11]
 8001014:	4613      	mov	r3, r2
 8001016:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffcd 	bl	8000fc0 <RDA5807M_revertBytes>

	ret = HAL_I2C_Mem_Write(I2Cx, RDA5807M_Rand_Address << 1u, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b299      	uxth	r1, r3
 800102a:	7abb      	ldrb	r3, [r7, #10]
 800102c:	b29b      	uxth	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	460a      	mov	r2, r1
 8001042:	2122      	movs	r1, #34	; 0x22
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f001 fc1d 	bl	8002884 <HAL_I2C_Mem_Write>
 800104a:	4603      	mov	r3, r0
 800104c:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <RDA5807M_write+0x5c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <RDA5807M_write+0x74>)
 800105c:	f000 ff84 	bl	8001f68 <HAL_GPIO_WritePin>
		}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffa9 	bl	8000fc0 <RDA5807M_revertBytes>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020c00 	.word	0x40020c00

0800107c <RDA5807M_writeRegister>:

void RDA5807M_writeRegister(I2C_HandleTypeDef *I2Cx, uint16_t *buf, uint8_t RegNum){
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f7ff ff94 	bl	8000fc0 <RDA5807M_revertBytes>
	ret = HAL_I2C_Master_Transmit(I2Cx, (uint16_t) RDA5807M_Seq_Address << 1, (uint8_t *) buf, RegNum << 1, 1000);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	b29b      	uxth	r3, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4613      	mov	r3, r2
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	2120      	movs	r1, #32
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f001 f8c5 	bl	800223c <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <RDA5807M_writeRegister+0x4c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <RDA5807M_writeRegister+0x64>)
 80010c4:	f000 ff50 	bl	8001f68 <HAL_GPIO_WritePin>
	}
	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f7ff ff75 	bl	8000fc0 <RDA5807M_revertBytes>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <RDA5807M_read>:

void RDA5807M_read(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	461a      	mov	r2, r3
 80010f0:	460b      	mov	r3, r1
 80010f2:	72fb      	strb	r3, [r7, #11]
 80010f4:	4613      	mov	r3, r2
 80010f6:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	b299      	uxth	r1, r3
 80010fc:	7abb      	ldrb	r3, [r7, #10]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b29b      	uxth	r3, r3
 8001104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	460a      	mov	r2, r1
 8001114:	2122      	movs	r1, #34	; 0x22
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f001 fcae 	bl	8002a78 <HAL_I2C_Mem_Read>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]

	if(ret != HAL_OK){
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <RDA5807M_read+0x4e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <RDA5807M_read+0x64>)
 800112e:	f000 ff1b 	bl	8001f68 <HAL_GPIO_WritePin>
	}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff40 	bl	8000fc0 <RDA5807M_revertBytes>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020c00 	.word	0x40020c00

0800114c <RDA5807M_init>:

void RDA5807M_init(I2C_HandleTypeDef *I2Cx){
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {0, 0};
 8001154:	2300      	movs	r3, #0
 8001156:	723b      	strb	r3, [r7, #8]
 8001158:	2300      	movs	r3, #0
 800115a:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef ret;

	//TODO: czy to konieczne
	//nie wiem
	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, 1000);
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2302      	movs	r3, #2
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2200      	movs	r2, #0
 8001170:	2122      	movs	r1, #34	; 0x22
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 fc80 	bl	8002a78 <HAL_I2C_Mem_Read>
 8001178:	4603      	mov	r3, r0
 800117a:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <RDA5807M_init+0x3c>
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	2b58      	cmp	r3, #88	; 0x58
 8001186:	d005      	beq.n	8001194 <RDA5807M_init+0x48>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	483d      	ldr	r0, [pc, #244]	; (8001284 <RDA5807M_init+0x138>)
 8001190:	f000 feea 	bl	8001f68 <HAL_GPIO_WritePin>
	}

	//TODO: czy to konieczne, byc moze wystarczy tylko raz sprawdzac
	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2200      	movs	r2, #0
 80011a8:	2122      	movs	r1, #34	; 0x22
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f001 fc64 	bl	8002a78 <HAL_I2C_Mem_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <RDA5807M_init+0x74>
 80011ba:	7a3b      	ldrb	r3, [r7, #8]
 80011bc:	2b58      	cmp	r3, #88	; 0x58
 80011be:	d007      	beq.n	80011d0 <RDA5807M_init+0x84>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c6:	482f      	ldr	r0, [pc, #188]	; (8001284 <RDA5807M_init+0x138>)
 80011c8:	f000 fece 	bl	8001f68 <HAL_GPIO_WritePin>


		NVIC_SystemReset(); //jak się nagle rozpimpasi całe te, to przez te linijke
 80011cc:	f7ff fee4 	bl	8000f98 <__NVIC_SystemReset>

	}

	for(int i = 0; i < 64; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e00c      	b.n	80011f0 <RDA5807M_init+0xa4>
		buf1[i] = 0;
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <RDA5807M_init+0x13c>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
		buf2[i] = 0;
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <RDA5807M_init+0x140>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 64; i++){
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b3f      	cmp	r3, #63	; 0x3f
 80011f4:	ddef      	ble.n	80011d6 <RDA5807M_init+0x8a>
	}

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf2, 64, 1000);
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2340      	movs	r3, #64	; 0x40
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <RDA5807M_init+0x140>)
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	2200      	movs	r2, #0
 8001208:	2122      	movs	r1, #34	; 0x22
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 fc34 	bl	8002a78 <HAL_I2C_Mem_Read>
 8001210:	4603      	mov	r3, r0
 8001212:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <RDA5807M_init+0xd4>
 800121a:	7a3b      	ldrb	r3, [r7, #8]
 800121c:	2b58      	cmp	r3, #88	; 0x58
 800121e:	d005      	beq.n	800122c <RDA5807M_init+0xe0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <RDA5807M_init+0x138>)
 8001228:	f000 fe9e 	bl	8001f68 <HAL_GPIO_WritePin>
	}
	ret = HAL_I2C_Master_Receive(I2Cx, RDA5807M_Seq_Address << 1, buf1, 64, 1000);
 800122c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <RDA5807M_init+0x13c>)
 8001236:	2120      	movs	r1, #32
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 f8fd 	bl	8002438 <HAL_I2C_Master_Receive>
 800123e:	4603      	mov	r3, r0
 8001240:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <RDA5807M_init+0x102>
 8001248:	7a3b      	ldrb	r3, [r7, #8]
 800124a:	2b58      	cmp	r3, #88	; 0x58
 800124c:	d005      	beq.n	800125a <RDA5807M_init+0x10e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <RDA5807M_init+0x138>)
 8001256:	f000 fe87 	bl	8001f68 <HAL_GPIO_WritePin>
	}


	RDA5807M_softReset(I2Cx);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f818 	bl	8001290 <RDA5807M_softReset>
	RDA5807M_resetSettings(I2Cx);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f83b 	bl	80012dc <RDA5807M_resetSettings>

	RDA5807M_seek(I2Cx, 1);
 8001266:	2101      	movs	r1, #1
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8ea 	bl	8001442 <RDA5807M_seek>
	while(RDA5807M_get_SeekReadyFlag(I2Cx));
 800126e:	bf00      	nop
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f912 	bl	800149a <RDA5807M_get_SeekReadyFlag>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f9      	bne.n	8001270 <RDA5807M_init+0x124>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020c00 	.word	0x40020c00
 8001288:	200001c0 	.word	0x200001c0
 800128c:	20000200 	.word	0x20000200

08001290 <RDA5807M_softReset>:

void RDA5807M_softReset(I2C_HandleTypeDef *I2Cx){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	Reg02h r02;
	r02.Enable = 1;
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 1;
 80012a0:	7b3b      	ldrb	r3, [r7, #12]
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	2301      	movs	r3, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fea7 	bl	8001004 <RDA5807M_write>
	r02.Enable = 1;
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 0;
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	f36f 0341 	bfc	r3, #1, #1
 80012c4:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	2301      	movs	r3, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fe98 	bl	8001004 <RDA5807M_write>

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <RDA5807M_resetSettings>:

void RDA5807M_resetSettings(I2C_HandleTypeDef *I2Cx){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	        Reg05h r05;
	        Reg06h r06;
	        Reg07h r07;
	    } buf;

	buf.r02.Enable 					= 1;
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	733b      	strb	r3, [r7, #12]
	buf.r02.Soft_Reset 				= 0;
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	f36f 0341 	bfc	r3, #1, #1
 80012f2:	733b      	strb	r3, [r7, #12]
	buf.r02.New_Demodulate 			= 1;
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	733b      	strb	r3, [r7, #12]
	buf.r02.RDS_Enable 				= 1;
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	733b      	strb	r3, [r7, #12]
	buf.r02.CLK_Mode 				= 0;
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	f36f 1306 	bfc	r3, #4, #3
 800130a:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek_Mode				= 0;
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	f36f 13c7 	bfc	r3, #7, #1
 8001312:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek					= 0;
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	f36f 0300 	bfc	r3, #0, #1
 800131a:	737b      	strb	r3, [r7, #13]
	buf.r02.Seek_Up					= 1;
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Dir_In_Mode		= 0;
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	f36f 0382 	bfc	r3, #2, #1
 800132a:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Non_Calib			= 0;
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	f36f 03c3 	bfc	r3, #3, #1
 8001332:	737b      	strb	r3, [r7, #13]
	buf.r02.Bass					= 0;
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	f36f 1304 	bfc	r3, #4, #1
 800133a:	737b      	strb	r3, [r7, #13]
	buf.r02.Mono					= 0;
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	f36f 1345 	bfc	r3, #5, #1
 8001342:	737b      	strb	r3, [r7, #13]
	buf.r02.Demute					= 1;
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	737b      	strb	r3, [r7, #13]
	buf.r02.DHIZ					= 1;
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001352:	737b      	strb	r3, [r7, #13]

	buf.r03.Space					= 0;
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	f36f 0301 	bfc	r3, #0, #2
 800135a:	73bb      	strb	r3, [r7, #14]
	buf.r03.Band					= 0;
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	f36f 0383 	bfc	r3, #2, #2
 8001362:	73bb      	strb	r3, [r7, #14]
	buf.r03.Tune					= 1;
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	73bb      	strb	r3, [r7, #14]
	buf.r03.Direct_Mode				= 0;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	f36f 1345 	bfc	r3, #5, #1
 8001372:	73bb      	strb	r3, [r7, #14]
	buf.r03.Channel_Select			= 0;
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	f36f 138f 	bfc	r3, #6, #10
 800137a:	81fb      	strh	r3, [r7, #14]

	buf.r04.Reserved				= 0;
 800137c:	2300      	movs	r3, #0
 800137e:	743b      	strb	r3, [r7, #16]
	buf.r04.AFCD					= 0;
 8001380:	7c7b      	ldrb	r3, [r7, #17]
 8001382:	f36f 0300 	bfc	r3, #0, #1
 8001386:	747b      	strb	r3, [r7, #17]
	buf.r04.Soft_Mute				= 1;
 8001388:	7c7b      	ldrb	r3, [r7, #17]
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved2				= 0;
 8001390:	7c7b      	ldrb	r3, [r7, #17]
 8001392:	f36f 0382 	bfc	r3, #2, #1
 8001396:	747b      	strb	r3, [r7, #17]
	buf.r04.De_emphasis				= 0;
 8001398:	7c7b      	ldrb	r3, [r7, #17]
 800139a:	f36f 03c3 	bfc	r3, #3, #1
 800139e:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved3				= 0;
 80013a0:	7c7b      	ldrb	r3, [r7, #17]
 80013a2:	f36f 1307 	bfc	r3, #4, #4
 80013a6:	747b      	strb	r3, [r7, #17]

	buf.r05.Volume					= 0;
 80013a8:	7cbb      	ldrb	r3, [r7, #18]
 80013aa:	f36f 0303 	bfc	r3, #0, #4
 80013ae:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved				= 0;
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	f36f 1305 	bfc	r3, #4, #2
 80013b6:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved2				= 3;
 80013b8:	7cbb      	ldrb	r3, [r7, #18]
 80013ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013be:	74bb      	strb	r3, [r7, #18]
	buf.r05.Seek_thresh				= 8;
 80013c0:	7cfb      	ldrb	r3, [r7, #19]
 80013c2:	2208      	movs	r2, #8
 80013c4:	f362 0303 	bfi	r3, r2, #0, #4
 80013c8:	74fb      	strb	r3, [r7, #19]
	buf.r05.Reserved3				= 0;
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	f36f 1306 	bfc	r3, #4, #3
 80013d0:	74fb      	strb	r3, [r7, #19]
	buf.r05.INT_Mode				= 1;
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	74fb      	strb	r3, [r7, #19]

	buf.r06.Reserved				= 0;
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	f36f 030c 	bfc	r3, #0, #13
 80013e0:	82bb      	strh	r3, [r7, #20]
	buf.r06.Open_mode				= 0;
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	f36f 1346 	bfc	r3, #5, #2
 80013e8:	757b      	strb	r3, [r7, #21]
	buf.r06.Reserved2				= 0;
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	f36f 13c7 	bfc	r3, #7, #1
 80013f0:	757b      	strb	r3, [r7, #21]

	buf.r07.Freq_Mode				= 0;
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	f36f 0300 	bfc	r3, #0, #1
 80013f8:	75bb      	strb	r3, [r7, #22]
	buf.r07.Soft_Blend_enable		= 1;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f362 0386 	bfi	r3, r2, #2, #5
 8001402:	75fb      	strb	r3, [r7, #23]
	buf.r07.Seek_thresh				= 0;
 8001404:	7dbb      	ldrb	r3, [r7, #22]
 8001406:	f36f 0387 	bfc	r3, #2, #6
 800140a:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved				= 0;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	f36f 0300 	bfc	r3, #0, #1
 8001412:	75fb      	strb	r3, [r7, #23]
	buf.r07.Mode_65M_50M			= 1;
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	75fb      	strb	r3, [r7, #23]
	buf.r07.Soft_Blend_thresh		= 16;
 800141c:	7dbb      	ldrb	r3, [r7, #22]
 800141e:	f36f 0341 	bfc	r3, #1, #1
 8001422:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved2				= 0;
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	f36f 13c7 	bfc	r3, #7, #1
 800142a:	75fb      	strb	r3, [r7, #23]

	RDA5807M_writeRegister(I2Cx, (uint16_t *) &buf.r02, 6);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2206      	movs	r2, #6
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fe21 	bl	800107c <RDA5807M_writeRegister>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <RDA5807M_seek>:

void RDA5807M_seek(I2C_HandleTypeDef *I2Cx, uint8_t direction){
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;

	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	2301      	movs	r3, #1
 8001454:	2102      	movs	r1, #2
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fe44 	bl	80010e4 <RDA5807M_read>

	r02.Seek_Mode	= 1;
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001462:	733b      	strb	r3, [r7, #12]
	r02.Seek		= 1;
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	737b      	strb	r3, [r7, #13]
	if(direction){
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <RDA5807M_seek+0x3a>
		r02.Seek_Up	= 1;
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	737b      	strb	r3, [r7, #13]
 800147a:	e003      	b.n	8001484 <RDA5807M_seek+0x42>
	}else{
		r02.Seek_Up	= 0;
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	f36f 0341 	bfc	r3, #1, #1
 8001482:	737b      	strb	r3, [r7, #13]
	}

	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	2301      	movs	r3, #1
 800148a:	2102      	movs	r1, #2
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdb9 	bl	8001004 <RDA5807M_write>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <RDA5807M_get_SeekReadyFlag>:

uint8_t RDA5807M_get_SeekReadyFlag(I2C_HandleTypeDef *I2Cx){
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	2301      	movs	r3, #1
 80014a8:	210a      	movs	r1, #10
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fe1a 	bl	80010e4 <RDA5807M_read>

	return r0A.Seek_Tune_Complete;
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <RDA5807M_setVolume>:

void RDA5807M_setVolume(I2C_HandleTypeDef *I2Cx, uint8_t value){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;
	Reg05h r05;
	uint8_t mute;

	if(value) mute = 0;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <RDA5807M_setVolume+0x18>
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e001      	b.n	80014dc <RDA5807M_setVolume+0x1c>
	else mute = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]

	if(value > 16) value = 16;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d901      	bls.n	80014e6 <RDA5807M_setVolume+0x26>
 80014e2:	2310      	movs	r3, #16
 80014e4:	70fb      	strb	r3, [r7, #3]

	value--;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	70fb      	strb	r3, [r7, #3]

	if(!mute){
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <RDA5807M_setVolume+0x5e>
		RDA5807M_read(I2Cx, 0x05, (uint16_t *) &r05, 1);
 80014f2:	f107 0208 	add.w	r2, r7, #8
 80014f6:	2301      	movs	r3, #1
 80014f8:	2105      	movs	r1, #5
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fdf2 	bl	80010e4 <RDA5807M_read>
		r05.Volume = value;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	f362 0303 	bfi	r3, r2, #0, #4
 800150e:	723b      	strb	r3, [r7, #8]
		RDA5807M_write(I2Cx, 0x05, (uint16_t *) &r05, 1);
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	2301      	movs	r3, #1
 8001516:	2105      	movs	r1, #5
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fd73 	bl	8001004 <RDA5807M_write>
	}

	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	2301      	movs	r3, #1
 8001524:	2102      	movs	r1, #2
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fddc 	bl	80010e4 <RDA5807M_read>
	if(mute) r02.Demute = 0;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <RDA5807M_setVolume+0x7c>
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	f36f 1386 	bfc	r3, #6, #1
 8001538:	737b      	strb	r3, [r7, #13]
 800153a:	e003      	b.n	8001544 <RDA5807M_setVolume+0x84>
	else r02.Demute = 1;
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001542:	737b      	strb	r3, [r7, #13]
	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	2301      	movs	r3, #1
 800154a:	2102      	movs	r1, #2
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fd59 	bl	8001004 <RDA5807M_write>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <RDA5807M_setFreq>:

void RDA5807M_setFreq(I2C_HandleTypeDef *I2Cx, uint16_t freq){
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
	Reg03h r03;

	if(freq < 870) freq = 870;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	f240 3265 	movw	r2, #869	; 0x365
 800156c:	4293      	cmp	r3, r2
 800156e:	d803      	bhi.n	8001578 <RDA5807M_setFreq+0x1e>
 8001570:	f240 3366 	movw	r3, #870	; 0x366
 8001574:	807b      	strh	r3, [r7, #2]
 8001576:	e006      	b.n	8001586 <RDA5807M_setFreq+0x2c>
	else if(freq > 1080) freq = 1080;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 800157e:	d902      	bls.n	8001586 <RDA5807M_setFreq+0x2c>
 8001580:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001584:	807b      	strh	r3, [r7, #2]

	freq -= 870;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 800158c:	807b      	strh	r3, [r7, #2]

	RDA5807M_read(I2Cx, 0x03, (uint16_t *) &r03, 1);
 800158e:	f107 020c 	add.w	r2, r7, #12
 8001592:	2301      	movs	r3, #1
 8001594:	2103      	movs	r1, #3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fda4 	bl	80010e4 <RDA5807M_read>
	r03.Channel_Select = freq;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	89bb      	ldrh	r3, [r7, #12]
 80015a6:	f362 138f 	bfi	r3, r2, #6, #10
 80015aa:	81bb      	strh	r3, [r7, #12]
	r03.Tune = 1;
 80015ac:	7b3b      	ldrb	r3, [r7, #12]
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x03, (uint16_t *) &r03, 1);
 80015b4:	f107 020c 	add.w	r2, r7, #12
 80015b8:	2301      	movs	r3, #1
 80015ba:	2103      	movs	r1, #3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fd21 	bl	8001004 <RDA5807M_write>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <RDA5807M_getFreq>:

uint16_t RDA5807M_getFreq(I2C_HandleTypeDef *I2Cx){
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;
	uint16_t freq;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	2301      	movs	r3, #1
 80015d8:	210a      	movs	r1, #10
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd82 	bl	80010e4 <RDA5807M_read>
	freq = r0A.Read_channel;
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	81fb      	strh	r3, [r7, #14]

	if(freq == 319) return 0;
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	f240 123f 	movw	r2, #319	; 0x13f
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <RDA5807M_getFreq+0x2e>
 80015f4:	2300      	movs	r3, #0
 80015f6:	e004      	b.n	8001602 <RDA5807M_getFreq+0x38>

	freq += 870;
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	f203 3366 	addw	r3, r3, #870	; 0x366
 80015fe:	81fb      	strh	r3, [r7, #14]

	return freq;
 8001600:	89fb      	ldrh	r3, [r7, #14]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_I2C_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_I2C_MspInit+0x8c>)
 80016b6:	f000 faa5 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400

080016ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_TIM_Base_MspInit+0x64>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800171a:	e012      	b.n	8001742 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10d      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40000400 	.word	0x40000400
 8001754:	40023800 	.word	0x40023800
 8001758:	40000800 	.word	0x40000800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 f8d4 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80017bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017c0:	f000 fbec 	bl	8001f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017c8:	f000 fbe8 	bl	8001f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017d0:	f000 fbe4 	bl	8001f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017d8:	f000 fbe0 	bl	8001f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_sbrk>:
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x50>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x16>
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <_sbrk+0x50>)
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <_sbrk+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <_sbrk+0x50>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <_sbrk+0x50>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	466a      	mov	r2, sp
 8001806:	4293      	cmp	r3, r2
 8001808:	d907      	bls.n	800181a <_sbrk+0x3a>
 800180a:	f002 ff0b 	bl	8004624 <__errno>
 800180e:	4602      	mov	r2, r0
 8001810:	230c      	movs	r3, #12
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001818:	e006      	b.n	8001828 <_sbrk+0x48>
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <_sbrk+0x50>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <_sbrk+0x50>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200000bc 	.word	0x200000bc
 8001834:	20000248 	.word	0x20000248

08001838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SystemInit+0x28>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <SystemInit+0x28>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SystemInit+0x28>)
 800184e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001852:	609a      	str	r2, [r3, #8]
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0x14>
 8001868:	2100      	movs	r1, #0
 800186a:	e003      	b.n	8001874 <LoopCopyDataInit>

0800186c <CopyDataInit>:
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <LoopFillZerobss+0x18>)
 800186e:	585b      	ldr	r3, [r3, r1]
 8001870:	5043      	str	r3, [r0, r1]
 8001872:	3104      	adds	r1, #4

08001874 <LoopCopyDataInit>:
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <LoopFillZerobss+0x1c>)
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <LoopFillZerobss+0x20>)
 8001878:	1842      	adds	r2, r0, r1
 800187a:	429a      	cmp	r2, r3
 800187c:	d3f6      	bcc.n	800186c <CopyDataInit>
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <LoopFillZerobss+0x24>)
 8001880:	e002      	b.n	8001888 <LoopFillZerobss>

08001882 <FillZerobss>:
 8001882:	2300      	movs	r3, #0
 8001884:	f842 3b04 	str.w	r3, [r2], #4

08001888 <LoopFillZerobss>:
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <LoopFillZerobss+0x28>)
 800188a:	429a      	cmp	r2, r3
 800188c:	d3f9      	bcc.n	8001882 <FillZerobss>
 800188e:	f7ff ffd3 	bl	8001838 <SystemInit>
 8001892:	f002 fecd 	bl	8004630 <__libc_init_array>
 8001896:	f7ff f92f 	bl	8000af8 <main>
 800189a:	4770      	bx	lr
 800189c:	20020000 	.word	0x20020000
 80018a0:	08004f14 	.word	0x08004f14
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000080 	.word	0x20000080
 80018ac:	20000080 	.word	0x20000080
 80018b0:	20000248 	.word	0x20000248

080018b4 <ADC_IRQHandler>:
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f94d 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fe8e 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f965 	bl	8001bea <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001938:	f000 f92d 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000010 	.word	0x20000010
 8001954:	20000018 	.word	0x20000018
 8001958:	20000014 	.word	0x20000014

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000018 	.word	0x20000018
 8001980:	20000240 	.word	0x20000240

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000240 	.word	0x20000240

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_Delay+0x40>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000018 	.word	0x20000018

080019e0 <__NVIC_SetPriorityGrouping>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e16b      	b.n	8001ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 815a 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00b      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c52:	2b11      	cmp	r3, #17
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0xfc>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b12      	cmp	r3, #18
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80b4 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a5e      	ldr	r2, [pc, #376]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b5c      	ldr	r3, [pc, #368]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00e      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4934      	ldr	r1, [pc, #208]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f ae90 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fd38 	bl	8000a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e11f      	b.n	800221e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fb32 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	; 0x24
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800202e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002030:	f002 f828 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8002034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <HAL_I2C_Init+0x25c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d807      	bhi.n	8002050 <HAL_I2C_Init+0x84>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a7a      	ldr	r2, [pc, #488]	; (800222c <HAL_I2C_Init+0x260>)
 8002044:	4293      	cmp	r3, r2
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e006      	b.n	800205e <HAL_I2C_Init+0x92>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_I2C_Init+0x264>)
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0db      	b.n	800221e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a72      	ldr	r2, [pc, #456]	; (8002234 <HAL_I2C_Init+0x268>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9b      	lsrs	r3, r3, #18
 8002070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a64      	ldr	r2, [pc, #400]	; (8002228 <HAL_I2C_Init+0x25c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d802      	bhi.n	80020a0 <HAL_I2C_Init+0xd4>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3301      	adds	r3, #1
 800209e:	e009      	b.n	80020b4 <HAL_I2C_Init+0xe8>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a63      	ldr	r2, [pc, #396]	; (8002238 <HAL_I2C_Init+0x26c>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	3301      	adds	r3, #1
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4956      	ldr	r1, [pc, #344]	; (8002228 <HAL_I2C_Init+0x25c>)
 80020d0:	428b      	cmp	r3, r1
 80020d2:	d80d      	bhi.n	80020f0 <HAL_I2C_Init+0x124>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e59      	subs	r1, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	bf38      	it	cc
 80020ec:	2304      	movcc	r3, #4
 80020ee:	e04f      	b.n	8002190 <HAL_I2C_Init+0x1c4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d111      	bne.n	800211c <HAL_I2C_Init+0x150>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e012      	b.n	8002142 <HAL_I2C_Init+0x176>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	0099      	lsls	r1, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Init+0x17e>
 8002146:	2301      	movs	r3, #1
 8002148:	e022      	b.n	8002190 <HAL_I2C_Init+0x1c4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10e      	bne.n	8002170 <HAL_I2C_Init+0x1a4>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e58      	subs	r0, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	fbb0 f3f3 	udiv	r3, r0, r3
 8002164:	3301      	adds	r3, #1
 8002166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216e:	e00f      	b.n	8002190 <HAL_I2C_Init+0x1c4>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	0099      	lsls	r1, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	6809      	ldr	r1, [r1, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6911      	ldr	r1, [r2, #16]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	000186a0 	.word	0x000186a0
 800222c:	001e847f 	.word	0x001e847f
 8002230:	003d08ff 	.word	0x003d08ff
 8002234:	431bde83 	.word	0x431bde83
 8002238:	10624dd3 	.word	0x10624dd3

0800223c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	461a      	mov	r2, r3
 8002248:	460b      	mov	r3, r1
 800224a:	817b      	strh	r3, [r7, #10]
 800224c:	4613      	mov	r3, r2
 800224e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fb98 	bl	8001984 <HAL_GetTick>
 8002254:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	f040 80e0 	bne.w	8002424 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	4970      	ldr	r1, [pc, #448]	; (8002430 <HAL_I2C_Master_Transmit+0x1f4>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f001 f8f0 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	e0d3      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2C_Master_Transmit+0x50>
 8002288:	2302      	movs	r3, #2
 800228a:	e0cc      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d007      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2221      	movs	r2, #33	; 0x21
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2210      	movs	r2, #16
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	893a      	ldrh	r2, [r7, #8]
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a50      	ldr	r2, [pc, #320]	; (8002434 <HAL_I2C_Master_Transmit+0x1f8>)
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fde2 	bl	8002ec4 <I2C_MasterRequestWrite>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e08d      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002320:	e066      	b.n	80023f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f001 f96a 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d107      	bne.n	800234a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06b      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b04      	cmp	r3, #4
 800238a:	d11b      	bne.n	80023c4 <HAL_I2C_Master_Transmit+0x188>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d017      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	6a39      	ldr	r1, [r7, #32]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f001 f95a 	bl	8003682 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e01a      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d194      	bne.n	8002322 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	00100002 	.word	0x00100002
 8002434:	ffff0000 	.word	0xffff0000

08002438 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	460b      	mov	r3, r1
 8002446:	817b      	strh	r3, [r7, #10]
 8002448:	4613      	mov	r3, r2
 800244a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff fa9a 	bl	8001984 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	f040 820b 	bne.w	8002876 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	497c      	ldr	r1, [pc, #496]	; (800265c <HAL_I2C_Master_Receive+0x224>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fff2 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	e1fe      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2C_Master_Receive+0x50>
 8002484:	2302      	movs	r3, #2
 8002486:	e1f7      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d007      	beq.n	80024ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2222      	movs	r2, #34	; 0x22
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2210      	movs	r2, #16
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a5c      	ldr	r2, [pc, #368]	; (8002660 <HAL_I2C_Master_Receive+0x228>)
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fd66 	bl	8002fc8 <I2C_MasterRequestRead>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1b8      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d113      	bne.n	8002536 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e18c      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b01      	cmp	r3, #1
 800253c:	d11b      	bne.n	8002576 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e16c      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b02      	cmp	r3, #2
 800257c:	d11b      	bne.n	80025b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	e14c      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025dc:	e138      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f200 80f1 	bhi.w	80027ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d123      	bne.n	8002638 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f001 f885 	bl	8003704 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e139      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002636:	e10b      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b02      	cmp	r3, #2
 800263e:	d14e      	bne.n	80026de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	2200      	movs	r2, #0
 8002648:	4906      	ldr	r1, [pc, #24]	; (8002664 <HAL_I2C_Master_Receive+0x22c>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 ff02 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e10e      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
 800265a:	bf00      	nop
 800265c:	00100002 	.word	0x00100002
 8002660:	ffff0000 	.word	0xffff0000
 8002664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026dc:	e0b8      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	2200      	movs	r2, #0
 80026e6:	4966      	ldr	r1, [pc, #408]	; (8002880 <HAL_I2C_Master_Receive+0x448>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 feb3 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0bf      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	494f      	ldr	r1, [pc, #316]	; (8002880 <HAL_I2C_Master_Receive+0x448>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fe85 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e091      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c8:	e042      	b.n	8002850 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 ff98 	bl	8003704 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e04c      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d118      	bne.n	8002850 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f aec2 	bne.w	80025de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	00010004 	.word	0x00010004

08002884 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289e:	f7ff f871 	bl	8001984 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	f040 80d9 	bne.w	8002a64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	496d      	ldr	r1, [pc, #436]	; (8002a70 <HAL_I2C_Mem_Write+0x1ec>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fdc9 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0cc      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Write+0x56>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0c5      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2221      	movs	r2, #33	; 0x21
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_I2C_Mem_Write+0x1f0>)
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002942:	88f8      	ldrh	r0, [r7, #6]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4603      	mov	r3, r0
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fc04 	bl	8003160 <I2C_RequestMemoryWrite>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d052      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e081      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fe4a 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b04      	cmp	r3, #4
 8002978:	d107      	bne.n	800298a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_I2C_Mem_Write+0x180>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d017      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1aa      	bne.n	8002962 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fe36 	bl	8003682 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e016      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a92:	f7fe ff77 	bl	8001984 <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	f040 8208 	bne.w	8002eb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2319      	movs	r3, #25
 8002aac:	2201      	movs	r2, #1
 8002aae:	497b      	ldr	r1, [pc, #492]	; (8002c9c <HAL_I2C_Mem_Read+0x224>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fccf 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e1fb      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Mem_Read+0x56>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e1f4      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2222      	movs	r2, #34	; 0x22
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2240      	movs	r2, #64	; 0x40
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a5b      	ldr	r2, [pc, #364]	; (8002ca0 <HAL_I2C_Mem_Read+0x228>)
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b36:	88f8      	ldrh	r0, [r7, #6]
 8002b38:	893a      	ldrh	r2, [r7, #8]
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4603      	mov	r3, r0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fb9e 	bl	8003288 <I2C_RequestMemoryRead>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1b0      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d113      	bne.n	8002b86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e184      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e164      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d11b      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	e144      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c1c:	e138      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	f200 80f1 	bhi.w	8002e0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d123      	bne.n	8002c78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fd65 	bl	8003704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e139      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c76:	e10b      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d14e      	bne.n	8002d1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	2200      	movs	r2, #0
 8002c88:	4906      	ldr	r1, [pc, #24]	; (8002ca4 <HAL_I2C_Mem_Read+0x22c>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fbe2 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e10e      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
 8002c9a:	bf00      	nop
 8002c9c:	00100002 	.word	0x00100002
 8002ca0:	ffff0000 	.word	0xffff0000
 8002ca4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d1c:	e0b8      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2200      	movs	r2, #0
 8002d26:	4966      	ldr	r1, [pc, #408]	; (8002ec0 <HAL_I2C_Mem_Read+0x448>)
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fb93 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0bf      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	2200      	movs	r2, #0
 8002d82:	494f      	ldr	r1, [pc, #316]	; (8002ec0 <HAL_I2C_Mem_Read+0x448>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb65 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e091      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e08:	e042      	b.n	8002e90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fc78 	bl	8003704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e04c      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d118      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f aec2 	bne.w	8002c1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	00010004 	.word	0x00010004

08002ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d006      	beq.n	8002eee <I2C_MasterRequestWrite+0x2a>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d003      	beq.n	8002eee <I2C_MasterRequestWrite+0x2a>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eec:	d108      	bne.n	8002f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e00b      	b.n	8002f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b12      	cmp	r3, #18
 8002f06:	d107      	bne.n	8002f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fa95 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e035      	b.n	8002fb6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f52:	d108      	bne.n	8002f66 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	e01b      	b.n	8002f9e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f66:	897b      	ldrh	r3, [r7, #10]
 8002f68:	11db      	asrs	r3, r3, #7
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 0306 	and.w	r3, r3, #6
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f063 030f 	orn	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	490f      	ldr	r1, [pc, #60]	; (8002fc0 <I2C_MasterRequestWrite+0xfc>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fabc 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e010      	b.n	8002fb6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f94:	897b      	ldrh	r3, [r7, #10]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <I2C_MasterRequestWrite+0x100>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 faac 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00010008 	.word	0x00010008
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d006      	beq.n	8003002 <I2C_MasterRequestRead+0x3a>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <I2C_MasterRequestRead+0x3a>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00b      	b.n	800302c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b11      	cmp	r3, #17
 800301a:	d107      	bne.n	800302c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fa0b 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e078      	b.n	8003150 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003066:	d108      	bne.n	800307a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]
 8003078:	e05e      	b.n	8003138 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	11db      	asrs	r3, r3, #7
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 0306 	and.w	r3, r3, #6
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f063 030f 	orn	r3, r3, #15
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4930      	ldr	r1, [pc, #192]	; (8003158 <I2C_MasterRequestRead+0x190>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa32 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e053      	b.n	8003150 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4929      	ldr	r1, [pc, #164]	; (800315c <I2C_MasterRequestRead+0x194>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fa22 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e043      	b.n	8003150 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9aa 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e017      	b.n	8003150 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	11db      	asrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0306 	and.w	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f063 030e 	orn	r3, r3, #14
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <I2C_MasterRequestRead+0x194>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9df 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010008 	.word	0x00010008
 800315c:	00010002 	.word	0x00010002

08003160 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2200      	movs	r2, #0
 8003192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f95c 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e05f      	b.n	800327c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	492c      	ldr	r1, [pc, #176]	; (8003284 <I2C_RequestMemoryWrite+0x124>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f995 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e04c      	b.n	800327c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	6a39      	ldr	r1, [r7, #32]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f9ff 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e02b      	b.n	800327c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	611a      	str	r2, [r3, #16]
 8003234:	e021      	b.n	800327a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	b29b      	uxth	r3, r3
 800323c:	b2da      	uxtb	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	6a39      	ldr	r1, [r7, #32]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f9d9 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e005      	b.n	800327c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8c0 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0a9      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	4951      	ldr	r1, [pc, #324]	; (8003450 <I2C_RequestMemoryRead+0x1c8>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8f9 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e096      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	6a39      	ldr	r1, [r7, #32]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f963 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b04      	cmp	r3, #4
 8003346:	d107      	bne.n	8003358 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e075      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]
 800336c:	e021      	b.n	80033b2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f93d 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e04f      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f922 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e034      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f82a 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e013      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	6a3a      	ldr	r2, [r7, #32]
 8003434:	4906      	ldr	r1, [pc, #24]	; (8003450 <I2C_RequestMemoryRead+0x1c8>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f863 	bl	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010002 	.word	0x00010002

08003454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	e025      	b.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d021      	beq.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe fa89 	bl	8001984 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e023      	b.n	80034fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10d      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	e00c      	b.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d0b6      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003510:	e051      	b.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003520:	d123      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800353a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e046      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003570:	d021      	beq.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fe fa07 	bl	8001984 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d116      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0220 	orr.w	r2, r3, #32
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e020      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10c      	bne.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e00b      	b.n	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d18d      	bne.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360c:	e02d      	b.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f8ce 	bl	80037b0 <I2C_IsAcknowledgeFailed>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e02d      	b.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003624:	d021      	beq.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe f9ad 	bl	8001984 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e007      	b.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d1ca      	bne.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368e:	e02d      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f88d 	bl	80037b0 <I2C_IsAcknowledgeFailed>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e02d      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a6:	d021      	beq.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	f7fe f96c 	bl	8001984 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d1ca      	bne.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003710:	e042      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b10      	cmp	r3, #16
 800371e:	d119      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0210 	mvn.w	r2, #16
 8003728:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e029      	b.n	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fe f916 	bl	8001984 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d1b5      	bne.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d11b      	bne.n	8003800 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e25b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d075      	beq.n	800391a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b99      	ldr	r3, [pc, #612]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e236      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x74>
 8003876:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a90      	ldr	r2, [pc, #576]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8a      	ldr	r2, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a87      	ldr	r2, [pc, #540]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a83      	ldr	r2, [pc, #524]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe f85c 	bl	8001984 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe f858 	bl	8001984 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1fb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe f848 	bl	8001984 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f844 	bl	8001984 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1e7      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d11c      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1bb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4952      	ldr	r1, [pc, #328]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e03a      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fffd 	bl	8001984 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fd fff9 	bl	8001984 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e19c      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4940      	ldr	r1, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd ffdc 	bl	8001984 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fd ffd8 	bl	8001984 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e17b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd ffbc 	bl	8001984 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fd ffb8 	bl	8001984 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e15b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x200>
 8003a2e:	e015      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fd ffa5 	bl	8001984 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fd ffa1 	bl	8001984 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e144      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd ff67 	bl	8001984 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e011      	b.n	8003ade <HAL_RCC_OscConfig+0x2ce>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
 8003ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fd ff5a 	bl	8001984 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0fd      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b08:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a76      	ldr	r2, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b22:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a70      	ldr	r2, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a6d      	ldr	r2, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fd ff1f 	bl	8001984 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd ff1b 	bl	8001984 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0bc      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x33a>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd ff09 	bl	8001984 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd ff05 	bl	8001984 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0a6      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8092 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d05c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d141      	bne.n	8003c4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fd fed9 	bl	8001984 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fd fed5 	bl	8001984 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e078      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be8:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	4933      	ldr	r1, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fd feae 	bl	8001984 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fd feaa 	bl	8001984 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04d      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x41c>
 8003c4a:	e045      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fd fe97 	bl	8001984 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fd fe93 	bl	8001984 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e036      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x44a>
 8003c78:	e02e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e029      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10d      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470060 	.word	0x42470060

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fd fdd0 	bl	8001984 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fd fdcc 	bl	8001984 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fd30 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08004eb8 	.word	0x08004eb8
 8003eb4:	20000010 	.word	0x20000010
 8003eb8:	20000014 	.word	0x20000014

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d007      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x32>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 80b4 	bne.w	8004050 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eea:	60bb      	str	r3, [r7, #8]
       break;
 8003eec:	e0b3      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ef0:	60bb      	str	r3, [r7, #8]
      break;
 8003ef2:	e0b0      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04a      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	ea03 0501 	and.w	r5, r3, r1
 8003f20:	ea04 0602 	and.w	r6, r4, r2
 8003f24:	4629      	mov	r1, r5
 8003f26:	4632      	mov	r2, r6
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0154      	lsls	r4, r2, #5
 8003f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f36:	014b      	lsls	r3, r1, #5
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	1b49      	subs	r1, r1, r5
 8003f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0194      	lsls	r4, r2, #6
 8003f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f50:	018b      	lsls	r3, r1, #6
 8003f52:	1a5b      	subs	r3, r3, r1
 8003f54:	eb64 0402 	sbc.w	r4, r4, r2
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	00e2      	lsls	r2, r4, #3
 8003f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	195b      	adds	r3, r3, r5
 8003f6e:	eb44 0406 	adc.w	r4, r4, r6
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	0262      	lsls	r2, r4, #9
 8003f7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f80:	0259      	lsls	r1, r3, #9
 8003f82:	460b      	mov	r3, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	4621      	mov	r1, r4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f04f 0400 	mov.w	r4, #0
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	f7fc f96c 	bl	8000270 <__aeabi_uldivmod>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e049      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	ea03 0501 	and.w	r5, r3, r1
 8003fb6:	ea04 0602 	and.w	r6, r4, r2
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	f04f 0400 	mov.w	r4, #0
 8003fc6:	0154      	lsls	r4, r2, #5
 8003fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fcc:	014b      	lsls	r3, r1, #5
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	1b49      	subs	r1, r1, r5
 8003fd4:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0194      	lsls	r4, r2, #6
 8003fe2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe6:	018b      	lsls	r3, r1, #6
 8003fe8:	1a5b      	subs	r3, r3, r1
 8003fea:	eb64 0402 	sbc.w	r4, r4, r2
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	00e2      	lsls	r2, r4, #3
 8003ff8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ffc:	00d9      	lsls	r1, r3, #3
 8003ffe:	460b      	mov	r3, r1
 8004000:	4614      	mov	r4, r2
 8004002:	195b      	adds	r3, r3, r5
 8004004:	eb44 0406 	adc.w	r4, r4, r6
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	02a2      	lsls	r2, r4, #10
 8004012:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004016:	0299      	lsls	r1, r3, #10
 8004018:	460b      	mov	r3, r1
 800401a:	4614      	mov	r4, r2
 800401c:	4618      	mov	r0, r3
 800401e:	4621      	mov	r1, r4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	f7fc f921 	bl	8000270 <__aeabi_uldivmod>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	60bb      	str	r3, [r7, #8]
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004052:	60bb      	str	r3, [r7, #8]
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	68bb      	ldr	r3, [r7, #8]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000010 	.word	0x20000010

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004088:	f7ff fff0 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0a9b      	lsrs	r3, r3, #10
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	08004ec8 	.word	0x08004ec8

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e01d      	b.n	80040fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fb0a 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 f8e4 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d007      	beq.n	8004134 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_ConfigClockSource+0x18>
 800415e:	2302      	movs	r3, #2
 8004160:	e0a6      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x166>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004180:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004188:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d067      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x120>
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d80b      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x6c>
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d073      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x140>
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d802      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x62>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d06f      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041aa:	e078      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d06c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x140>
 80041b0:	2b30      	cmp	r3, #48	; 0x30
 80041b2:	d06a      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041b4:	e073      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041b6:	2b70      	cmp	r3, #112	; 0x70
 80041b8:	d00d      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x8c>
 80041ba:	2b70      	cmp	r3, #112	; 0x70
 80041bc:	d804      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x7e>
 80041be:	2b50      	cmp	r3, #80	; 0x50
 80041c0:	d033      	beq.n	800422a <HAL_TIM_ConfigClockSource+0xe0>
 80041c2:	2b60      	cmp	r3, #96	; 0x60
 80041c4:	d041      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041c6:	e06a      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d066      	beq.n	800429c <HAL_TIM_ConfigClockSource+0x152>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d017      	beq.n	8004204 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041d4:	e063      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f000 f981 	bl	80044ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	609a      	str	r2, [r3, #8]
      break;
 8004202:	e04c      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f000 f96a 	bl	80044ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004226:	609a      	str	r2, [r3, #8]
      break;
 8004228:	e039      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	461a      	mov	r2, r3
 8004238:	f000 f8de 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2150      	movs	r1, #80	; 0x50
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f937 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8004248:	e029      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	461a      	mov	r2, r3
 8004258:	f000 f8fd 	bl	8004456 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2160      	movs	r1, #96	; 0x60
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f927 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8004268:	e019      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	461a      	mov	r2, r3
 8004278:	f000 f8be 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2140      	movs	r1, #64	; 0x40
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f917 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8004288:	e009      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f000 f90e 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 800429a:	e000      	b.n	800429e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800429c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a40      	ldr	r2, [pc, #256]	; (80043cc <TIM_Base_SetConfig+0x114>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3d      	ldr	r2, [pc, #244]	; (80043d0 <TIM_Base_SetConfig+0x118>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <TIM_Base_SetConfig+0x11c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3b      	ldr	r2, [pc, #236]	; (80043d8 <TIM_Base_SetConfig+0x120>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3a      	ldr	r2, [pc, #232]	; (80043dc <TIM_Base_SetConfig+0x124>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <TIM_Base_SetConfig+0x114>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d027      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <TIM_Base_SetConfig+0x118>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d023      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <TIM_Base_SetConfig+0x11c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01f      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <TIM_Base_SetConfig+0x120>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a29      	ldr	r2, [pc, #164]	; (80043dc <TIM_Base_SetConfig+0x124>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d017      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <TIM_Base_SetConfig+0x128>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <TIM_Base_SetConfig+0x12c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <TIM_Base_SetConfig+0x130>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a25      	ldr	r2, [pc, #148]	; (80043ec <TIM_Base_SetConfig+0x134>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <TIM_Base_SetConfig+0x138>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a23      	ldr	r2, [pc, #140]	; (80043f4 <TIM_Base_SetConfig+0x13c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <TIM_Base_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <TIM_Base_SetConfig+0x124>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40010400 	.word	0x40010400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800
 80043ec:	40001800 	.word	0x40001800
 80043f0:	40001c00 	.word	0x40001c00
 80043f4:	40002000 	.word	0x40002000

080043f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 030a 	bic.w	r3, r3, #10
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004456:	b480      	push	{r7}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0210 	bic.w	r2, r3, #16
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f043 0307 	orr.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	431a      	orrs	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e05a      	b.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a21      	ldr	r2, [pc, #132]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d01d      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10c      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40010400 	.word	0x40010400
 800461c:	40014000 	.word	0x40014000
 8004620:	40001800 	.word	0x40001800

08004624 <__errno>:
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <__errno+0x8>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	2000001c 	.word	0x2000001c

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4e0d      	ldr	r6, [pc, #52]	; (8004668 <__libc_init_array+0x38>)
 8004634:	4c0d      	ldr	r4, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004636:	1ba4      	subs	r4, r4, r6
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	2500      	movs	r5, #0
 800463c:	42a5      	cmp	r5, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	4e0b      	ldr	r6, [pc, #44]	; (8004670 <__libc_init_array+0x40>)
 8004642:	4c0c      	ldr	r4, [pc, #48]	; (8004674 <__libc_init_array+0x44>)
 8004644:	f000 fc26 	bl	8004e94 <_init>
 8004648:	1ba4      	subs	r4, r4, r6
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	2500      	movs	r5, #0
 800464e:	42a5      	cmp	r5, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004658:	4798      	blx	r3
 800465a:	3501      	adds	r5, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004662:	4798      	blx	r3
 8004664:	3501      	adds	r5, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	08004f0c 	.word	0x08004f0c
 800466c:	08004f0c 	.word	0x08004f0c
 8004670:	08004f0c 	.word	0x08004f0c
 8004674:	08004f10 	.word	0x08004f10

08004678 <memset>:
 8004678:	4402      	add	r2, r0
 800467a:	4603      	mov	r3, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	d100      	bne.n	8004682 <memset+0xa>
 8004680:	4770      	bx	lr
 8004682:	f803 1b01 	strb.w	r1, [r3], #1
 8004686:	e7f9      	b.n	800467c <memset+0x4>

08004688 <siprintf>:
 8004688:	b40e      	push	{r1, r2, r3}
 800468a:	b500      	push	{lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	ab1d      	add	r3, sp, #116	; 0x74
 8004690:	9002      	str	r0, [sp, #8]
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004698:	4809      	ldr	r0, [pc, #36]	; (80046c0 <siprintf+0x38>)
 800469a:	9107      	str	r1, [sp, #28]
 800469c:	9104      	str	r1, [sp, #16]
 800469e:	4909      	ldr	r1, [pc, #36]	; (80046c4 <siprintf+0x3c>)
 80046a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a4:	9105      	str	r1, [sp, #20]
 80046a6:	6800      	ldr	r0, [r0, #0]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	a902      	add	r1, sp, #8
 80046ac:	f000 f866 	bl	800477c <_svfiprintf_r>
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	b01c      	add	sp, #112	; 0x70
 80046b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046bc:	b003      	add	sp, #12
 80046be:	4770      	bx	lr
 80046c0:	2000001c 	.word	0x2000001c
 80046c4:	ffff0208 	.word	0xffff0208

080046c8 <__ssputs_r>:
 80046c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	688e      	ldr	r6, [r1, #8]
 80046ce:	429e      	cmp	r6, r3
 80046d0:	4682      	mov	sl, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4690      	mov	r8, r2
 80046d6:	4699      	mov	r9, r3
 80046d8:	d837      	bhi.n	800474a <__ssputs_r+0x82>
 80046da:	898a      	ldrh	r2, [r1, #12]
 80046dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046e0:	d031      	beq.n	8004746 <__ssputs_r+0x7e>
 80046e2:	6825      	ldr	r5, [r4, #0]
 80046e4:	6909      	ldr	r1, [r1, #16]
 80046e6:	1a6f      	subs	r7, r5, r1
 80046e8:	6965      	ldr	r5, [r4, #20]
 80046ea:	2302      	movs	r3, #2
 80046ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80046f4:	f109 0301 	add.w	r3, r9, #1
 80046f8:	443b      	add	r3, r7
 80046fa:	429d      	cmp	r5, r3
 80046fc:	bf38      	it	cc
 80046fe:	461d      	movcc	r5, r3
 8004700:	0553      	lsls	r3, r2, #21
 8004702:	d530      	bpl.n	8004766 <__ssputs_r+0x9e>
 8004704:	4629      	mov	r1, r5
 8004706:	f000 fb2b 	bl	8004d60 <_malloc_r>
 800470a:	4606      	mov	r6, r0
 800470c:	b950      	cbnz	r0, 8004724 <__ssputs_r+0x5c>
 800470e:	230c      	movs	r3, #12
 8004710:	f8ca 3000 	str.w	r3, [sl]
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	463a      	mov	r2, r7
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	f000 faa8 	bl	8004c7c <memcpy>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	6126      	str	r6, [r4, #16]
 800473a:	6165      	str	r5, [r4, #20]
 800473c:	443e      	add	r6, r7
 800473e:	1bed      	subs	r5, r5, r7
 8004740:	6026      	str	r6, [r4, #0]
 8004742:	60a5      	str	r5, [r4, #8]
 8004744:	464e      	mov	r6, r9
 8004746:	454e      	cmp	r6, r9
 8004748:	d900      	bls.n	800474c <__ssputs_r+0x84>
 800474a:	464e      	mov	r6, r9
 800474c:	4632      	mov	r2, r6
 800474e:	4641      	mov	r1, r8
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	f000 fa9e 	bl	8004c92 <memmove>
 8004756:	68a3      	ldr	r3, [r4, #8]
 8004758:	1b9b      	subs	r3, r3, r6
 800475a:	60a3      	str	r3, [r4, #8]
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	441e      	add	r6, r3
 8004760:	6026      	str	r6, [r4, #0]
 8004762:	2000      	movs	r0, #0
 8004764:	e7dc      	b.n	8004720 <__ssputs_r+0x58>
 8004766:	462a      	mov	r2, r5
 8004768:	f000 fb54 	bl	8004e14 <_realloc_r>
 800476c:	4606      	mov	r6, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d1e2      	bne.n	8004738 <__ssputs_r+0x70>
 8004772:	6921      	ldr	r1, [r4, #16]
 8004774:	4650      	mov	r0, sl
 8004776:	f000 faa5 	bl	8004cc4 <_free_r>
 800477a:	e7c8      	b.n	800470e <__ssputs_r+0x46>

0800477c <_svfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	461d      	mov	r5, r3
 8004782:	898b      	ldrh	r3, [r1, #12]
 8004784:	061f      	lsls	r7, r3, #24
 8004786:	b09d      	sub	sp, #116	; 0x74
 8004788:	4680      	mov	r8, r0
 800478a:	460c      	mov	r4, r1
 800478c:	4616      	mov	r6, r2
 800478e:	d50f      	bpl.n	80047b0 <_svfiprintf_r+0x34>
 8004790:	690b      	ldr	r3, [r1, #16]
 8004792:	b96b      	cbnz	r3, 80047b0 <_svfiprintf_r+0x34>
 8004794:	2140      	movs	r1, #64	; 0x40
 8004796:	f000 fae3 	bl	8004d60 <_malloc_r>
 800479a:	6020      	str	r0, [r4, #0]
 800479c:	6120      	str	r0, [r4, #16]
 800479e:	b928      	cbnz	r0, 80047ac <_svfiprintf_r+0x30>
 80047a0:	230c      	movs	r3, #12
 80047a2:	f8c8 3000 	str.w	r3, [r8]
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047aa:	e0c8      	b.n	800493e <_svfiprintf_r+0x1c2>
 80047ac:	2340      	movs	r3, #64	; 0x40
 80047ae:	6163      	str	r3, [r4, #20]
 80047b0:	2300      	movs	r3, #0
 80047b2:	9309      	str	r3, [sp, #36]	; 0x24
 80047b4:	2320      	movs	r3, #32
 80047b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ba:	2330      	movs	r3, #48	; 0x30
 80047bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047c0:	9503      	str	r5, [sp, #12]
 80047c2:	f04f 0b01 	mov.w	fp, #1
 80047c6:	4637      	mov	r7, r6
 80047c8:	463d      	mov	r5, r7
 80047ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047ce:	b10b      	cbz	r3, 80047d4 <_svfiprintf_r+0x58>
 80047d0:	2b25      	cmp	r3, #37	; 0x25
 80047d2:	d13e      	bne.n	8004852 <_svfiprintf_r+0xd6>
 80047d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80047d8:	d00b      	beq.n	80047f2 <_svfiprintf_r+0x76>
 80047da:	4653      	mov	r3, sl
 80047dc:	4632      	mov	r2, r6
 80047de:	4621      	mov	r1, r4
 80047e0:	4640      	mov	r0, r8
 80047e2:	f7ff ff71 	bl	80046c8 <__ssputs_r>
 80047e6:	3001      	adds	r0, #1
 80047e8:	f000 80a4 	beq.w	8004934 <_svfiprintf_r+0x1b8>
 80047ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ee:	4453      	add	r3, sl
 80047f0:	9309      	str	r3, [sp, #36]	; 0x24
 80047f2:	783b      	ldrb	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 809d 	beq.w	8004934 <_svfiprintf_r+0x1b8>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800480c:	931a      	str	r3, [sp, #104]	; 0x68
 800480e:	462f      	mov	r7, r5
 8004810:	2205      	movs	r2, #5
 8004812:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004816:	4850      	ldr	r0, [pc, #320]	; (8004958 <_svfiprintf_r+0x1dc>)
 8004818:	f7fb fcda 	bl	80001d0 <memchr>
 800481c:	9b04      	ldr	r3, [sp, #16]
 800481e:	b9d0      	cbnz	r0, 8004856 <_svfiprintf_r+0xda>
 8004820:	06d9      	lsls	r1, r3, #27
 8004822:	bf44      	itt	mi
 8004824:	2220      	movmi	r2, #32
 8004826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800482a:	071a      	lsls	r2, r3, #28
 800482c:	bf44      	itt	mi
 800482e:	222b      	movmi	r2, #43	; 0x2b
 8004830:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004834:	782a      	ldrb	r2, [r5, #0]
 8004836:	2a2a      	cmp	r2, #42	; 0x2a
 8004838:	d015      	beq.n	8004866 <_svfiprintf_r+0xea>
 800483a:	9a07      	ldr	r2, [sp, #28]
 800483c:	462f      	mov	r7, r5
 800483e:	2000      	movs	r0, #0
 8004840:	250a      	movs	r5, #10
 8004842:	4639      	mov	r1, r7
 8004844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004848:	3b30      	subs	r3, #48	; 0x30
 800484a:	2b09      	cmp	r3, #9
 800484c:	d94d      	bls.n	80048ea <_svfiprintf_r+0x16e>
 800484e:	b1b8      	cbz	r0, 8004880 <_svfiprintf_r+0x104>
 8004850:	e00f      	b.n	8004872 <_svfiprintf_r+0xf6>
 8004852:	462f      	mov	r7, r5
 8004854:	e7b8      	b.n	80047c8 <_svfiprintf_r+0x4c>
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <_svfiprintf_r+0x1dc>)
 8004858:	1a80      	subs	r0, r0, r2
 800485a:	fa0b f000 	lsl.w	r0, fp, r0
 800485e:	4318      	orrs	r0, r3
 8004860:	9004      	str	r0, [sp, #16]
 8004862:	463d      	mov	r5, r7
 8004864:	e7d3      	b.n	800480e <_svfiprintf_r+0x92>
 8004866:	9a03      	ldr	r2, [sp, #12]
 8004868:	1d11      	adds	r1, r2, #4
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	9103      	str	r1, [sp, #12]
 800486e:	2a00      	cmp	r2, #0
 8004870:	db01      	blt.n	8004876 <_svfiprintf_r+0xfa>
 8004872:	9207      	str	r2, [sp, #28]
 8004874:	e004      	b.n	8004880 <_svfiprintf_r+0x104>
 8004876:	4252      	negs	r2, r2
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	9207      	str	r2, [sp, #28]
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	783b      	ldrb	r3, [r7, #0]
 8004882:	2b2e      	cmp	r3, #46	; 0x2e
 8004884:	d10c      	bne.n	80048a0 <_svfiprintf_r+0x124>
 8004886:	787b      	ldrb	r3, [r7, #1]
 8004888:	2b2a      	cmp	r3, #42	; 0x2a
 800488a:	d133      	bne.n	80048f4 <_svfiprintf_r+0x178>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	bfb8      	it	lt
 8004898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800489c:	3702      	adds	r7, #2
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	4d2e      	ldr	r5, [pc, #184]	; (800495c <_svfiprintf_r+0x1e0>)
 80048a2:	7839      	ldrb	r1, [r7, #0]
 80048a4:	2203      	movs	r2, #3
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7fb fc92 	bl	80001d0 <memchr>
 80048ac:	b138      	cbz	r0, 80048be <_svfiprintf_r+0x142>
 80048ae:	2340      	movs	r3, #64	; 0x40
 80048b0:	1b40      	subs	r0, r0, r5
 80048b2:	fa03 f000 	lsl.w	r0, r3, r0
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	4303      	orrs	r3, r0
 80048ba:	3701      	adds	r7, #1
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	7839      	ldrb	r1, [r7, #0]
 80048c0:	4827      	ldr	r0, [pc, #156]	; (8004960 <_svfiprintf_r+0x1e4>)
 80048c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c6:	2206      	movs	r2, #6
 80048c8:	1c7e      	adds	r6, r7, #1
 80048ca:	f7fb fc81 	bl	80001d0 <memchr>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d038      	beq.n	8004944 <_svfiprintf_r+0x1c8>
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <_svfiprintf_r+0x1e8>)
 80048d4:	bb13      	cbnz	r3, 800491c <_svfiprintf_r+0x1a0>
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	3307      	adds	r3, #7
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	3308      	adds	r3, #8
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	444b      	add	r3, r9
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	e76d      	b.n	80047c6 <_svfiprintf_r+0x4a>
 80048ea:	fb05 3202 	mla	r2, r5, r2, r3
 80048ee:	2001      	movs	r0, #1
 80048f0:	460f      	mov	r7, r1
 80048f2:	e7a6      	b.n	8004842 <_svfiprintf_r+0xc6>
 80048f4:	2300      	movs	r3, #0
 80048f6:	3701      	adds	r7, #1
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	4619      	mov	r1, r3
 80048fc:	250a      	movs	r5, #10
 80048fe:	4638      	mov	r0, r7
 8004900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004904:	3a30      	subs	r2, #48	; 0x30
 8004906:	2a09      	cmp	r2, #9
 8004908:	d903      	bls.n	8004912 <_svfiprintf_r+0x196>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0c8      	beq.n	80048a0 <_svfiprintf_r+0x124>
 800490e:	9105      	str	r1, [sp, #20]
 8004910:	e7c6      	b.n	80048a0 <_svfiprintf_r+0x124>
 8004912:	fb05 2101 	mla	r1, r5, r1, r2
 8004916:	2301      	movs	r3, #1
 8004918:	4607      	mov	r7, r0
 800491a:	e7f0      	b.n	80048fe <_svfiprintf_r+0x182>
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4622      	mov	r2, r4
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <_svfiprintf_r+0x1ec>)
 8004924:	a904      	add	r1, sp, #16
 8004926:	4640      	mov	r0, r8
 8004928:	f3af 8000 	nop.w
 800492c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004930:	4681      	mov	r9, r0
 8004932:	d1d6      	bne.n	80048e2 <_svfiprintf_r+0x166>
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	065b      	lsls	r3, r3, #25
 8004938:	f53f af35 	bmi.w	80047a6 <_svfiprintf_r+0x2a>
 800493c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800493e:	b01d      	add	sp, #116	; 0x74
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	ab03      	add	r3, sp, #12
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4622      	mov	r2, r4
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <_svfiprintf_r+0x1ec>)
 800494c:	a904      	add	r1, sp, #16
 800494e:	4640      	mov	r0, r8
 8004950:	f000 f882 	bl	8004a58 <_printf_i>
 8004954:	e7ea      	b.n	800492c <_svfiprintf_r+0x1b0>
 8004956:	bf00      	nop
 8004958:	08004ed0 	.word	0x08004ed0
 800495c:	08004ed6 	.word	0x08004ed6
 8004960:	08004eda 	.word	0x08004eda
 8004964:	00000000 	.word	0x00000000
 8004968:	080046c9 	.word	0x080046c9

0800496c <_printf_common>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4691      	mov	r9, r2
 8004972:	461f      	mov	r7, r3
 8004974:	688a      	ldr	r2, [r1, #8]
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfb8      	it	lt
 8004980:	4613      	movlt	r3, r2
 8004982:	f8c9 3000 	str.w	r3, [r9]
 8004986:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	b112      	cbz	r2, 8004996 <_printf_common+0x2a>
 8004990:	3301      	adds	r3, #1
 8004992:	f8c9 3000 	str.w	r3, [r9]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	0699      	lsls	r1, r3, #26
 800499a:	bf42      	ittt	mi
 800499c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049a0:	3302      	addmi	r3, #2
 80049a2:	f8c9 3000 	strmi.w	r3, [r9]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d107      	bne.n	80049be <_printf_common+0x52>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	f8d9 2000 	ldr.w	r2, [r9]
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dc28      	bgt.n	8004a10 <_printf_common+0xa4>
 80049be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	3300      	adds	r3, #0
 80049c6:	bf18      	it	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	0692      	lsls	r2, r2, #26
 80049cc:	d42d      	bmi.n	8004a2a <_printf_common+0xbe>
 80049ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d2:	4639      	mov	r1, r7
 80049d4:	4630      	mov	r0, r6
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d020      	beq.n	8004a1e <_printf_common+0xb2>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	68e5      	ldr	r5, [r4, #12]
 80049e0:	f8d9 2000 	ldr.w	r2, [r9]
 80049e4:	f003 0306 	and.w	r3, r3, #6
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	bf08      	it	eq
 80049ec:	1aad      	subeq	r5, r5, r2
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	6922      	ldr	r2, [r4, #16]
 80049f2:	bf0c      	ite	eq
 80049f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f8:	2500      	movne	r5, #0
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bfc4      	itt	gt
 80049fe:	1a9b      	subgt	r3, r3, r2
 8004a00:	18ed      	addgt	r5, r5, r3
 8004a02:	f04f 0900 	mov.w	r9, #0
 8004a06:	341a      	adds	r4, #26
 8004a08:	454d      	cmp	r5, r9
 8004a0a:	d11a      	bne.n	8004a42 <_printf_common+0xd6>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e008      	b.n	8004a22 <_printf_common+0xb6>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4652      	mov	r2, sl
 8004a14:	4639      	mov	r1, r7
 8004a16:	4630      	mov	r0, r6
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d103      	bne.n	8004a26 <_printf_common+0xba>
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a26:	3501      	adds	r5, #1
 8004a28:	e7c3      	b.n	80049b2 <_printf_common+0x46>
 8004a2a:	18e1      	adds	r1, r4, r3
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	2030      	movs	r0, #48	; 0x30
 8004a30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a34:	4422      	add	r2, r4
 8004a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3e:	3302      	adds	r3, #2
 8004a40:	e7c5      	b.n	80049ce <_printf_common+0x62>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4622      	mov	r2, r4
 8004a46:	4639      	mov	r1, r7
 8004a48:	4630      	mov	r0, r6
 8004a4a:	47c0      	blx	r8
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d0e6      	beq.n	8004a1e <_printf_common+0xb2>
 8004a50:	f109 0901 	add.w	r9, r9, #1
 8004a54:	e7d8      	b.n	8004a08 <_printf_common+0x9c>
	...

08004a58 <_printf_i>:
 8004a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a60:	460c      	mov	r4, r1
 8004a62:	7e09      	ldrb	r1, [r1, #24]
 8004a64:	b085      	sub	sp, #20
 8004a66:	296e      	cmp	r1, #110	; 0x6e
 8004a68:	4617      	mov	r7, r2
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4698      	mov	r8, r3
 8004a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a70:	f000 80b3 	beq.w	8004bda <_printf_i+0x182>
 8004a74:	d822      	bhi.n	8004abc <_printf_i+0x64>
 8004a76:	2963      	cmp	r1, #99	; 0x63
 8004a78:	d036      	beq.n	8004ae8 <_printf_i+0x90>
 8004a7a:	d80a      	bhi.n	8004a92 <_printf_i+0x3a>
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	f000 80b9 	beq.w	8004bf4 <_printf_i+0x19c>
 8004a82:	2958      	cmp	r1, #88	; 0x58
 8004a84:	f000 8083 	beq.w	8004b8e <_printf_i+0x136>
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a90:	e032      	b.n	8004af8 <_printf_i+0xa0>
 8004a92:	2964      	cmp	r1, #100	; 0x64
 8004a94:	d001      	beq.n	8004a9a <_printf_i+0x42>
 8004a96:	2969      	cmp	r1, #105	; 0x69
 8004a98:	d1f6      	bne.n	8004a88 <_printf_i+0x30>
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	0605      	lsls	r5, r0, #24
 8004aa0:	f103 0104 	add.w	r1, r3, #4
 8004aa4:	d52a      	bpl.n	8004afc <_printf_i+0xa4>
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da03      	bge.n	8004ab6 <_printf_i+0x5e>
 8004aae:	222d      	movs	r2, #45	; 0x2d
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ab6:	486f      	ldr	r0, [pc, #444]	; (8004c74 <_printf_i+0x21c>)
 8004ab8:	220a      	movs	r2, #10
 8004aba:	e039      	b.n	8004b30 <_printf_i+0xd8>
 8004abc:	2973      	cmp	r1, #115	; 0x73
 8004abe:	f000 809d 	beq.w	8004bfc <_printf_i+0x1a4>
 8004ac2:	d808      	bhi.n	8004ad6 <_printf_i+0x7e>
 8004ac4:	296f      	cmp	r1, #111	; 0x6f
 8004ac6:	d020      	beq.n	8004b0a <_printf_i+0xb2>
 8004ac8:	2970      	cmp	r1, #112	; 0x70
 8004aca:	d1dd      	bne.n	8004a88 <_printf_i+0x30>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	f043 0320 	orr.w	r3, r3, #32
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	e003      	b.n	8004ade <_printf_i+0x86>
 8004ad6:	2975      	cmp	r1, #117	; 0x75
 8004ad8:	d017      	beq.n	8004b0a <_printf_i+0xb2>
 8004ada:	2978      	cmp	r1, #120	; 0x78
 8004adc:	d1d4      	bne.n	8004a88 <_printf_i+0x30>
 8004ade:	2378      	movs	r3, #120	; 0x78
 8004ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae4:	4864      	ldr	r0, [pc, #400]	; (8004c78 <_printf_i+0x220>)
 8004ae6:	e055      	b.n	8004b94 <_printf_i+0x13c>
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e08c      	b.n	8004c16 <_printf_i+0x1be>
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b04:	bf18      	it	ne
 8004b06:	b21b      	sxthne	r3, r3
 8004b08:	e7cf      	b.n	8004aaa <_printf_i+0x52>
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	1d18      	adds	r0, r3, #4
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	0628      	lsls	r0, r5, #24
 8004b14:	d501      	bpl.n	8004b1a <_printf_i+0xc2>
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <_printf_i+0xc8>
 8004b1a:	0668      	lsls	r0, r5, #25
 8004b1c:	d5fb      	bpl.n	8004b16 <_printf_i+0xbe>
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	4854      	ldr	r0, [pc, #336]	; (8004c74 <_printf_i+0x21c>)
 8004b22:	296f      	cmp	r1, #111	; 0x6f
 8004b24:	bf14      	ite	ne
 8004b26:	220a      	movne	r2, #10
 8004b28:	2208      	moveq	r2, #8
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b30:	6865      	ldr	r5, [r4, #4]
 8004b32:	60a5      	str	r5, [r4, #8]
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	f2c0 8095 	blt.w	8004c64 <_printf_i+0x20c>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	f021 0104 	bic.w	r1, r1, #4
 8004b40:	6021      	str	r1, [r4, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d13d      	bne.n	8004bc2 <_printf_i+0x16a>
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	f040 808e 	bne.w	8004c68 <_printf_i+0x210>
 8004b4c:	4665      	mov	r5, ip
 8004b4e:	2a08      	cmp	r2, #8
 8004b50:	d10b      	bne.n	8004b6a <_printf_i+0x112>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d508      	bpl.n	8004b6a <_printf_i+0x112>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	bfde      	ittt	le
 8004b60:	2330      	movle	r3, #48	; 0x30
 8004b62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b6a:	ebac 0305 	sub.w	r3, ip, r5
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	f8cd 8000 	str.w	r8, [sp]
 8004b74:	463b      	mov	r3, r7
 8004b76:	aa03      	add	r2, sp, #12
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7ff fef6 	bl	800496c <_printf_common>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d14d      	bne.n	8004c20 <_printf_i+0x1c8>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b88:	b005      	add	sp, #20
 8004b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8e:	4839      	ldr	r0, [pc, #228]	; (8004c74 <_printf_i+0x21c>)
 8004b90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b94:	6813      	ldr	r3, [r2, #0]
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	1d1d      	adds	r5, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6015      	str	r5, [r2, #0]
 8004b9e:	060a      	lsls	r2, r1, #24
 8004ba0:	d50b      	bpl.n	8004bba <_printf_i+0x162>
 8004ba2:	07ca      	lsls	r2, r1, #31
 8004ba4:	bf44      	itt	mi
 8004ba6:	f041 0120 	orrmi.w	r1, r1, #32
 8004baa:	6021      	strmi	r1, [r4, #0]
 8004bac:	b91b      	cbnz	r3, 8004bb6 <_printf_i+0x15e>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	f022 0220 	bic.w	r2, r2, #32
 8004bb4:	6022      	str	r2, [r4, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	e7b7      	b.n	8004b2a <_printf_i+0xd2>
 8004bba:	064d      	lsls	r5, r1, #25
 8004bbc:	bf48      	it	mi
 8004bbe:	b29b      	uxthmi	r3, r3
 8004bc0:	e7ef      	b.n	8004ba2 <_printf_i+0x14a>
 8004bc2:	4665      	mov	r5, ip
 8004bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bc8:	fb02 3311 	mls	r3, r2, r1, r3
 8004bcc:	5cc3      	ldrb	r3, [r0, r3]
 8004bce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <_printf_i+0x16c>
 8004bd8:	e7b9      	b.n	8004b4e <_printf_i+0xf6>
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	6961      	ldr	r1, [r4, #20]
 8004be0:	1d18      	adds	r0, r3, #4
 8004be2:	6010      	str	r0, [r2, #0]
 8004be4:	0628      	lsls	r0, r5, #24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	d501      	bpl.n	8004bee <_printf_i+0x196>
 8004bea:	6019      	str	r1, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <_printf_i+0x19c>
 8004bee:	066a      	lsls	r2, r5, #25
 8004bf0:	d5fb      	bpl.n	8004bea <_printf_i+0x192>
 8004bf2:	8019      	strh	r1, [r3, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	4665      	mov	r5, ip
 8004bfa:	e7b9      	b.n	8004b70 <_printf_i+0x118>
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	1d19      	adds	r1, r3, #4
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	681d      	ldr	r5, [r3, #0]
 8004c04:	6862      	ldr	r2, [r4, #4]
 8004c06:	2100      	movs	r1, #0
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7fb fae1 	bl	80001d0 <memchr>
 8004c0e:	b108      	cbz	r0, 8004c14 <_printf_i+0x1bc>
 8004c10:	1b40      	subs	r0, r0, r5
 8004c12:	6060      	str	r0, [r4, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1e:	e7a7      	b.n	8004b70 <_printf_i+0x118>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	462a      	mov	r2, r5
 8004c24:	4639      	mov	r1, r7
 8004c26:	4630      	mov	r0, r6
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0aa      	beq.n	8004b84 <_printf_i+0x12c>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	079b      	lsls	r3, r3, #30
 8004c32:	d413      	bmi.n	8004c5c <_printf_i+0x204>
 8004c34:	68e0      	ldr	r0, [r4, #12]
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	4298      	cmp	r0, r3
 8004c3a:	bfb8      	it	lt
 8004c3c:	4618      	movlt	r0, r3
 8004c3e:	e7a3      	b.n	8004b88 <_printf_i+0x130>
 8004c40:	2301      	movs	r3, #1
 8004c42:	464a      	mov	r2, r9
 8004c44:	4639      	mov	r1, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d09a      	beq.n	8004b84 <_printf_i+0x12c>
 8004c4e:	3501      	adds	r5, #1
 8004c50:	68e3      	ldr	r3, [r4, #12]
 8004c52:	9a03      	ldr	r2, [sp, #12]
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	dcf2      	bgt.n	8004c40 <_printf_i+0x1e8>
 8004c5a:	e7eb      	b.n	8004c34 <_printf_i+0x1dc>
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	f104 0919 	add.w	r9, r4, #25
 8004c62:	e7f5      	b.n	8004c50 <_printf_i+0x1f8>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ac      	bne.n	8004bc2 <_printf_i+0x16a>
 8004c68:	7803      	ldrb	r3, [r0, #0]
 8004c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c72:	e76c      	b.n	8004b4e <_printf_i+0xf6>
 8004c74:	08004ee1 	.word	0x08004ee1
 8004c78:	08004ef2 	.word	0x08004ef2

08004c7c <memcpy>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	1e43      	subs	r3, r0, #1
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	d100      	bne.n	8004c88 <memcpy+0xc>
 8004c86:	bd10      	pop	{r4, pc}
 8004c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c90:	e7f7      	b.n	8004c82 <memcpy+0x6>

08004c92 <memmove>:
 8004c92:	4288      	cmp	r0, r1
 8004c94:	b510      	push	{r4, lr}
 8004c96:	eb01 0302 	add.w	r3, r1, r2
 8004c9a:	d807      	bhi.n	8004cac <memmove+0x1a>
 8004c9c:	1e42      	subs	r2, r0, #1
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	d00a      	beq.n	8004cb8 <memmove+0x26>
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004caa:	e7f8      	b.n	8004c9e <memmove+0xc>
 8004cac:	4283      	cmp	r3, r0
 8004cae:	d9f5      	bls.n	8004c9c <memmove+0xa>
 8004cb0:	1881      	adds	r1, r0, r2
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	42d3      	cmn	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memmove+0x28>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004cc2:	e7f7      	b.n	8004cb4 <memmove+0x22>

08004cc4 <_free_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d045      	beq.n	8004d58 <_free_r+0x94>
 8004ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd0:	1f0c      	subs	r4, r1, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfb8      	it	lt
 8004cd6:	18e4      	addlt	r4, r4, r3
 8004cd8:	f000 f8d2 	bl	8004e80 <__malloc_lock>
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <_free_r+0x98>)
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	b933      	cbnz	r3, 8004cf2 <_free_r+0x2e>
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	6014      	str	r4, [r2, #0]
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cee:	f000 b8c8 	b.w	8004e82 <__malloc_unlock>
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	d90c      	bls.n	8004d10 <_free_r+0x4c>
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	1862      	adds	r2, r4, r1
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bf04      	itt	eq
 8004cfe:	681a      	ldreq	r2, [r3, #0]
 8004d00:	685b      	ldreq	r3, [r3, #4]
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	bf04      	itt	eq
 8004d06:	1852      	addeq	r2, r2, r1
 8004d08:	6022      	streq	r2, [r4, #0]
 8004d0a:	6004      	str	r4, [r0, #0]
 8004d0c:	e7ec      	b.n	8004ce8 <_free_r+0x24>
 8004d0e:	4613      	mov	r3, r2
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	b10a      	cbz	r2, 8004d18 <_free_r+0x54>
 8004d14:	42a2      	cmp	r2, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x4a>
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	1858      	adds	r0, r3, r1
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x74>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	1858      	adds	r0, r3, r1
 8004d26:	4282      	cmp	r2, r0
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	d1dd      	bne.n	8004ce8 <_free_r+0x24>
 8004d2c:	6810      	ldr	r0, [r2, #0]
 8004d2e:	6852      	ldr	r2, [r2, #4]
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	4401      	add	r1, r0
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	e7d7      	b.n	8004ce8 <_free_r+0x24>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x7c>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	e7d3      	b.n	8004ce8 <_free_r+0x24>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428a      	cmp	r2, r1
 8004d46:	bf04      	itt	eq
 8004d48:	6811      	ldreq	r1, [r2, #0]
 8004d4a:	6852      	ldreq	r2, [r2, #4]
 8004d4c:	6062      	str	r2, [r4, #4]
 8004d4e:	bf04      	itt	eq
 8004d50:	1809      	addeq	r1, r1, r0
 8004d52:	6021      	streq	r1, [r4, #0]
 8004d54:	605c      	str	r4, [r3, #4]
 8004d56:	e7c7      	b.n	8004ce8 <_free_r+0x24>
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200000c0 	.word	0x200000c0

08004d60 <_malloc_r>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	1ccd      	adds	r5, r1, #3
 8004d64:	f025 0503 	bic.w	r5, r5, #3
 8004d68:	3508      	adds	r5, #8
 8004d6a:	2d0c      	cmp	r5, #12
 8004d6c:	bf38      	it	cc
 8004d6e:	250c      	movcc	r5, #12
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	4606      	mov	r6, r0
 8004d74:	db01      	blt.n	8004d7a <_malloc_r+0x1a>
 8004d76:	42a9      	cmp	r1, r5
 8004d78:	d903      	bls.n	8004d82 <_malloc_r+0x22>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	2000      	movs	r0, #0
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	f000 f87d 	bl	8004e80 <__malloc_lock>
 8004d86:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <_malloc_r+0xac>)
 8004d88:	6814      	ldr	r4, [r2, #0]
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	b991      	cbnz	r1, 8004db4 <_malloc_r+0x54>
 8004d8e:	4c20      	ldr	r4, [pc, #128]	; (8004e10 <_malloc_r+0xb0>)
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	b91b      	cbnz	r3, 8004d9c <_malloc_r+0x3c>
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 f863 	bl	8004e60 <_sbrk_r>
 8004d9a:	6020      	str	r0, [r4, #0]
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f000 f85e 	bl	8004e60 <_sbrk_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d124      	bne.n	8004df2 <_malloc_r+0x92>
 8004da8:	230c      	movs	r3, #12
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f868 	bl	8004e82 <__malloc_unlock>
 8004db2:	e7e4      	b.n	8004d7e <_malloc_r+0x1e>
 8004db4:	680b      	ldr	r3, [r1, #0]
 8004db6:	1b5b      	subs	r3, r3, r5
 8004db8:	d418      	bmi.n	8004dec <_malloc_r+0x8c>
 8004dba:	2b0b      	cmp	r3, #11
 8004dbc:	d90f      	bls.n	8004dde <_malloc_r+0x7e>
 8004dbe:	600b      	str	r3, [r1, #0]
 8004dc0:	50cd      	str	r5, [r1, r3]
 8004dc2:	18cc      	adds	r4, r1, r3
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f85c 	bl	8004e82 <__malloc_unlock>
 8004dca:	f104 000b 	add.w	r0, r4, #11
 8004dce:	1d23      	adds	r3, r4, #4
 8004dd0:	f020 0007 	bic.w	r0, r0, #7
 8004dd4:	1ac3      	subs	r3, r0, r3
 8004dd6:	d0d3      	beq.n	8004d80 <_malloc_r+0x20>
 8004dd8:	425a      	negs	r2, r3
 8004dda:	50e2      	str	r2, [r4, r3]
 8004ddc:	e7d0      	b.n	8004d80 <_malloc_r+0x20>
 8004dde:	428c      	cmp	r4, r1
 8004de0:	684b      	ldr	r3, [r1, #4]
 8004de2:	bf16      	itet	ne
 8004de4:	6063      	strne	r3, [r4, #4]
 8004de6:	6013      	streq	r3, [r2, #0]
 8004de8:	460c      	movne	r4, r1
 8004dea:	e7eb      	b.n	8004dc4 <_malloc_r+0x64>
 8004dec:	460c      	mov	r4, r1
 8004dee:	6849      	ldr	r1, [r1, #4]
 8004df0:	e7cc      	b.n	8004d8c <_malloc_r+0x2c>
 8004df2:	1cc4      	adds	r4, r0, #3
 8004df4:	f024 0403 	bic.w	r4, r4, #3
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d005      	beq.n	8004e08 <_malloc_r+0xa8>
 8004dfc:	1a21      	subs	r1, r4, r0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 f82e 	bl	8004e60 <_sbrk_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d0cf      	beq.n	8004da8 <_malloc_r+0x48>
 8004e08:	6025      	str	r5, [r4, #0]
 8004e0a:	e7db      	b.n	8004dc4 <_malloc_r+0x64>
 8004e0c:	200000c0 	.word	0x200000c0
 8004e10:	200000c4 	.word	0x200000c4

08004e14 <_realloc_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	4607      	mov	r7, r0
 8004e18:	4614      	mov	r4, r2
 8004e1a:	460e      	mov	r6, r1
 8004e1c:	b921      	cbnz	r1, 8004e28 <_realloc_r+0x14>
 8004e1e:	4611      	mov	r1, r2
 8004e20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e24:	f7ff bf9c 	b.w	8004d60 <_malloc_r>
 8004e28:	b922      	cbnz	r2, 8004e34 <_realloc_r+0x20>
 8004e2a:	f7ff ff4b 	bl	8004cc4 <_free_r>
 8004e2e:	4625      	mov	r5, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e34:	f000 f826 	bl	8004e84 <_malloc_usable_size_r>
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d20f      	bcs.n	8004e5c <_realloc_r+0x48>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f7ff ff8e 	bl	8004d60 <_malloc_r>
 8004e44:	4605      	mov	r5, r0
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d0f2      	beq.n	8004e30 <_realloc_r+0x1c>
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	f7ff ff15 	bl	8004c7c <memcpy>
 8004e52:	4631      	mov	r1, r6
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff35 	bl	8004cc4 <_free_r>
 8004e5a:	e7e9      	b.n	8004e30 <_realloc_r+0x1c>
 8004e5c:	4635      	mov	r5, r6
 8004e5e:	e7e7      	b.n	8004e30 <_realloc_r+0x1c>

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4c06      	ldr	r4, [pc, #24]	; (8004e7c <_sbrk_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4605      	mov	r5, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	f7fc fcb8 	bl	80017e0 <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20000244 	.word	0x20000244

08004e80 <__malloc_lock>:
 8004e80:	4770      	bx	lr

08004e82 <__malloc_unlock>:
 8004e82:	4770      	bx	lr

08004e84 <_malloc_usable_size_r>:
 8004e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e88:	1f18      	subs	r0, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfbc      	itt	lt
 8004e8e:	580b      	ldrlt	r3, [r1, r0]
 8004e90:	18c0      	addlt	r0, r0, r3
 8004e92:	4770      	bx	lr

08004e94 <_init>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_fini>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr
