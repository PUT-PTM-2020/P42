
jajuzniewiemjaktonazywac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800369c  0800369c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a4  080036a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080036b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080036b8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007975  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012b3  00000000  00000000  000279b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  00028c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  00029388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f29c  00000000  00000000  00029a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fb4  00000000  00000000  00048cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdb65  00000000  00000000  0004fc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d7d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  0010d850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800366c 	.word	0x0800366c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800366c 	.word	0x0800366c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd25 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f839 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8cf 	bl	8000678 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f89f 	bl	800061c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
RDA5807M_init(&hi2c1);
 80004de:	4819      	ldr	r0, [pc, #100]	; (8000544 <main+0x7c>)
 80004e0:	f000 f9fe 	bl	80008e0 <RDA5807M_init>
RDA5807M_setFreq(&hi2c1,1068);
 80004e4:	f240 412c 	movw	r1, #1068	; 0x42c
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <main+0x7c>)
 80004ea:	f000 fc00 	bl	8000cee <RDA5807M_setFreq>
RDA5807M_setVolume(&hi2c1,16);
 80004ee:	2110      	movs	r1, #16
 80004f0:	4814      	ldr	r0, [pc, #80]	; (8000544 <main+0x7c>)
 80004f2:	f000 fbaf 	bl	8000c54 <RDA5807M_setVolume>
int i=869;
 80004f6:	f240 3365 	movw	r3, #869	; 0x365
 80004fa:	607b      	str	r3, [r7, #4]
int glosnosc=10;
 80004fc:	230a      	movs	r3, #10
 80004fe:	603b      	str	r3, [r7, #0]
int flaga_glos=1;
 8000500:	2301      	movs	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
int guzik = 1; //-1 lewy, 0 nic, 1 prawy; zamiast zmiennych bedzie to obslugiwane przez dwa przerwania
 8000504:	2301      	movs	r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //ustawianie glosnosci
	  if(flaga_glos==1){
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d107      	bne.n	800051e <main+0x56>
		  RDA5807M_setVolume(&hi2c1,glosnosc);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4619      	mov	r1, r3
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x7c>)
 8000516:	f000 fb9d 	bl	8000c54 <RDA5807M_setVolume>
		  flaga_glos=0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	  }
	  //ten fragment bedzie w przerwaniach od guzikow
	  //guzik w prawo
	  if(guzik == 1){
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d105      	bne.n	8000530 <main+0x68>
		  guzik = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
		  RDA5807M_seek(&hi2c1,1);
 8000528:	2101      	movs	r1, #1
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <main+0x7c>)
 800052c:	f000 fb53 	bl	8000bd6 <RDA5807M_seek>
	  }
	  if(guzik == -1){
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000536:	d1e7      	bne.n	8000508 <main+0x40>
		  RDA5807M_seek(&hi2c1,0);
 8000538:	2100      	movs	r1, #0
 800053a:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x7c>)
 800053c:	f000 fb4b 	bl	8000bd6 <RDA5807M_seek>
	  if(flaga_glos==1){
 8000540:	e7e2      	b.n	8000508 <main+0x40>
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f880 	bl	800365c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	; 0xa8
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fbd3 	bl	8002d78 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f8a0 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe2c 	bl	8003258 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f889 	bl	800071c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f000 ff6b 	bl	8001534 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f85a 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0x9c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <MX_GPIO_Init+0x9c>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0xa0>)
 80006ea:	f000 ff09 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xa0>)
 8000708:	f000 fd60 	bl	80011cc <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020c00 	.word	0x40020c00

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <__NVIC_SystemReset+0x20>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800073c:	4903      	ldr	r1, [pc, #12]	; (800074c <__NVIC_SystemReset+0x20>)
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_SystemReset+0x24>)
 8000740:	4313      	orrs	r3, r2
 8000742:	60cb      	str	r3, [r1, #12]
 8000744:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <__NVIC_SystemReset+0x1c>
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	05fa0004 	.word	0x05fa0004

08000754 <RDA5807M_revertBytes>:
#include "rda5807m.h"

uint8_t buf1[64];
uint8_t buf2[64];

void RDA5807M_revertBytes(uint8_t *buf, uint8_t cnt){
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	while(cnt > 1){
 8000760:	e010      	b.n	8000784 <RDA5807M_revertBytes+0x30>
		tmp = *(buf + 1);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	73fb      	strb	r3, [r7, #15]
		*(buf + 1) = *buf;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	701a      	strb	r2, [r3, #0]
		*buf = tmp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	701a      	strb	r2, [r3, #0]
		buf += 2;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3302      	adds	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
		cnt -= 2;
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	3b02      	subs	r3, #2
 8000782:	70fb      	strb	r3, [r7, #3]
	while(cnt > 1){
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d8eb      	bhi.n	8000762 <RDA5807M_revertBytes+0xe>
	}
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <RDA5807M_write>:

void RDA5807M_write(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af04      	add	r7, sp, #16
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	461a      	mov	r2, r3
 80007a4:	460b      	mov	r3, r1
 80007a6:	72fb      	strb	r3, [r7, #11]
 80007a8:	4613      	mov	r3, r2
 80007aa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80007ac:	7abb      	ldrb	r3, [r7, #10]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ffcd 	bl	8000754 <RDA5807M_revertBytes>

	ret = HAL_I2C_Mem_Write(I2Cx, RDA5807M_Rand_Address << 1u, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 80007ba:	7afb      	ldrb	r3, [r7, #11]
 80007bc:	b299      	uxth	r1, r3
 80007be:	7abb      	ldrb	r3, [r7, #10]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	9202      	str	r2, [sp, #8]
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	460a      	mov	r2, r1
 80007d6:	2122      	movs	r1, #34	; 0x22
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f001 fb07 	bl	8001dec <HAL_I2C_Mem_Write>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <RDA5807M_write+0x5c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <RDA5807M_write+0x74>)
 80007f0:	f000 fe86 	bl	8001500 <HAL_GPIO_WritePin>
		}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80007f4:	7abb      	ldrb	r3, [r7, #10]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffa9 	bl	8000754 <RDA5807M_revertBytes>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40020c00 	.word	0x40020c00

08000810 <RDA5807M_writeRegister>:

void RDA5807M_writeRegister(I2C_HandleTypeDef *I2Cx, uint16_t *buf, uint8_t RegNum){
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4619      	mov	r1, r3
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f7ff ff94 	bl	8000754 <RDA5807M_revertBytes>
	ret = HAL_I2C_Master_Transmit(I2Cx, (uint16_t) RDA5807M_Seq_Address << 1, (uint8_t *) buf, RegNum << 1, 1000);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	b29b      	uxth	r3, r3
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b29a      	uxth	r2, r3
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4613      	mov	r3, r2
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	2120      	movs	r1, #32
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f000 ffaf 	bl	80017a4 <HAL_I2C_Master_Transmit>
 8000846:	4603      	mov	r3, r0
 8000848:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d005      	beq.n	800085c <RDA5807M_writeRegister+0x4c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <RDA5807M_writeRegister+0x64>)
 8000858:	f000 fe52 	bl	8001500 <HAL_GPIO_WritePin>
	}
	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4619      	mov	r1, r3
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f7ff ff75 	bl	8000754 <RDA5807M_revertBytes>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <RDA5807M_read>:

void RDA5807M_read(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af04      	add	r7, sp, #16
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	461a      	mov	r2, r3
 8000884:	460b      	mov	r3, r1
 8000886:	72fb      	strb	r3, [r7, #11]
 8000888:	4613      	mov	r3, r2
 800088a:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	b299      	uxth	r1, r3
 8000890:	7abb      	ldrb	r3, [r7, #10]
 8000892:	b29b      	uxth	r3, r3
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	b29b      	uxth	r3, r3
 8000898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089c:	9202      	str	r2, [sp, #8]
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	460a      	mov	r2, r1
 80008a8:	2122      	movs	r1, #34	; 0x22
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f001 fb98 	bl	8001fe0 <HAL_I2C_Mem_Read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	75fb      	strb	r3, [r7, #23]

	if(ret != HAL_OK){
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d005      	beq.n	80008c6 <RDA5807M_read+0x4e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <RDA5807M_read+0x64>)
 80008c2:	f000 fe1d 	bl	8001500 <HAL_GPIO_WritePin>
	}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80008c6:	7abb      	ldrb	r3, [r7, #10]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff40 	bl	8000754 <RDA5807M_revertBytes>
}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40020c00 	.word	0x40020c00

080008e0 <RDA5807M_init>:

void RDA5807M_init(I2C_HandleTypeDef *I2Cx){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af04      	add	r7, sp, #16
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {0, 0};
 80008e8:	2300      	movs	r3, #0
 80008ea:	723b      	strb	r3, [r7, #8]
 80008ec:	2300      	movs	r3, #0
 80008ee:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef ret;

	//TODO: czy to konieczne
	//nie wiem
	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, 1000);
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	2200      	movs	r2, #0
 8000904:	2122      	movs	r1, #34	; 0x22
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f001 fb6a 	bl	8001fe0 <HAL_I2C_Mem_Read>
 800090c:	4603      	mov	r3, r0
 800090e:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8000910:	7afb      	ldrb	r3, [r7, #11]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <RDA5807M_init+0x3c>
 8000916:	7a3b      	ldrb	r3, [r7, #8]
 8000918:	2b58      	cmp	r3, #88	; 0x58
 800091a:	d005      	beq.n	8000928 <RDA5807M_init+0x48>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	483d      	ldr	r0, [pc, #244]	; (8000a18 <RDA5807M_init+0x138>)
 8000924:	f000 fdec 	bl	8001500 <HAL_GPIO_WritePin>
	}

	//TODO: czy to konieczne, byc moze wystarczy tylko raz sprawdzac
	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 1, 1000);
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2301      	movs	r3, #1
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	2200      	movs	r2, #0
 800093c:	2122      	movs	r1, #34	; 0x22
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f001 fb4e 	bl	8001fe0 <HAL_I2C_Mem_Read>
 8000944:	4603      	mov	r3, r0
 8000946:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <RDA5807M_init+0x74>
 800094e:	7a3b      	ldrb	r3, [r7, #8]
 8000950:	2b58      	cmp	r3, #88	; 0x58
 8000952:	d007      	beq.n	8000964 <RDA5807M_init+0x84>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	482f      	ldr	r0, [pc, #188]	; (8000a18 <RDA5807M_init+0x138>)
 800095c:	f000 fdd0 	bl	8001500 <HAL_GPIO_WritePin>


		NVIC_SystemReset(); //jak się nagle rozpimpasi całe te, to przez te linijke
 8000960:	f7ff fee4 	bl	800072c <__NVIC_SystemReset>

	}

	for(int i = 0; i < 64; i++){
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e00c      	b.n	8000984 <RDA5807M_init+0xa4>
		buf1[i] = 0;
 800096a:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <RDA5807M_init+0x13c>)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
		buf2[i] = 0;
 8000974:	4a2a      	ldr	r2, [pc, #168]	; (8000a20 <RDA5807M_init+0x140>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 64; i++){
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b3f      	cmp	r3, #63	; 0x3f
 8000988:	ddef      	ble.n	800096a <RDA5807M_init+0x8a>
	}

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf2, 64, 1000);
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <RDA5807M_init+0x140>)
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	2200      	movs	r2, #0
 800099c:	2122      	movs	r1, #34	; 0x22
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f001 fb1e 	bl	8001fe0 <HAL_I2C_Mem_Read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <RDA5807M_init+0xd4>
 80009ae:	7a3b      	ldrb	r3, [r7, #8]
 80009b0:	2b58      	cmp	r3, #88	; 0x58
 80009b2:	d005      	beq.n	80009c0 <RDA5807M_init+0xe0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <RDA5807M_init+0x138>)
 80009bc:	f000 fda0 	bl	8001500 <HAL_GPIO_WritePin>
	}
	ret = HAL_I2C_Master_Receive(I2Cx, RDA5807M_Seq_Address << 1, buf1, 64, 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <RDA5807M_init+0x13c>)
 80009ca:	2120      	movs	r1, #32
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 ffe7 	bl	80019a0 <HAL_I2C_Master_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <RDA5807M_init+0x102>
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	2b58      	cmp	r3, #88	; 0x58
 80009e0:	d005      	beq.n	80009ee <RDA5807M_init+0x10e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <RDA5807M_init+0x138>)
 80009ea:	f000 fd89 	bl	8001500 <HAL_GPIO_WritePin>
	}


	RDA5807M_softReset(I2Cx);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 f818 	bl	8000a24 <RDA5807M_softReset>
	RDA5807M_resetSettings(I2Cx);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f83b 	bl	8000a70 <RDA5807M_resetSettings>

	RDA5807M_seek(I2Cx, 1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ea 	bl	8000bd6 <RDA5807M_seek>
	while(RDA5807M_get_SeekReadyFlag(I2Cx));
 8000a02:	bf00      	nop
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f912 	bl	8000c2e <RDA5807M_get_SeekReadyFlag>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f9      	bne.n	8000a04 <RDA5807M_init+0x124>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	2000007c 	.word	0x2000007c
 8000a20:	200000bc 	.word	0x200000bc

08000a24 <RDA5807M_softReset>:

void RDA5807M_softReset(I2C_HandleTypeDef *I2Cx){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	Reg02h r02;
	r02.Enable = 1;
 8000a2c:	7b3b      	ldrb	r3, [r7, #12]
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 1;
 8000a34:	7b3b      	ldrb	r3, [r7, #12]
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	2301      	movs	r3, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fea7 	bl	8000798 <RDA5807M_write>
	r02.Enable = 1;
 8000a4a:	7b3b      	ldrb	r3, [r7, #12]
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 0;
 8000a52:	7b3b      	ldrb	r3, [r7, #12]
 8000a54:	f36f 0341 	bfc	r3, #1, #1
 8000a58:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 8000a5a:	f107 020c 	add.w	r2, r7, #12
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2102      	movs	r1, #2
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fe98 	bl	8000798 <RDA5807M_write>

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <RDA5807M_resetSettings>:

void RDA5807M_resetSettings(I2C_HandleTypeDef *I2Cx){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	        Reg05h r05;
	        Reg06h r06;
	        Reg07h r07;
	    } buf;

	buf.r02.Enable 					= 1;
 8000a78:	7b3b      	ldrb	r3, [r7, #12]
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	733b      	strb	r3, [r7, #12]
	buf.r02.Soft_Reset 				= 0;
 8000a80:	7b3b      	ldrb	r3, [r7, #12]
 8000a82:	f36f 0341 	bfc	r3, #1, #1
 8000a86:	733b      	strb	r3, [r7, #12]
	buf.r02.New_Demodulate 			= 1;
 8000a88:	7b3b      	ldrb	r3, [r7, #12]
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	733b      	strb	r3, [r7, #12]
	buf.r02.RDS_Enable 				= 1;
 8000a90:	7b3b      	ldrb	r3, [r7, #12]
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	733b      	strb	r3, [r7, #12]
	buf.r02.CLK_Mode 				= 0;
 8000a98:	7b3b      	ldrb	r3, [r7, #12]
 8000a9a:	f36f 1306 	bfc	r3, #4, #3
 8000a9e:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek_Mode				= 0;
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	f36f 13c7 	bfc	r3, #7, #1
 8000aa6:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek					= 0;
 8000aa8:	7b7b      	ldrb	r3, [r7, #13]
 8000aaa:	f36f 0300 	bfc	r3, #0, #1
 8000aae:	737b      	strb	r3, [r7, #13]
	buf.r02.Seek_Up					= 1;
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Dir_In_Mode		= 0;
 8000ab8:	7b7b      	ldrb	r3, [r7, #13]
 8000aba:	f36f 0382 	bfc	r3, #2, #1
 8000abe:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Non_Calib			= 0;
 8000ac0:	7b7b      	ldrb	r3, [r7, #13]
 8000ac2:	f36f 03c3 	bfc	r3, #3, #1
 8000ac6:	737b      	strb	r3, [r7, #13]
	buf.r02.Bass					= 0;
 8000ac8:	7b7b      	ldrb	r3, [r7, #13]
 8000aca:	f36f 1304 	bfc	r3, #4, #1
 8000ace:	737b      	strb	r3, [r7, #13]
	buf.r02.Mono					= 0;
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	f36f 1345 	bfc	r3, #5, #1
 8000ad6:	737b      	strb	r3, [r7, #13]
	buf.r02.Demute					= 1;
 8000ad8:	7b7b      	ldrb	r3, [r7, #13]
 8000ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ade:	737b      	strb	r3, [r7, #13]
	buf.r02.DHIZ					= 1;
 8000ae0:	7b7b      	ldrb	r3, [r7, #13]
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae6:	737b      	strb	r3, [r7, #13]

	buf.r03.Space					= 0;
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	f36f 0301 	bfc	r3, #0, #2
 8000aee:	73bb      	strb	r3, [r7, #14]
	buf.r03.Band					= 0;
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	f36f 0383 	bfc	r3, #2, #2
 8000af6:	73bb      	strb	r3, [r7, #14]
	buf.r03.Tune					= 1;
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	73bb      	strb	r3, [r7, #14]
	buf.r03.Direct_Mode				= 0;
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	f36f 1345 	bfc	r3, #5, #1
 8000b06:	73bb      	strb	r3, [r7, #14]
	buf.r03.Channel_Select			= 0;
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	f36f 138f 	bfc	r3, #6, #10
 8000b0e:	81fb      	strh	r3, [r7, #14]

	buf.r04.Reserved				= 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	743b      	strb	r3, [r7, #16]
	buf.r04.AFCD					= 0;
 8000b14:	7c7b      	ldrb	r3, [r7, #17]
 8000b16:	f36f 0300 	bfc	r3, #0, #1
 8000b1a:	747b      	strb	r3, [r7, #17]
	buf.r04.Soft_Mute				= 1;
 8000b1c:	7c7b      	ldrb	r3, [r7, #17]
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved2				= 0;
 8000b24:	7c7b      	ldrb	r3, [r7, #17]
 8000b26:	f36f 0382 	bfc	r3, #2, #1
 8000b2a:	747b      	strb	r3, [r7, #17]
	buf.r04.De_emphasis				= 0;
 8000b2c:	7c7b      	ldrb	r3, [r7, #17]
 8000b2e:	f36f 03c3 	bfc	r3, #3, #1
 8000b32:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved3				= 0;
 8000b34:	7c7b      	ldrb	r3, [r7, #17]
 8000b36:	f36f 1307 	bfc	r3, #4, #4
 8000b3a:	747b      	strb	r3, [r7, #17]

	buf.r05.Volume					= 0;
 8000b3c:	7cbb      	ldrb	r3, [r7, #18]
 8000b3e:	f36f 0303 	bfc	r3, #0, #4
 8000b42:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved				= 0;
 8000b44:	7cbb      	ldrb	r3, [r7, #18]
 8000b46:	f36f 1305 	bfc	r3, #4, #2
 8000b4a:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved2				= 3;
 8000b4c:	7cbb      	ldrb	r3, [r7, #18]
 8000b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b52:	74bb      	strb	r3, [r7, #18]
	buf.r05.Seek_thresh				= 8;
 8000b54:	7cfb      	ldrb	r3, [r7, #19]
 8000b56:	2208      	movs	r2, #8
 8000b58:	f362 0303 	bfi	r3, r2, #0, #4
 8000b5c:	74fb      	strb	r3, [r7, #19]
	buf.r05.Reserved3				= 0;
 8000b5e:	7cfb      	ldrb	r3, [r7, #19]
 8000b60:	f36f 1306 	bfc	r3, #4, #3
 8000b64:	74fb      	strb	r3, [r7, #19]
	buf.r05.INT_Mode				= 1;
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	74fb      	strb	r3, [r7, #19]

	buf.r06.Reserved				= 0;
 8000b6e:	8abb      	ldrh	r3, [r7, #20]
 8000b70:	f36f 030c 	bfc	r3, #0, #13
 8000b74:	82bb      	strh	r3, [r7, #20]
	buf.r06.Open_mode				= 0;
 8000b76:	7d7b      	ldrb	r3, [r7, #21]
 8000b78:	f36f 1346 	bfc	r3, #5, #2
 8000b7c:	757b      	strb	r3, [r7, #21]
	buf.r06.Reserved2				= 0;
 8000b7e:	7d7b      	ldrb	r3, [r7, #21]
 8000b80:	f36f 13c7 	bfc	r3, #7, #1
 8000b84:	757b      	strb	r3, [r7, #21]

	buf.r07.Freq_Mode				= 0;
 8000b86:	7dbb      	ldrb	r3, [r7, #22]
 8000b88:	f36f 0300 	bfc	r3, #0, #1
 8000b8c:	75bb      	strb	r3, [r7, #22]
	buf.r07.Soft_Blend_enable		= 1;
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	2201      	movs	r2, #1
 8000b92:	f362 0386 	bfi	r3, r2, #2, #5
 8000b96:	75fb      	strb	r3, [r7, #23]
	buf.r07.Seek_thresh				= 0;
 8000b98:	7dbb      	ldrb	r3, [r7, #22]
 8000b9a:	f36f 0387 	bfc	r3, #2, #6
 8000b9e:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved				= 0;
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	f36f 0300 	bfc	r3, #0, #1
 8000ba6:	75fb      	strb	r3, [r7, #23]
	buf.r07.Mode_65M_50M			= 1;
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	75fb      	strb	r3, [r7, #23]
	buf.r07.Soft_Blend_thresh		= 16;
 8000bb0:	7dbb      	ldrb	r3, [r7, #22]
 8000bb2:	f36f 0341 	bfc	r3, #1, #1
 8000bb6:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved2				= 0;
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	f36f 13c7 	bfc	r3, #7, #1
 8000bbe:	75fb      	strb	r3, [r7, #23]

	RDA5807M_writeRegister(I2Cx, (uint16_t *) &buf.r02, 6);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2206      	movs	r2, #6
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fe21 	bl	8000810 <RDA5807M_writeRegister>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <RDA5807M_seek>:

void RDA5807M_seek(I2C_HandleTypeDef *I2Cx, uint8_t direction){
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;

	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	2301      	movs	r3, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fe44 	bl	8000878 <RDA5807M_read>

	r02.Seek_Mode	= 1;
 8000bf0:	7b3b      	ldrb	r3, [r7, #12]
 8000bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf6:	733b      	strb	r3, [r7, #12]
	r02.Seek		= 1;
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	737b      	strb	r3, [r7, #13]
	if(direction){
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <RDA5807M_seek+0x3a>
		r02.Seek_Up	= 1;
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	737b      	strb	r3, [r7, #13]
 8000c0e:	e003      	b.n	8000c18 <RDA5807M_seek+0x42>
	}else{
		r02.Seek_Up	= 0;
 8000c10:	7b7b      	ldrb	r3, [r7, #13]
 8000c12:	f36f 0341 	bfc	r3, #1, #1
 8000c16:	737b      	strb	r3, [r7, #13]
	}

	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8000c18:	f107 020c 	add.w	r2, r7, #12
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fdb9 	bl	8000798 <RDA5807M_write>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <RDA5807M_get_SeekReadyFlag>:

uint8_t RDA5807M_get_SeekReadyFlag(I2C_HandleTypeDef *I2Cx){
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 8000c36:	f107 020c 	add.w	r2, r7, #12
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	210a      	movs	r1, #10
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fe1a 	bl	8000878 <RDA5807M_read>

	return r0A.Seek_Tune_Complete;
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <RDA5807M_setVolume>:

void RDA5807M_setVolume(I2C_HandleTypeDef *I2Cx, uint8_t value){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;
	Reg05h r05;
	uint8_t mute;

	if(value) mute = 0;
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <RDA5807M_setVolume+0x18>
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e001      	b.n	8000c70 <RDA5807M_setVolume+0x1c>
	else mute = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]

	if(value > 16) value = 16;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d901      	bls.n	8000c7a <RDA5807M_setVolume+0x26>
 8000c76:	2310      	movs	r3, #16
 8000c78:	70fb      	strb	r3, [r7, #3]

	value--;
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	70fb      	strb	r3, [r7, #3]

	if(!mute){
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d115      	bne.n	8000cb2 <RDA5807M_setVolume+0x5e>
		RDA5807M_read(I2Cx, 0x05, (uint16_t *) &r05, 1);
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fdf2 	bl	8000878 <RDA5807M_read>
		r05.Volume = value;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	7a3b      	ldrb	r3, [r7, #8]
 8000c9e:	f362 0303 	bfi	r3, r2, #0, #4
 8000ca2:	723b      	strb	r3, [r7, #8]
		RDA5807M_write(I2Cx, 0x05, (uint16_t *) &r05, 1);
 8000ca4:	f107 0208 	add.w	r2, r7, #8
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2105      	movs	r1, #5
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fd73 	bl	8000798 <RDA5807M_write>
	}

	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8000cb2:	f107 020c 	add.w	r2, r7, #12
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2102      	movs	r1, #2
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fddc 	bl	8000878 <RDA5807M_read>
	if(mute) r02.Demute = 0;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <RDA5807M_setVolume+0x7c>
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	f36f 1386 	bfc	r3, #6, #1
 8000ccc:	737b      	strb	r3, [r7, #13]
 8000cce:	e003      	b.n	8000cd8 <RDA5807M_setVolume+0x84>
	else r02.Demute = 1;
 8000cd0:	7b7b      	ldrb	r3, [r7, #13]
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd6:	737b      	strb	r3, [r7, #13]
	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8000cd8:	f107 020c 	add.w	r2, r7, #12
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2102      	movs	r1, #2
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fd59 	bl	8000798 <RDA5807M_write>
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <RDA5807M_setFreq>:

void RDA5807M_setFreq(I2C_HandleTypeDef *I2Cx, uint16_t freq){
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	807b      	strh	r3, [r7, #2]
	Reg03h r03;

	if(freq < 870) freq = 870;
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	f240 3265 	movw	r2, #869	; 0x365
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d803      	bhi.n	8000d0c <RDA5807M_setFreq+0x1e>
 8000d04:	f240 3366 	movw	r3, #870	; 0x366
 8000d08:	807b      	strh	r3, [r7, #2]
 8000d0a:	e006      	b.n	8000d1a <RDA5807M_setFreq+0x2c>
	else if(freq > 1080) freq = 1080;
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8000d12:	d902      	bls.n	8000d1a <RDA5807M_setFreq+0x2c>
 8000d14:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d18:	807b      	strh	r3, [r7, #2]

	freq -= 870;
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 8000d20:	807b      	strh	r3, [r7, #2]

	RDA5807M_read(I2Cx, 0x03, (uint16_t *) &r03, 1);
 8000d22:	f107 020c 	add.w	r2, r7, #12
 8000d26:	2301      	movs	r3, #1
 8000d28:	2103      	movs	r1, #3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fda4 	bl	8000878 <RDA5807M_read>
	r03.Channel_Select = freq;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	89bb      	ldrh	r3, [r7, #12]
 8000d3a:	f362 138f 	bfi	r3, r2, #6, #10
 8000d3e:	81bb      	strh	r3, [r7, #12]
	r03.Tune = 1;
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x03, (uint16_t *) &r03, 1);
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	2103      	movs	r1, #3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd21 	bl	8000798 <RDA5807M_write>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_MspInit+0x4c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_I2C_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dee:	23c0      	movs	r3, #192	; 0xc0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <HAL_I2C_MspInit+0x8c>)
 8000e0a:	f000 f9df 	bl	80011cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f894 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SystemInit+0x28>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <SystemInit+0x28>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x28>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd3 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f002 fb8d 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fae5 	bl	80004c8 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f04:	080036ac 	.word	0x080036ac
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f14:	20000100 	.word	0x20000100

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f90d 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff ff06 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f917 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f8ed 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200000fc 	.word	0x200000fc

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200000fc 	.word	0x200000fc

08001000 <__NVIC_SetPriorityGrouping>:
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_SetPriority>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff47 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff5c 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb0 	bl	8001120 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e16b      	b.n	80014c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 815a 	bne.w	80014ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00b      	beq.n	8001226 <HAL_GPIO_Init+0x5a>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	2b11      	cmp	r3, #17
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b12      	cmp	r3, #18
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0xfc>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b12      	cmp	r3, #18
 80012c6:	d123      	bne.n	8001310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80b4 	beq.w	80014ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <HAL_GPIO_Init+0x308>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a5e      	ldr	r2, [pc, #376]	; (80014d4 <HAL_GPIO_Init+0x308>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <HAL_GPIO_Init+0x308>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136e:	4a5a      	ldr	r2, [pc, #360]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a51      	ldr	r2, [pc, #324]	; (80014dc <HAL_GPIO_Init+0x310>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02b      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <HAL_GPIO_Init+0x314>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x222>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x318>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x21e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_GPIO_Init+0x31c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x320>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x324>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x328>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x20a>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00e      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013f2:	2300      	movs	r3, #0
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001436:	4a31      	ldr	r2, [pc, #196]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_GPIO_Init+0x330>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <HAL_GPIO_Init+0x330>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_GPIO_Init+0x330>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	f67f ae90 	bls.w	80011e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c8:	bf00      	nop
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e11f      	b.n	8001786 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fc28 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001598:	f002 f828 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a7b      	ldr	r2, [pc, #492]	; (8001790 <HAL_I2C_Init+0x25c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d807      	bhi.n	80015b8 <HAL_I2C_Init+0x84>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a7a      	ldr	r2, [pc, #488]	; (8001794 <HAL_I2C_Init+0x260>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e006      	b.n	80015c6 <HAL_I2C_Init+0x92>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a77      	ldr	r2, [pc, #476]	; (8001798 <HAL_I2C_Init+0x264>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	bf94      	ite	ls
 80015c0:	2301      	movls	r3, #1
 80015c2:	2300      	movhi	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0db      	b.n	8001786 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a72      	ldr	r2, [pc, #456]	; (800179c <HAL_I2C_Init+0x268>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a64      	ldr	r2, [pc, #400]	; (8001790 <HAL_I2C_Init+0x25c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d802      	bhi.n	8001608 <HAL_I2C_Init+0xd4>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	e009      	b.n	800161c <HAL_I2C_Init+0xe8>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4a63      	ldr	r2, [pc, #396]	; (80017a0 <HAL_I2C_Init+0x26c>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	3301      	adds	r3, #1
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800162e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4956      	ldr	r1, [pc, #344]	; (8001790 <HAL_I2C_Init+0x25c>)
 8001638:	428b      	cmp	r3, r1
 800163a:	d80d      	bhi.n	8001658 <HAL_I2C_Init+0x124>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e59      	subs	r1, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fbb1 f3f3 	udiv	r3, r1, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b04      	cmp	r3, #4
 8001652:	bf38      	it	cc
 8001654:	2304      	movcc	r3, #4
 8001656:	e04f      	b.n	80016f8 <HAL_I2C_Init+0x1c4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <HAL_I2C_Init+0x150>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e012      	b.n	80016aa <HAL_I2C_Init+0x176>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e58      	subs	r0, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	0099      	lsls	r1, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Init+0x17e>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e022      	b.n	80016f8 <HAL_I2C_Init+0x1c4>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10e      	bne.n	80016d8 <HAL_I2C_Init+0x1a4>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1e58      	subs	r0, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	440b      	add	r3, r1
 80016c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d6:	e00f      	b.n	80016f8 <HAL_I2C_Init+0x1c4>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	0099      	lsls	r1, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	6809      	ldr	r1, [r1, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6911      	ldr	r1, [r2, #16]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68d2      	ldr	r2, [r2, #12]
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	430b      	orrs	r3, r1
 800173a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	000186a0 	.word	0x000186a0
 8001794:	001e847f 	.word	0x001e847f
 8001798:	003d08ff 	.word	0x003d08ff
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	10624dd3 	.word	0x10624dd3

080017a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	817b      	strh	r3, [r7, #10]
 80017b4:	4613      	mov	r3, r2
 80017b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff fc16 	bl	8000fe8 <HAL_GetTick>
 80017bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	f040 80e0 	bne.w	800198c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2319      	movs	r3, #25
 80017d2:	2201      	movs	r2, #1
 80017d4:	4970      	ldr	r1, [pc, #448]	; (8001998 <HAL_I2C_Master_Transmit+0x1f4>)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f001 f8f0 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0d3      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x50>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e0cc      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d007      	beq.n	800181a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2221      	movs	r2, #33	; 0x21
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2210      	movs	r2, #16
 8001836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	893a      	ldrh	r2, [r7, #8]
 800184a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a50      	ldr	r2, [pc, #320]	; (800199c <HAL_I2C_Master_Transmit+0x1f8>)
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800185c:	8979      	ldrh	r1, [r7, #10]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fde2 	bl	800242c <I2C_MasterRequestWrite>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e08d      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001888:	e066      	b.n	8001958 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f001 f96a 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d107      	bne.n	80018b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06b      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11b      	bne.n	800192c <HAL_I2C_Master_Transmit+0x188>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d017      	beq.n	800192c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	6a39      	ldr	r1, [r7, #32]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f001 f95a 	bl	8002bea <I2C_WaitOnBTFFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00d      	beq.n	8001958 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2b04      	cmp	r3, #4
 8001942:	d107      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001952:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e01a      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d194      	bne.n	800188a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e000      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800198c:	2302      	movs	r3, #2
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	00100002 	.word	0x00100002
 800199c:	ffff0000 	.word	0xffff0000

080019a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	460b      	mov	r3, r1
 80019ae:	817b      	strh	r3, [r7, #10]
 80019b0:	4613      	mov	r3, r2
 80019b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fb18 	bl	8000fe8 <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	f040 820b 	bne.w	8001dde <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2319      	movs	r3, #25
 80019ce:	2201      	movs	r2, #1
 80019d0:	497c      	ldr	r1, [pc, #496]	; (8001bc4 <HAL_I2C_Master_Receive+0x224>)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fff2 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019de:	2302      	movs	r3, #2
 80019e0:	e1fe      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_I2C_Master_Receive+0x50>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e1f7      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d007      	beq.n	8001a16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2222      	movs	r2, #34	; 0x22
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2210      	movs	r2, #16
 8001a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	893a      	ldrh	r2, [r7, #8]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <HAL_I2C_Master_Receive+0x228>)
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a58:	8979      	ldrh	r1, [r7, #10]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fd66 	bl	8002530 <I2C_MasterRequestRead>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1b8      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e18c      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d11b      	bne.n	8001ade <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e16c      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d11b      	bne.n	8001b1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	e14c      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b44:	e138      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	f200 80f1 	bhi.w	8001d32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d123      	bne.n	8001ba0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f001 f885 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e139      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b9e:	e10b      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d14e      	bne.n	8001c46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4906      	ldr	r1, [pc, #24]	; (8001bcc <HAL_I2C_Master_Receive+0x22c>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 ff02 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e10e      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
 8001bc2:	bf00      	nop
 8001bc4:	00100002 	.word	0x00100002
 8001bc8:	ffff0000 	.word	0xffff0000
 8001bcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c44:	e0b8      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4966      	ldr	r1, [pc, #408]	; (8001de8 <HAL_I2C_Master_Receive+0x448>)
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 feb3 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0bf      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	2200      	movs	r2, #0
 8001caa:	494f      	ldr	r1, [pc, #316]	; (8001de8 <HAL_I2C_Master_Receive+0x448>)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fe85 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e091      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d30:	e042      	b.n	8001db8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 ff98 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e04c      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d118      	bne.n	8001db8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f47f aec2 	bne.w	8001b46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
  }
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00010004 	.word	0x00010004

08001dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	817b      	strh	r3, [r7, #10]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	813b      	strh	r3, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e06:	f7ff f8ef 	bl	8000fe8 <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	f040 80d9 	bne.w	8001fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2319      	movs	r3, #25
 8001e20:	2201      	movs	r2, #1
 8001e22:	496d      	ldr	r1, [pc, #436]	; (8001fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fdc9 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0cc      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Mem_Write+0x56>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0c5      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d007      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2221      	movs	r2, #33	; 0x21
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_I2C_Mem_Write+0x1f0>)
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eaa:	88f8      	ldrh	r0, [r7, #6]
 8001eac:	893a      	ldrh	r2, [r7, #8]
 8001eae:	8979      	ldrh	r1, [r7, #10]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4603      	mov	r3, r0
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fc04 	bl	80026c8 <I2C_RequestMemoryWrite>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d052      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e081      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fe4a 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d11b      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x180>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1aa      	bne.n	8001eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fe36 	bl	8002bea <I2C_WaitOnBTFFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d107      	bne.n	8001f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e016      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	00100002 	.word	0x00100002
 8001fdc:	ffff0000 	.word	0xffff0000

08001fe0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	813b      	strh	r3, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7fe fff5 	bl	8000fe8 <HAL_GetTick>
 8001ffe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	f040 8208 	bne.w	800241e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2319      	movs	r3, #25
 8002014:	2201      	movs	r2, #1
 8002016:	497b      	ldr	r1, [pc, #492]	; (8002204 <HAL_I2C_Mem_Read+0x224>)
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fccf 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
 8002026:	e1fb      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_I2C_Mem_Read+0x56>
 8002032:	2302      	movs	r3, #2
 8002034:	e1f4      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d007      	beq.n	800205c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2222      	movs	r2, #34	; 0x22
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_I2C_Mem_Read+0x228>)
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800209e:	88f8      	ldrh	r0, [r7, #6]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	8979      	ldrh	r1, [r7, #10]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fb9e 	bl	80027f0 <I2C_RequestMemoryRead>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1b0      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d113      	bne.n	80020ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e184      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11b      	bne.n	800212e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e164      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	2b02      	cmp	r3, #2
 8002134:	d11b      	bne.n	800216e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	e144      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002184:	e138      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	2b03      	cmp	r3, #3
 800218c:	f200 80f1 	bhi.w	8002372 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b01      	cmp	r3, #1
 8002196:	d123      	bne.n	80021e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fd65 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e139      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021de:	e10b      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d14e      	bne.n	8002286 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	2200      	movs	r2, #0
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <HAL_I2C_Mem_Read+0x22c>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fbe2 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e10e      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
 8002202:	bf00      	nop
 8002204:	00100002 	.word	0x00100002
 8002208:	ffff0000 	.word	0xffff0000
 800220c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002284:	e0b8      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	2200      	movs	r2, #0
 800228e:	4966      	ldr	r1, [pc, #408]	; (8002428 <HAL_I2C_Mem_Read+0x448>)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fb93 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0bf      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	2200      	movs	r2, #0
 80022ea:	494f      	ldr	r1, [pc, #316]	; (8002428 <HAL_I2C_Mem_Read+0x448>)
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fb65 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e091      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002370:	e042      	b.n	80023f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fc78 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e04c      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d118      	bne.n	80023f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f47f aec2 	bne.w	8002186 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	00010004 	.word	0x00010004

0800242c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	460b      	mov	r3, r1
 800243a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d006      	beq.n	8002456 <I2C_MasterRequestWrite+0x2a>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d003      	beq.n	8002456 <I2C_MasterRequestWrite+0x2a>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002454:	d108      	bne.n	8002468 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e00b      	b.n	8002480 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	2b12      	cmp	r3, #18
 800246e:	d107      	bne.n	8002480 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa95 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00c      	beq.n	80024b2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e035      	b.n	800251e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ba:	d108      	bne.n	80024ce <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ca:	611a      	str	r2, [r3, #16]
 80024cc:	e01b      	b.n	8002506 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	11db      	asrs	r3, r3, #7
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 0306 	and.w	r3, r3, #6
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f063 030f 	orn	r3, r3, #15
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	490f      	ldr	r1, [pc, #60]	; (8002528 <I2C_MasterRequestWrite+0xfc>)
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fabc 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e010      	b.n	800251e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <I2C_MasterRequestWrite+0x100>)
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 faac 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	00010008 	.word	0x00010008
 800252c:	00010002 	.word	0x00010002

08002530 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	460b      	mov	r3, r1
 800253e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d006      	beq.n	800256a <I2C_MasterRequestRead+0x3a>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d003      	beq.n	800256a <I2C_MasterRequestRead+0x3a>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002568:	d108      	bne.n	800257c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e00b      	b.n	8002594 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	2b11      	cmp	r3, #17
 8002582:	d107      	bne.n	8002594 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002592:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa0b 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e078      	b.n	80026b8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ce:	d108      	bne.n	80025e2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e05e      	b.n	80026a0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	11db      	asrs	r3, r3, #7
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0306 	and.w	r3, r3, #6
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f063 030f 	orn	r3, r3, #15
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4930      	ldr	r1, [pc, #192]	; (80026c0 <I2C_MasterRequestRead+0x190>)
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fa32 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e053      	b.n	80026b8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4929      	ldr	r1, [pc, #164]	; (80026c4 <I2C_MasterRequestRead+0x194>)
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fa22 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e043      	b.n	80026b8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002654:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9aa 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e017      	b.n	80026b8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	11db      	asrs	r3, r3, #7
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0306 	and.w	r3, r3, #6
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f063 030e 	orn	r3, r3, #14
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <I2C_MasterRequestRead+0x194>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f9df 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	00010008 	.word	0x00010008
 80026c4:	00010002 	.word	0x00010002

080026c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f95c 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e05f      	b.n	80027e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	492c      	ldr	r1, [pc, #176]	; (80027ec <I2C_RequestMemoryWrite+0x124>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f995 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e04c      	b.n	80027e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f9ff 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00d      	beq.n	800278c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b04      	cmp	r3, #4
 8002776:	d107      	bne.n	8002788 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e02b      	b.n	80027e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002792:	893b      	ldrh	r3, [r7, #8]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]
 800279c:	e021      	b.n	80027e2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800279e:	893b      	ldrh	r3, [r7, #8]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f9d9 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e005      	b.n	80027e4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010002 	.word	0x00010002

080027f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2200      	movs	r2, #0
 8002832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f8c0 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0a9      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800286a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	4951      	ldr	r1, [pc, #324]	; (80029b8 <I2C_RequestMemoryRead+0x1c8>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8f9 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e096      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	6a39      	ldr	r1, [r7, #32]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f963 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e075      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]
 80028d4:	e021      	b.n	800291a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	6a39      	ldr	r1, [r7, #32]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f93d 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e04f      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f922 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e034      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2200      	movs	r2, #0
 800295e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f82a 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e013      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002988:	897b      	ldrh	r3, [r7, #10]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <I2C_RequestMemoryRead+0x1c8>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f863 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	00010002 	.word	0x00010002

080029bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	e025      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d021      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fb07 	bl	8000fe8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e023      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10d      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	e00c      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d0b6      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a78:	e051      	b.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d123      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e046      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d021      	beq.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7fe fa85 	bl	8000fe8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e020      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10c      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e00b      	b.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d18d      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b74:	e02d      	b.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f8ce 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e02d      	b.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d021      	beq.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7fe fa2b 	bl	8000fe8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d1ca      	bne.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf6:	e02d      	b.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f88d 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e02d      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d021      	beq.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c10:	f7fe f9ea 	bl	8000fe8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d302      	bcc.n	8002c26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d1ca      	bne.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c78:	e042      	b.n	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d119      	bne.n	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0210 	mvn.w	r2, #16
 8002c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e029      	b.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbc:	f7fe f994 	bl	8000fe8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d1b5      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d11b      	bne.n	8002d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e25b      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	4ba3      	ldr	r3, [pc, #652]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4ba0      	ldr	r3, [pc, #640]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b9d      	ldr	r3, [pc, #628]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b99      	ldr	r3, [pc, #612]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e236      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a90      	ldr	r2, [pc, #576]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a8a      	ldr	r2, [pc, #552]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a87      	ldr	r2, [pc, #540]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b84      	ldr	r3, [pc, #528]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe f8da 	bl	8000fe8 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe f8d6 	bl	8000fe8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1fb      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe f8c6 	bl	8000fe8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe f8c2 	bl	8000fe8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1e7      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1bb      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4952      	ldr	r1, [pc, #328]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe f87b 	bl	8000fe8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f877 	bl	8000fe8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e19c      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4940      	ldr	r1, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f85a 	bl	8000fe8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe f856 	bl	8000fe8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e17b      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d030      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe f83a 	bl	8000fe8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe f836 	bl	8000fe8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e15b      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e015      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f823 	bl	8000fe8 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe f81f 	bl	8000fe8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e144      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a0 	beq.w	8003112 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d121      	bne.n	8003052 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd ffe5 	bl	8000fe8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e011      	b.n	8003046 <HAL_RCC_OscConfig+0x2ce>
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	42470000 	.word	0x42470000
 800302c:	42470e80 	.word	0x42470e80
 8003030:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fd ffd8 	bl	8000fe8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0fd      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x4d4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x2f0>
 800305a:	4b7d      	ldr	r3, [pc, #500]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a7c      	ldr	r2, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x312>
 8003070:	4b77      	ldr	r3, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a76      	ldr	r2, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	4b74      	ldr	r3, [pc, #464]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a73      	ldr	r2, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x32a>
 800308a:	4b71      	ldr	r3, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a70      	ldr	r2, [pc, #448]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fd ff9d 	bl	8000fe8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fd ff99 	bl	8000fe8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0bc      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x33a>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fd ff87 	bl	8000fe8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fd ff83 	bl	8000fe8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0a6      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a51      	ldr	r2, [pc, #324]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8092 	beq.w	8003240 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d05c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d141      	bne.n	80031b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_RCC_OscConfig+0x4dc>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fd ff57 	bl	8000fe8 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313e:	f7fd ff53 	bl	8000fe8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e078      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003150:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	019b      	lsls	r3, r3, #6
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	3b01      	subs	r3, #1
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	4933      	ldr	r1, [pc, #204]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x4dc>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd ff2c 	bl	8000fe8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd ff28 	bl	8000fe8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e04d      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x41c>
 80031b2:	e045      	b.n	8003240 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_RCC_OscConfig+0x4dc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fd ff15 	bl	8000fe8 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fd ff11 	bl	8000fe8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e036      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x44a>
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e029      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_RCC_OscConfig+0x4d8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d115      	bne.n	800323c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d10d      	bne.n	800323c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000
 8003250:	40023800 	.word	0x40023800
 8003254:	42470060 	.word	0x42470060

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fd fe4e 	bl	8000fe8 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fd fe4a 	bl	8000fe8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4601      	mov	r1, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	fa21 f303 	lsr.w	r3, r1, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fdae 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	08003684 	.word	0x08003684
 800341c:	20000000 	.word	0x20000000
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d007      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x32>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d008      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x38>
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 80b4 	bne.w	80035b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003452:	60bb      	str	r3, [r7, #8]
       break;
 8003454:	e0b3      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003458:	60bb      	str	r3, [r7, #8]
      break;
 800345a:	e0b0      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003466:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d04a      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	ea03 0501 	and.w	r5, r3, r1
 8003488:	ea04 0602 	and.w	r6, r4, r2
 800348c:	4629      	mov	r1, r5
 800348e:	4632      	mov	r2, r6
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	f04f 0400 	mov.w	r4, #0
 8003498:	0154      	lsls	r4, r2, #5
 800349a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800349e:	014b      	lsls	r3, r1, #5
 80034a0:	4619      	mov	r1, r3
 80034a2:	4622      	mov	r2, r4
 80034a4:	1b49      	subs	r1, r1, r5
 80034a6:	eb62 0206 	sbc.w	r2, r2, r6
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	0194      	lsls	r4, r2, #6
 80034b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034b8:	018b      	lsls	r3, r1, #6
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	eb64 0402 	sbc.w	r4, r4, r2
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	00e2      	lsls	r2, r4, #3
 80034ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034ce:	00d9      	lsls	r1, r3, #3
 80034d0:	460b      	mov	r3, r1
 80034d2:	4614      	mov	r4, r2
 80034d4:	195b      	adds	r3, r3, r5
 80034d6:	eb44 0406 	adc.w	r4, r4, r6
 80034da:	f04f 0100 	mov.w	r1, #0
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	0262      	lsls	r2, r4, #9
 80034e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034e8:	0259      	lsls	r1, r3, #9
 80034ea:	460b      	mov	r3, r1
 80034ec:	4614      	mov	r4, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	4621      	mov	r1, r4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f04f 0400 	mov.w	r4, #0
 80034f8:	461a      	mov	r2, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	f7fc fe64 	bl	80001c8 <__aeabi_uldivmod>
 8003500:	4603      	mov	r3, r0
 8003502:	460c      	mov	r4, r1
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e049      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	ea03 0501 	and.w	r5, r3, r1
 800351e:	ea04 0602 	and.w	r6, r4, r2
 8003522:	4629      	mov	r1, r5
 8003524:	4632      	mov	r2, r6
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	0154      	lsls	r4, r2, #5
 8003530:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003534:	014b      	lsls	r3, r1, #5
 8003536:	4619      	mov	r1, r3
 8003538:	4622      	mov	r2, r4
 800353a:	1b49      	subs	r1, r1, r5
 800353c:	eb62 0206 	sbc.w	r2, r2, r6
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	f04f 0400 	mov.w	r4, #0
 8003548:	0194      	lsls	r4, r2, #6
 800354a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800354e:	018b      	lsls	r3, r1, #6
 8003550:	1a5b      	subs	r3, r3, r1
 8003552:	eb64 0402 	sbc.w	r4, r4, r2
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003564:	00d9      	lsls	r1, r3, #3
 8003566:	460b      	mov	r3, r1
 8003568:	4614      	mov	r4, r2
 800356a:	195b      	adds	r3, r3, r5
 800356c:	eb44 0406 	adc.w	r4, r4, r6
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	02a2      	lsls	r2, r4, #10
 800357a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800357e:	0299      	lsls	r1, r3, #10
 8003580:	460b      	mov	r3, r1
 8003582:	4614      	mov	r4, r2
 8003584:	4618      	mov	r0, r3
 8003586:	4621      	mov	r1, r4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	461a      	mov	r2, r3
 8003590:	4623      	mov	r3, r4
 8003592:	f7fc fe19 	bl	80001c8 <__aeabi_uldivmod>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	60bb      	str	r3, [r7, #8]
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ba:	60bb      	str	r3, [r7, #8]
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	68bb      	ldr	r3, [r7, #8]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	00f42400 	.word	0x00f42400
 80035d0:	007a1200 	.word	0x007a1200

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000000 	.word	0x20000000

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f0:	f7ff fff0 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f4:	4601      	mov	r1, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0a9b      	lsrs	r3, r3, #10
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4a03      	ldr	r2, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	08003694 	.word	0x08003694

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	4e0d      	ldr	r6, [pc, #52]	; (800364c <__libc_init_array+0x38>)
 8003618:	4c0d      	ldr	r4, [pc, #52]	; (8003650 <__libc_init_array+0x3c>)
 800361a:	1ba4      	subs	r4, r4, r6
 800361c:	10a4      	asrs	r4, r4, #2
 800361e:	2500      	movs	r5, #0
 8003620:	42a5      	cmp	r5, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	4e0b      	ldr	r6, [pc, #44]	; (8003654 <__libc_init_array+0x40>)
 8003626:	4c0c      	ldr	r4, [pc, #48]	; (8003658 <__libc_init_array+0x44>)
 8003628:	f000 f820 	bl	800366c <_init>
 800362c:	1ba4      	subs	r4, r4, r6
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	2500      	movs	r5, #0
 8003632:	42a5      	cmp	r5, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363c:	4798      	blx	r3
 800363e:	3501      	adds	r5, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003646:	4798      	blx	r3
 8003648:	3501      	adds	r5, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	080036a4 	.word	0x080036a4
 8003650:	080036a4 	.word	0x080036a4
 8003654:	080036a4 	.word	0x080036a4
 8003658:	080036a8 	.word	0x080036a8

0800365c <memset>:
 800365c:	4402      	add	r2, r0
 800365e:	4603      	mov	r3, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	d100      	bne.n	8003666 <memset+0xa>
 8003664:	4770      	bx	lr
 8003666:	f803 1b01 	strb.w	r1, [r3], #1
 800366a:	e7f9      	b.n	8003660 <memset+0x4>

0800366c <_init>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr

08003678 <_fini>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr
