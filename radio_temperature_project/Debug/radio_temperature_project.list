
radio_temperature_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e68  08005e68  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e70  08005e70  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000084  08005efc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005efc  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9d5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000205f  00000000  00000000  0002fa89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00031ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021be1  00000000  00000000  000335c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afa5  00000000  00000000  000551a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cab85  00000000  00000000  00060146  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012accb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  0012ad48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dd4 	.word	0x08005dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005dd4 	.word	0x08005dd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <Set_Pin_Output>:
 *      Author: mikolaj
 */

#include "ds18b20.h"

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f001 ff20 	bl	80027ac <HAL_GPIO_Init>
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 ff02 	bl	80027ac <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DS18B20_Start>:

uint8_t DS18B20_Start(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80009ba:	2102      	movs	r1, #2
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <DS18B20_Start+0x5c>)
 80009be:	f7ff ffbb 	bl	8000938 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2102      	movs	r1, #2
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <DS18B20_Start+0x5c>)
 80009c8:	f002 f8a2 	bl	8002b10 <HAL_GPIO_WritePin>
	delay(480);
 80009cc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80009d0:	f000 fb0c 	bl	8000fec <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80009d4:	2102      	movs	r1, #2
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <DS18B20_Start+0x5c>)
 80009d8:	f7ff ffcc 	bl	8000974 <Set_Pin_Input>
	delay(80);
 80009dc:	2050      	movs	r0, #80	; 0x50
 80009de:	f000 fb05 	bl	8000fec <delay>

	if(!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))) Response = 1;
 80009e2:	2102      	movs	r1, #2
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <DS18B20_Start+0x5c>)
 80009e6:	f002 f87b 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <DS18B20_Start+0x46>
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <DS18B20_Start+0x4a>
	else Response = -1;
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	71fb      	strb	r3, [r7, #7]

	delay(400);
 80009fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009fe:	f000 faf5 	bl	8000fec <delay>

	return Response;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40020000 	.word	0x40020000

08000a10 <DS18B20_Write>:

void DS18B20_Write(uint8_t data){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	481d      	ldr	r0, [pc, #116]	; (8000a94 <DS18B20_Write+0x84>)
 8000a1e:	f7ff ff8b 	bl	8000938 <Set_Pin_Output>

	for(int i=0; i<8; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	e02e      	b.n	8000a86 <DS18B20_Write+0x76>
		if((data & (1<<i))!=0){
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	fa42 f303 	asr.w	r3, r2, r3
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <DS18B20_Write+0x50>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4816      	ldr	r0, [pc, #88]	; (8000a94 <DS18B20_Write+0x84>)
 8000a3c:	f7ff ff7c 	bl	8000938 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <DS18B20_Write+0x84>)
 8000a46:	f002 f863 	bl	8002b10 <HAL_GPIO_WritePin>
			delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 face 	bl	8000fec <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000a50:	2102      	movs	r1, #2
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <DS18B20_Write+0x84>)
 8000a54:	f7ff ff8e 	bl	8000974 <Set_Pin_Input>
			delay(60);
 8000a58:	203c      	movs	r0, #60	; 0x3c
 8000a5a:	f000 fac7 	bl	8000fec <delay>
 8000a5e:	e00f      	b.n	8000a80 <DS18B20_Write+0x70>
		}
		else{
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000a60:	2102      	movs	r1, #2
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <DS18B20_Write+0x84>)
 8000a64:	f7ff ff68 	bl	8000938 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <DS18B20_Write+0x84>)
 8000a6e:	f002 f84f 	bl	8002b10 <HAL_GPIO_WritePin>
			delay(60);
 8000a72:	203c      	movs	r0, #60	; 0x3c
 8000a74:	f000 faba 	bl	8000fec <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <DS18B20_Write+0x84>)
 8000a7c:	f7ff ff7a 	bl	8000974 <Set_Pin_Input>
	for(int i=0; i<8; i++){
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	ddcd      	ble.n	8000a28 <DS18B20_Write+0x18>
		}
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020000 	.word	0x40020000

08000a98 <DS18B20_Read>:

uint8_t DS18B20_Read(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	481a      	ldr	r0, [pc, #104]	; (8000b10 <DS18B20_Read+0x78>)
 8000aa6:	f7ff ff65 	bl	8000974 <Set_Pin_Input>

	for(int i=0; i<8; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	e026      	b.n	8000afe <DS18B20_Read+0x66>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <DS18B20_Read+0x78>)
 8000ab4:	f7ff ff40 	bl	8000938 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	4814      	ldr	r0, [pc, #80]	; (8000b10 <DS18B20_Read+0x78>)
 8000abe:	f002 f827 	bl	8002b10 <HAL_GPIO_WritePin>
		delay(2);
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f000 fa92 	bl	8000fec <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4811      	ldr	r0, [pc, #68]	; (8000b10 <DS18B20_Read+0x78>)
 8000acc:	f7ff ff52 	bl	8000974 <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)){
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <DS18B20_Read+0x78>)
 8000ad4:	f002 f804 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <DS18B20_Read+0x5a>
			value |= 1 << i;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8000af2:	203c      	movs	r0, #60	; 0x3c
 8000af4:	f000 fa7a 	bl	8000fec <delay>
	for(int i=0; i<8; i++){
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	ddd5      	ble.n	8000ab0 <DS18B20_Read+0x18>
	}
	return value;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020000 	.word	0x40020000

08000b14 <LCD1602_EnablePulse>:
static uint8_t DisplayControl = 0x0F;
static uint8_t FunctionSet = 0x38;


static void LCD1602_EnablePulse(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LCD1602_EnablePulse+0x38>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LCD1602_EnablePulse+0x3c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	f001 fff4 	bl	8002b10 <HAL_GPIO_WritePin>
	delay(writeTimeConstant);
 8000b28:	230a      	movs	r3, #10
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fa5e 	bl	8000fec <delay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <LCD1602_EnablePulse+0x38>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <LCD1602_EnablePulse+0x3c>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f001 ffe8 	bl	8002b10 <HAL_GPIO_WritePin>
	delay(60);
 8000b40:	203c      	movs	r0, #60	; 0x3c
 8000b42:	f000 fa53 	bl	8000fec <delay>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000a0 	.word	0x200000a0
 8000b50:	200000a6 	.word	0x200000a6

08000b54 <LCD1602_RS>:


static void LCD1602_RS(bool state)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <LCD1602_RS+0x22>
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <LCD1602_RS+0x3c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <LCD1602_RS+0x40>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f001 ffce 	bl	8002b10 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000b74:	e007      	b.n	8000b86 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <LCD1602_RS+0x3c>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LCD1602_RS+0x40>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	f001 ffc5 	bl	8002b10 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000a0 	.word	0x200000a0
 8000b94:	200000a4 	.word	0x200000a4

08000b98 <LCD1602_write>:



static void LCD1602_write(uint8_t byte)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000bb0:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <LCD1602_write+0x1a0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d15a      	bne.n	8000c6e <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000bb8:	4b60      	ldr	r3, [pc, #384]	; (8000d3c <LCD1602_write+0x1a4>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <LCD1602_write+0x1a8>)
 8000bbe:	8819      	ldrh	r1, [r3, #0]
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f001 ffa1 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <LCD1602_write+0x1a4>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <LCD1602_write+0x1ac>)
 8000bd4:	8819      	ldrh	r1, [r3, #0]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f001 ff96 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000be4:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <LCD1602_write+0x1a4>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <LCD1602_write+0x1b0>)
 8000bea:	8819      	ldrh	r1, [r3, #0]
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f001 ff8b 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000bfa:	4b50      	ldr	r3, [pc, #320]	; (8000d3c <LCD1602_write+0x1a4>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <LCD1602_write+0x1b4>)
 8000c00:	8819      	ldrh	r1, [r3, #0]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f001 ff80 	bl	8002b10 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c10:	4b4f      	ldr	r3, [pc, #316]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <LCD1602_write+0x1bc>)
 8000c16:	8819      	ldrh	r1, [r3, #0]
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	f001 ff75 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <LCD1602_write+0x1c0>)
 8000c2c:	8819      	ldrh	r1, [r3, #0]
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	f001 ff6a 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <LCD1602_write+0x1c4>)
 8000c42:	8819      	ldrh	r1, [r3, #0]
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f001 ff5f 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <LCD1602_write+0x1c8>)
 8000c58:	8819      	ldrh	r1, [r3, #0]
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	f001 ff54 	bl	8002b10 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000c68:	f7ff ff54 	bl	8000b14 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000c6c:	e05f      	b.n	8000d2e <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <LCD1602_write+0x1a0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d15b      	bne.n	8000d2e <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <LCD1602_write+0x1bc>)
 8000c7c:	8819      	ldrh	r1, [r3, #0]
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	f001 ff42 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <LCD1602_write+0x1b8>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <LCD1602_write+0x1c0>)
 8000c92:	8819      	ldrh	r1, [r3, #0]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f001 ff37 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <LCD1602_write+0x1b8>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <LCD1602_write+0x1c4>)
 8000ca8:	8819      	ldrh	r1, [r3, #0]
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f001 ff2c 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <LCD1602_write+0x1b8>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <LCD1602_write+0x1c8>)
 8000cbe:	8819      	ldrh	r1, [r3, #0]
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f001 ff21 	bl	8002b10 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000cce:	f7ff ff21 	bl	8000b14 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <LCD1602_write+0x1b8>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <LCD1602_write+0x1bc>)
 8000cd8:	8819      	ldrh	r1, [r3, #0]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f001 ff14 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <LCD1602_write+0x1b8>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <LCD1602_write+0x1c0>)
 8000cee:	8819      	ldrh	r1, [r3, #0]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f001 ff09 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <LCD1602_write+0x1b8>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <LCD1602_write+0x1c4>)
 8000d04:	8819      	ldrh	r1, [r3, #0]
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f001 fefe 	bl	8002b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <LCD1602_write+0x1b8>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <LCD1602_write+0x1c8>)
 8000d1a:	8819      	ldrh	r1, [r3, #0]
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	f001 fef3 	bl	8002b10 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000d2a:	f7ff fef3 	bl	8000b14 <LCD1602_EnablePulse>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	200000a8 	.word	0x200000a8
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	200000ae 	.word	0x200000ae
 8000d48:	200000b0 	.word	0x200000b0
 8000d4c:	200000b2 	.word	0x200000b2
 8000d50:	200000b4 	.word	0x200000b4
 8000d54:	200000b8 	.word	0x200000b8
 8000d58:	200000ba 	.word	0x200000ba
 8000d5c:	200000bc 	.word	0x200000bc
 8000d60:	200000be 	.word	0x200000be

08000d64 <LCD1602_writeCommand>:


static void LCD1602_writeCommand(uint8_t command)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(false);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fef0 	bl	8000b54 <LCD1602_RS>
	LCD1602_write(command);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff0e 	bl	8000b98 <LCD1602_write>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <LCD1602_writeData>:


static void LCD1602_writeData(uint8_t data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(true);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fee0 	bl	8000b54 <LCD1602_RS>
	LCD1602_write(data);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fefe 	bl	8000b98 <LCD1602_write>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LCD1602_write4bitCommand>:


static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fecc 	bl	8000b54 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <LCD1602_write4bitCommand+0x7c>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <LCD1602_write4bitCommand+0x80>)
 8000dc2:	8819      	ldrh	r1, [r3, #0]
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f001 fe9f 	bl	8002b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <LCD1602_write4bitCommand+0x7c>)
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <LCD1602_write4bitCommand+0x84>)
 8000dd8:	8819      	ldrh	r1, [r3, #0]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f001 fe94 	bl	8002b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <LCD1602_write4bitCommand+0x7c>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <LCD1602_write4bitCommand+0x88>)
 8000dee:	8819      	ldrh	r1, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f001 fe89 	bl	8002b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LCD1602_write4bitCommand+0x7c>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <LCD1602_write4bitCommand+0x8c>)
 8000e04:	8819      	ldrh	r1, [r3, #0]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f001 fe7e 	bl	8002b10 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8000e14:	f7ff fe7e 	bl	8000b14 <LCD1602_EnablePulse>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000b4 	.word	0x200000b4
 8000e24:	200000b8 	.word	0x200000b8
 8000e28:	200000ba 	.word	0x200000ba
 8000e2c:	200000bc 	.word	0x200000bc
 8000e30:	200000be 	.word	0x200000be

08000e34 <LCD1602_Begin4BIT>:
	HAL_Delay(2);
}


void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	817b      	strh	r3, [r7, #10]
 8000e42:	4613      	mov	r3, r2
 8000e44:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8000e46:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <LCD1602_Begin4BIT+0xac>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <LCD1602_Begin4BIT+0xb0>)
 8000e4e:	897b      	ldrh	r3, [r7, #10]
 8000e50:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8000e52:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <LCD1602_Begin4BIT+0xb4>)
 8000e54:	893b      	ldrh	r3, [r7, #8]
 8000e56:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8000e58:	4a24      	ldr	r2, [pc, #144]	; (8000eec <LCD1602_Begin4BIT+0xb8>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8000e5e:	4a24      	ldr	r2, [pc, #144]	; (8000ef0 <LCD1602_Begin4BIT+0xbc>)
 8000e60:	8b3b      	ldrh	r3, [r7, #24]
 8000e62:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8000e64:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <LCD1602_Begin4BIT+0xc0>)
 8000e66:	8bbb      	ldrh	r3, [r7, #28]
 8000e68:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <LCD1602_Begin4BIT+0xc4>)
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <LCD1602_Begin4BIT+0xc8>)
 8000e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e74:	8013      	strh	r3, [r2, #0]
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <LCD1602_Begin4BIT+0xcc>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <LCD1602_Begin4BIT+0xd0>)
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8000e82:	2014      	movs	r0, #20
 8000e84:	f001 fb5e 	bl	8002544 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f7ff ff8b 	bl	8000da4 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8000e8e:	2005      	movs	r0, #5
 8000e90:	f001 fb58 	bl	8002544 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f7ff ff85 	bl	8000da4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f001 fb52 	bl	8002544 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f7ff ff7f 	bl	8000da4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f001 fb4c 	bl	8002544 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8000eac:	2002      	movs	r0, #2
 8000eae:	f7ff ff79 	bl	8000da4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 fb46 	bl	8002544 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f7ff ff53 	bl	8000d64 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff ff50 	bl	8000d64 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f001 fb3d 	bl	8002544 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f7ff ff4a 	bl	8000d64 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f001 fb37 	bl	8002544 <HAL_Delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000a0 	.word	0x200000a0
 8000ee4:	200000a4 	.word	0x200000a4
 8000ee8:	200000a6 	.word	0x200000a6
 8000eec:	200000b4 	.word	0x200000b4
 8000ef0:	200000b8 	.word	0x200000b8
 8000ef4:	200000ba 	.word	0x200000ba
 8000ef8:	200000bc 	.word	0x200000bc
 8000efc:	200000be 	.word	0x200000be
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000002 	.word	0x20000002

08000f08 <LCD1602_print>:


void LCD1602_print(char string[])
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e009      	b.n	8000f2a <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff30 	bl	8000d84 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	3301      	adds	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d805      	bhi.n	8000f3c <LCD1602_print+0x34>
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1ec      	bne.n	8000f16 <LCD1602_print+0xe>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <LCD1602_setCursor>:


void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d108      	bne.n	8000f78 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6c:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fef7 	bl	8000d64 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}
 8000f76:	e007      	b.n	8000f88 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000f7e:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff feee 	bl	8000d64 <LCD1602_writeCommand>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <LCD1602_noCursor>:
	LCD1602_writeCommand(FunctionSet);
}


void LCD1602_noCursor(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <LCD1602_noCursor+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f023 0302 	bic.w	r3, r3, #2
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <LCD1602_noCursor+0x20>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <LCD1602_noCursor+0x20>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fedc 	bl	8000d64 <LCD1602_writeCommand>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000001 	.word	0x20000001

08000fb4 <LCD1602_clear>:
	LCD1602_writeCommand(DisplayControl);
}


void LCD1602_clear(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fed3 	bl	8000d64 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f001 fac0 	bl	8002544 <HAL_Delay>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LCD1602_noBlink>:


void LCD1602_noBlink(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LCD1602_noBlink+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LCD1602_noBlink+0x20>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <LCD1602_noBlink+0x20>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fec0 	bl	8000d64 <LCD1602_writeCommand>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000001 	.word	0x20000001

08000fec <delay>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <delay+0x2c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8000ffe:	bf00      	nop
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <delay+0x2c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f9      	bcc.n	8001000 <delay+0x14>
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000190 	.word	0x20000190

0800101c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) { //Volume up
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800102c:	f001 fd58 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10b      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x32>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
		++RADIO_volume;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800103e:	6013      	str	r3, [r2, #0]
		RDA5807M_setVolume(&hi2c1, RADIO_volume);
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800104a:	f000 fe3e 	bl	8001cca <RDA5807M_setVolume>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) { //Volume down
 800104e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001054:	f001 fd44 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10b      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x5a>
		--RADIO_volume;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001066:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,1);
		RDA5807M_setVolume(&hi2c1, RADIO_volume);
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001072:	f000 fe2a 	bl	8001cca <RDA5807M_setVolume>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) { //Channel down
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800107c:	f001 fd30 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d103      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x72>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
		RDA5807M_seek(&hi2c1,0);
 8001086:	2100      	movs	r1, #0
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800108a:	f000 fdcd 	bl	8001c28 <RDA5807M_seek>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) { //Channel up
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001094:	f001 fd24 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d103      	bne.n	80010a6 <HAL_GPIO_EXTI_Callback+0x8a>
		RDA5807M_seek(&hi2c1,1);
 800109e:	2101      	movs	r1, #1
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010a2:	f000 fdc1 	bl	8001c28 <RDA5807M_seek>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,1);
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020400 	.word	0x40020400
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000128 	.word	0x20000128

080010bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a5e      	ldr	r2, [pc, #376]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f040 80b6 	bne.w	800123c <HAL_TIM_PeriodElapsedCallback+0x180>
		DS18B20_presence = DS18B20_Start();
 80010d0:	f7ff fc6e 	bl	80009b0 <DS18B20_Start>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010da:	701a      	strb	r2, [r3, #0]
		if(DS18B20_presence == -1){
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,1);
		}

		delay(1000);
 80010dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e0:	f7ff ff84 	bl	8000fec <delay>
		DS18B20_Write(0xCC);
 80010e4:	20cc      	movs	r0, #204	; 0xcc
 80010e6:	f7ff fc93 	bl	8000a10 <DS18B20_Write>
		DS18B20_Write(0x44);
 80010ea:	2044      	movs	r0, #68	; 0x44
 80010ec:	f7ff fc90 	bl	8000a10 <DS18B20_Write>

		delay(60000); //mikrosekundy
 80010f0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80010f4:	f7ff ff7a 	bl	8000fec <delay>
		delay(60000);
 80010f8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80010fc:	f7ff ff76 	bl	8000fec <delay>
		delay(60000);
 8001100:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001104:	f7ff ff72 	bl	8000fec <delay>
		delay(60000);
 8001108:	f64e 2060 	movw	r0, #60000	; 0xea60
 800110c:	f7ff ff6e 	bl	8000fec <delay>
		delay(60000);
 8001110:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001114:	f7ff ff6a 	bl	8000fec <delay>
		delay(60000);
 8001118:	f64e 2060 	movw	r0, #60000	; 0xea60
 800111c:	f7ff ff66 	bl	8000fec <delay>
		delay(60000);
 8001120:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001124:	f7ff ff62 	bl	8000fec <delay>
		delay(60000);
 8001128:	f64e 2060 	movw	r0, #60000	; 0xea60
 800112c:	f7ff ff5e 	bl	8000fec <delay>
		delay(60000);
 8001130:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001134:	f7ff ff5a 	bl	8000fec <delay>
		delay(60000);
 8001138:	f64e 2060 	movw	r0, #60000	; 0xea60
 800113c:	f7ff ff56 	bl	8000fec <delay>
		delay(60000);
 8001140:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001144:	f7ff ff52 	bl	8000fec <delay>
		delay(60000);
 8001148:	f64e 2060 	movw	r0, #60000	; 0xea60
 800114c:	f7ff ff4e 	bl	8000fec <delay>
		delay(60000);
 8001150:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001154:	f7ff ff4a 	bl	8000fec <delay>
		delay(20000); //łącznie 0,8 sekundy
 8001158:	f644 6020 	movw	r0, #20000	; 0x4e20
 800115c:	f7ff ff46 	bl	8000fec <delay>

		DS18B20_presence = DS18B20_Start();
 8001160:	f7ff fc26 	bl	80009b0 <DS18B20_Start>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800116a:	701a      	strb	r2, [r3, #0]
		if(DS18B20_presence == -1){
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
		}
		delay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001170:	f7ff ff3c 	bl	8000fec <delay>
		DS18B20_Write(0xCC);
 8001174:	20cc      	movs	r0, #204	; 0xcc
 8001176:	f7ff fc4b 	bl	8000a10 <DS18B20_Write>
		DS18B20_Write(0xBE);
 800117a:	20be      	movs	r0, #190	; 0xbe
 800117c:	f7ff fc48 	bl	8000a10 <DS18B20_Write>

		TEMP_byte1 = DS18B20_Read();
 8001180:	f7ff fc8a 	bl	8000a98 <DS18B20_Read>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800118a:	701a      	strb	r2, [r3, #0]
		TEMP_byte2 = DS18B20_Read();
 800118c:	f7ff fc84 	bl	8000a98 <DS18B20_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001196:	701a      	strb	r2, [r3, #0]
		TEMP_bytes = (TEMP_byte2<<8)|TEMP_byte1;
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80011ae:	801a      	strh	r2, [r3, #0]
		TEMP_value = (float)TEMP_bytes/16;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011bc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80011c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]

		TEMP_beforeComma = (int)TEMP_value;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 2a90 	vmov	r2, s15
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011da:	601a      	str	r2, [r3, #0]
		TEMP_floatDecimalParts = TEMP_value - TEMP_beforeComma;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
		TEMP_decimalParts = trunc(TEMP_floatDecimalParts*10);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f995 	bl	8000538 <__aeabi_f2d>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	ec44 3b10 	vmov	d0, r3, r4
 8001216:	f004 fda3 	bl	8005d60 <trunc>
 800121a:	ec54 3b10 	vmov	r3, r4, d0
 800121e:	4618      	mov	r0, r3
 8001220:	4621      	mov	r1, r4
 8001222:	f7ff f9e1 	bl	80005e8 <__aeabi_d2iz>
 8001226:	4602      	mov	r2, r0
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800122a:	601a      	str	r2, [r3, #0]
		sprintf(TEMP_charValue, "%d.%d\337C",TEMP_beforeComma,TEMP_decimalParts);
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001238:	f004 fa3c 	bl	80056b4 <siprintf>

	}
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	40000800 	.word	0x40000800
 8001248:	200001ec 	.word	0x200001ec
 800124c:	200000d7 	.word	0x200000d7
 8001250:	2000017c 	.word	0x2000017c
 8001254:	200001d0 	.word	0x200001d0
 8001258:	200000c0 	.word	0x200000c0
 800125c:	20000180 	.word	0x20000180
 8001260:	200001dc 	.word	0x200001dc
 8001264:	200000d0 	.word	0x200000d0
 8001268:	08005df8 	.word	0x08005df8
 800126c:	200000e0 	.word	0x200000e0

08001270 <processFrequency>:


void processFrequency(uint16_t freq){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	sprintf(RADIO_rawFreq, "%d", freq);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	461a      	mov	r2, r3
 800127e:	4917      	ldr	r1, [pc, #92]	; (80012dc <processFrequency+0x6c>)
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <processFrequency+0x70>)
 8001282:	f004 fa17 	bl	80056b4 <siprintf>
	if(RADIO_rawFreq[0]=='1'){
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <processFrequency+0x70>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b31      	cmp	r3, #49	; 0x31
 800128c:	d113      	bne.n	80012b6 <processFrequency+0x46>
		RADIO_freq[0]=RADIO_rawFreq[0];
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <processFrequency+0x70>)
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <processFrequency+0x74>)
 8001294:	701a      	strb	r2, [r3, #0]
		RADIO_freq[1]=RADIO_rawFreq[1];
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <processFrequency+0x70>)
 8001298:	785a      	ldrb	r2, [r3, #1]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <processFrequency+0x74>)
 800129c:	705a      	strb	r2, [r3, #1]
		RADIO_freq[2]=RADIO_rawFreq[2];
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <processFrequency+0x70>)
 80012a0:	789a      	ldrb	r2, [r3, #2]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <processFrequency+0x74>)
 80012a4:	709a      	strb	r2, [r3, #2]
		RADIO_freq[3]='.';
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <processFrequency+0x74>)
 80012a8:	222e      	movs	r2, #46	; 0x2e
 80012aa:	70da      	strb	r2, [r3, #3]
		RADIO_freq[4]=RADIO_rawFreq[3];
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <processFrequency+0x70>)
 80012ae:	78da      	ldrb	r2, [r3, #3]
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <processFrequency+0x74>)
 80012b2:	711a      	strb	r2, [r3, #4]
			RADIO_freq[0]=RADIO_rawFreq[0];
			RADIO_freq[1]=RADIO_rawFreq[1];
			RADIO_freq[2]='.';
			RADIO_freq[3]=RADIO_rawFreq[2];
		}
}
 80012b4:	e00e      	b.n	80012d4 <processFrequency+0x64>
			RADIO_freq[0]=RADIO_rawFreq[0];
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <processFrequency+0x70>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <processFrequency+0x74>)
 80012bc:	701a      	strb	r2, [r3, #0]
			RADIO_freq[1]=RADIO_rawFreq[1];
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <processFrequency+0x70>)
 80012c0:	785a      	ldrb	r2, [r3, #1]
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <processFrequency+0x74>)
 80012c4:	705a      	strb	r2, [r3, #1]
			RADIO_freq[2]='.';
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <processFrequency+0x74>)
 80012c8:	222e      	movs	r2, #46	; 0x2e
 80012ca:	709a      	strb	r2, [r3, #2]
			RADIO_freq[3]=RADIO_rawFreq[2];
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <processFrequency+0x70>)
 80012ce:	789a      	ldrb	r2, [r3, #2]
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <processFrequency+0x74>)
 80012d2:	70da      	strb	r2, [r3, #3]
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08005e00 	.word	0x08005e00
 80012e0:	200001d4 	.word	0x200001d4
 80012e4:	2000000c 	.word	0x2000000c

080012e8 <processStationName>:

void processStationName(){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
	for(int i=0; i<7; i++){
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e00c      	b.n	800130e <processStationName+0x26>
		RDS_stationName[i] = RDS_data[i];
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <processStationName+0x38>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	7819      	ldrb	r1, [r3, #0]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <processStationName+0x3c>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<7; i++){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3301      	adds	r3, #1
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b06      	cmp	r3, #6
 8001312:	ddef      	ble.n	80012f4 <processStationName+0xc>
	}
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000004 	.word	0x20000004
 8001324:	20000188 	.word	0x20000188

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f001 f897 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f87f 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 f9b1 	bl	800169c <MX_GPIO_Init>
  MX_I2C1_Init();
 800133a:	f000 f8e5 	bl	8001508 <MX_I2C1_Init>
  MX_TIM3_Init();
 800133e:	f000 f911 	bl	8001564 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001342:	f000 f95d 	bl	8001600 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001346:	4831      	ldr	r0, [pc, #196]	; (800140c <main+0xe4>)
 8001348:	f003 fcc9 	bl	8004cde <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800134c:	4830      	ldr	r0, [pc, #192]	; (8001410 <main+0xe8>)
 800134e:	f003 fcea 	bl	8004d26 <HAL_TIM_Base_Start_IT>


  RDA5807M_init(&hi2c1);
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <main+0xec>)
 8001354:	f000 fb12 	bl	800197c <RDA5807M_init>
  RDA5807M_setFreq(&hi2c1,870);
 8001358:	f240 3166 	movw	r1, #870	; 0x366
 800135c:	482d      	ldr	r0, [pc, #180]	; (8001414 <main+0xec>)
 800135e:	f000 fd01 	bl	8001d64 <RDA5807M_setFreq>
  RDA5807M_seek(&hi2c1, 1);
 8001362:	2101      	movs	r1, #1
 8001364:	482b      	ldr	r0, [pc, #172]	; (8001414 <main+0xec>)
 8001366:	f000 fc5f 	bl	8001c28 <RDA5807M_seek>
  RDA5807M_setVolume(&hi2c1,RADIO_volume);
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <main+0xf0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4619      	mov	r1, r3
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <main+0xec>)
 8001374:	f000 fca9 	bl	8001cca <RDA5807M_setVolume>


  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800137c:	9303      	str	r3, [sp, #12]
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <main+0xf4>)
 8001392:	2202      	movs	r2, #2
 8001394:	2101      	movs	r1, #1
 8001396:	4822      	ldr	r0, [pc, #136]	; (8001420 <main+0xf8>)
 8001398:	f7ff fd4c 	bl	8000e34 <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 800139c:	f7ff fdf8 	bl	8000f90 <LCD1602_noCursor>
  LCD1602_noBlink();
 80013a0:	f7ff fe12 	bl	8000fc8 <LCD1602_noBlink>

  RDS_data = malloc(sizeof(char)*8);
 80013a4:	2008      	movs	r0, #8
 80013a6:	f004 f8bd 	bl	8005524 <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <main+0xfc>)
 80013b0:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD1602_clear();
 80013b2:	f7ff fdff 	bl	8000fb4 <LCD1602_clear>

	  LCD1602_setCursor(1,1);
 80013b6:	2101      	movs	r1, #1
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fdc3 	bl	8000f44 <LCD1602_setCursor>
	  processFrequency(RDA5807M_getFreq(&hi2c1));
 80013be:	4815      	ldr	r0, [pc, #84]	; (8001414 <main+0xec>)
 80013c0:	f000 fd08 	bl	8001dd4 <RDA5807M_getFreq>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff52 	bl	8001270 <processFrequency>
	  LCD1602_print(RADIO_freq);
 80013cc:	4816      	ldr	r0, [pc, #88]	; (8001428 <main+0x100>)
 80013ce:	f7ff fd9b 	bl	8000f08 <LCD1602_print>

	  LCD1602_setCursor(1,9);
 80013d2:	2109      	movs	r1, #9
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff fdb5 	bl	8000f44 <LCD1602_setCursor>
	  LCD1602_print(TEMP_charValue);
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <main+0x104>)
 80013dc:	f7ff fd94 	bl	8000f08 <LCD1602_print>


	  LCD1602_setCursor(2,1);
 80013e0:	2101      	movs	r1, #1
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff fdae 	bl	8000f44 <LCD1602_setCursor>
	  RDA5807M_readRDS(&hi2c1);
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <main+0xec>)
 80013ea:	f000 fd17 	bl	8001e1c <RDA5807M_readRDS>
	  RDS_data = RDA5807M_getStationName();
 80013ee:	f000 fd7f 	bl	8001ef0 <RDA5807M_getStationName>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <main+0xfc>)
 80013f6:	601a      	str	r2, [r3, #0]
	  processStationName();
 80013f8:	f7ff ff76 	bl	80012e8 <processStationName>
	  LCD1602_print(RDS_stationName);
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <main+0x108>)
 80013fe:	f7ff fd83 	bl	8000f08 <LCD1602_print>


	  HAL_Delay(1000);
 8001402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001406:	f001 f89d 	bl	8002544 <HAL_Delay>
	  LCD1602_clear();
 800140a:	e7d2      	b.n	80013b2 <main+0x8a>
 800140c:	20000190 	.word	0x20000190
 8001410:	200000e8 	.word	0x200000e8
 8001414:	20000128 	.word	0x20000128
 8001418:	20000008 	.word	0x20000008
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	20000004 	.word	0x20000004
 8001428:	2000000c 	.word	0x2000000c
 800142c:	200000e0 	.word	0x200000e0
 8001430:	20000188 	.word	0x20000188

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	; 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f004 f876 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <SystemClock_Config+0xcc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <SystemClock_Config+0xcc>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <SystemClock_Config+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <SystemClock_Config+0xd0>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014a8:	23a8      	movs	r3, #168	; 0xa8
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b0:	2304      	movs	r3, #4
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 ff97 	bl	80043ec <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c4:	f000 f99c 	bl	8001800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2105      	movs	r1, #5
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f9f0 	bl	80048cc <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014f2:	f000 f985 	bl	8001800 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_I2C1_Init+0x50>)
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <MX_I2C1_Init+0x54>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_I2C1_Init+0x50>)
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_I2C1_Init+0x58>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_I2C1_Init+0x50>)
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_I2C1_Init+0x50>)
 8001546:	f001 fb2f 	bl	8002ba8 <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001550:	f000 f956 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000128 	.word	0x20000128
 800155c:	40005400 	.word	0x40005400
 8001560:	000186a0 	.word	0x000186a0

08001564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <MX_TIM3_Init+0x98>)
 8001584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001588:	2253      	movs	r2, #83	; 0x53
 800158a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM3_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001594:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_TIM3_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015a8:	f003 fb6e 	bl	8004c88 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 f925 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015c4:	f003 fcdb 	bl	8004f7e <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f917 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015e0:	f003 fee6 	bl	80053b0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015ea:	f000 f909 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000190 	.word	0x20000190
 80015fc:	40000400 	.word	0x40000400

08001600 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_TIM4_Init+0x94>)
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <MX_TIM4_Init+0x98>)
 8001620:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_TIM4_Init+0x94>)
 8001624:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001628:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_TIM4_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 29999;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_TIM4_Init+0x94>)
 8001632:	f247 522f 	movw	r2, #29999	; 0x752f
 8001636:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_TIM4_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_TIM4_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <MX_TIM4_Init+0x94>)
 8001646:	f003 fb1f 	bl	8004c88 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001650:	f000 f8d6 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <MX_TIM4_Init+0x94>)
 8001662:	f003 fc8c 	bl	8004f7e <HAL_TIM_ConfigClockSource>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800166c:	f000 f8c8 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_TIM4_Init+0x94>)
 800167e:	f003 fe97 	bl	80053b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001688:	f000 f8ba 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000e8 	.word	0x200000e8
 8001698:	40000800 	.word	0x40000800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <MX_GPIO_Init+0x14c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <MX_GPIO_Init+0x14c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <MX_GPIO_Init+0x14c>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <MX_GPIO_Init+0x14c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <MX_GPIO_Init+0x14c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a2f      	ldr	r2, [pc, #188]	; (80017e8 <MX_GPIO_Init+0x14c>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MX_GPIO_Init+0x14c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2102      	movs	r1, #2
 8001742:	482a      	ldr	r0, [pc, #168]	; (80017ec <MX_GPIO_Init+0x150>)
 8001744:	f001 f9e4 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800174e:	4828      	ldr	r0, [pc, #160]	; (80017f0 <MX_GPIO_Init+0x154>)
 8001750:	f001 f9de 	bl	8002b10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2103      	movs	r1, #3
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_GPIO_Init+0x158>)
 800175a:	f001 f9d9 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800175e:	2302      	movs	r3, #2
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <MX_GPIO_Init+0x150>)
 8001776:	f001 f819 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800177a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_GPIO_Init+0x15c>)
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	481b      	ldr	r0, [pc, #108]	; (80017fc <MX_GPIO_Init+0x160>)
 8001790:	f001 f80c 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8001794:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001798:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_GPIO_Init+0x154>)
 80017ae:	f000 fffd 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80017b2:	2303      	movs	r3, #3
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <MX_GPIO_Init+0x158>)
 80017ca:	f000 ffef 	bl	80027ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2028      	movs	r0, #40	; 0x28
 80017d4:	f000 ffb3 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d8:	2028      	movs	r0, #40	; 0x28
 80017da:	f000 ffcc 	bl	8002776 <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40020400 	.word	0x40020400

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001814:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <__NVIC_SystemReset+0x20>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <__NVIC_SystemReset+0x20>)
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_SystemReset+0x24>)
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
 8001828:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <__NVIC_SystemReset+0x1c>
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0004 	.word	0x05fa0004

08001838 <RDA5807M_revertBytes>:


uint8_t buf1[64];
uint8_t buf2[64];

void RDA5807M_revertBytes(uint8_t *buf, uint8_t cnt){
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	while(cnt > 1){
 8001844:	e010      	b.n	8001868 <RDA5807M_revertBytes+0x30>
		tmp = *(buf + 1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	73fb      	strb	r3, [r7, #15]
		*(buf + 1) = *buf;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	701a      	strb	r2, [r3, #0]
		*buf = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	701a      	strb	r2, [r3, #0]
		buf += 2;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3302      	adds	r3, #2
 8001860:	607b      	str	r3, [r7, #4]
		cnt -= 2;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	3b02      	subs	r3, #2
 8001866:	70fb      	strb	r3, [r7, #3]
	while(cnt > 1){
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d8eb      	bhi.n	8001846 <RDA5807M_revertBytes+0xe>
	}
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <RDA5807M_write>:

void RDA5807M_write(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	; 0x28
 800187e:	af04      	add	r7, sp, #16
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	461a      	mov	r2, r3
 8001886:	460b      	mov	r3, r1
 8001888:	72fb      	strb	r3, [r7, #11]
 800188a:	4613      	mov	r3, r2
 800188c:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 800188e:	7abb      	ldrb	r3, [r7, #10]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffce 	bl	8001838 <RDA5807M_revertBytes>

	ret = HAL_I2C_Mem_Write(I2Cx, RDA5807M_Rand_Address << 1u, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	b299      	uxth	r1, r3
 80018a0:	7abb      	ldrb	r3, [r7, #10]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ac:	9202      	str	r2, [sp, #8]
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	460a      	mov	r2, r1
 80018b8:	2122      	movs	r1, #34	; 0x22
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f001 fdd0 	bl	8003460 <HAL_I2C_Mem_Write>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
		}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80018c4:	7abb      	ldrb	r3, [r7, #10]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffb3 	bl	8001838 <RDA5807M_revertBytes>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <RDA5807M_writeRegister>:

void RDA5807M_writeRegister(I2C_HandleTypeDef *I2Cx, uint16_t *buf, uint8_t RegNum){
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af02      	add	r7, sp, #8
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f7ff ffa1 	bl	8001838 <RDA5807M_revertBytes>
	ret = HAL_I2C_Master_Transmit(I2Cx, (uint16_t) RDA5807M_Seq_Address << 1, (uint8_t *) buf, RegNum << 1, 1000);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	2120      	movs	r1, #32
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f001 fa84 	bl	8002e18 <HAL_I2C_Master_Transmit>
 8001910:	4603      	mov	r3, r0
 8001912:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
	}
	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7ff ff8b 	bl	8001838 <RDA5807M_revertBytes>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <RDA5807M_read>:

void RDA5807M_read(I2C_HandleTypeDef *I2Cx, uint8_t RegAddress, uint16_t *buf, uint8_t RegNum){
 800192a:	b580      	push	{r7, lr}
 800192c:	b08a      	sub	sp, #40	; 0x28
 800192e:	af04      	add	r7, sp, #16
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	461a      	mov	r2, r3
 8001936:	460b      	mov	r3, r1
 8001938:	72fb      	strb	r3, [r7, #11]
 800193a:	4613      	mov	r3, r2
 800193c:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, RegAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *) buf, RegNum << 1, 1000);
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	b299      	uxth	r1, r3
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	b29b      	uxth	r3, r3
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194e:	9202      	str	r2, [sp, #8]
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	460a      	mov	r2, r1
 800195a:	2122      	movs	r1, #34	; 0x22
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f001 fe79 	bl	8003654 <HAL_I2C_Mem_Read>
 8001962:	4603      	mov	r3, r0
 8001964:	75fb      	strb	r3, [r7, #23]

	if(ret != HAL_OK){
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
	}

	RDA5807M_revertBytes((uint8_t *) buf, RegNum << 1);
 8001966:	7abb      	ldrb	r3, [r7, #10]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff62 	bl	8001838 <RDA5807M_revertBytes>
}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <RDA5807M_init>:

void RDA5807M_init(I2C_HandleTypeDef *I2Cx){
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af04      	add	r7, sp, #16
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {0, 0};
 8001984:	2300      	movs	r3, #0
 8001986:	723b      	strb	r3, [r7, #8]
 8001988:	2300      	movs	r3, #0
 800198a:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, 1000);
 800198c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	2302      	movs	r3, #2
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	2200      	movs	r2, #0
 80019a0:	2122      	movs	r1, #34	; 0x22
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fe56 	bl	8003654 <HAL_I2C_Mem_Read>
 80019a8:	4603      	mov	r3, r0
 80019aa:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	2b00      	cmp	r3, #0
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
	}


	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf, 1, 1000);
 80019b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	2301      	movs	r3, #1
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	2200      	movs	r2, #0
 80019c4:	2122      	movs	r1, #34	; 0x22
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 fe44 	bl	8003654 <HAL_I2C_Mem_Read>
 80019cc:	4603      	mov	r3, r0
 80019ce:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <RDA5807M_init+0x60>
 80019d6:	7a3b      	ldrb	r3, [r7, #8]
 80019d8:	2b58      	cmp	r3, #88	; 0x58
 80019da:	d001      	beq.n	80019e0 <RDA5807M_init+0x64>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);


		NVIC_SystemReset();
 80019dc:	f7ff ff18 	bl	8001810 <__NVIC_SystemReset>

	}

	for(int i = 0; i < 64; i++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e00c      	b.n	8001a00 <RDA5807M_init+0x84>
		buf1[i] = 0;
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <RDA5807M_init+0xf0>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
		buf2[i] = 0;
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <RDA5807M_init+0xf4>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 64; i++){
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b3f      	cmp	r3, #63	; 0x3f
 8001a04:	ddef      	ble.n	80019e6 <RDA5807M_init+0x6a>
	}

	ret = HAL_I2C_Mem_Read(I2Cx, RDA5807M_Rand_Address << 1, 0, I2C_MEMADD_SIZE_8BIT, buf2, 64, 1000);
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <RDA5807M_init+0xf4>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	2200      	movs	r2, #0
 8001a18:	2122      	movs	r1, #34	; 0x22
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f001 fe1a 	bl	8003654 <HAL_I2C_Mem_Read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	2b00      	cmp	r3, #0
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
	}
	ret = HAL_I2C_Master_Receive(I2Cx, RDA5807M_Seq_Address << 1, buf1, 64, 1000);
 8001a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2340      	movs	r3, #64	; 0x40
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <RDA5807M_init+0xf0>)
 8001a32:	2120      	movs	r1, #32
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f001 faed 	bl	8003014 <HAL_I2C_Master_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK || buf[0] != 0x58){
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	2b00      	cmp	r3, #0
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	}


	RDA5807M_softReset(I2Cx);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f816 	bl	8001a74 <RDA5807M_softReset>
	RDA5807M_resetSettings(I2Cx);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f839 	bl	8001ac0 <RDA5807M_resetSettings>

	RDA5807M_seek(I2Cx, 1);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8e9 	bl	8001c28 <RDA5807M_seek>
	while(RDA5807M_get_SeekReadyFlag(I2Cx));
 8001a56:	bf00      	nop
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f923 	bl	8001ca4 <RDA5807M_get_SeekReadyFlag>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f9      	bne.n	8001a58 <RDA5807M_init+0xdc>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001f0 	.word	0x200001f0
 8001a70:	20000230 	.word	0x20000230

08001a74 <RDA5807M_softReset>:

void RDA5807M_softReset(I2C_HandleTypeDef *I2Cx){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	Reg02h r02;
	r02.Enable = 1;
 8001a7c:	7b3b      	ldrb	r3, [r7, #12]
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 1;
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	2301      	movs	r3, #1
 8001a92:	2102      	movs	r1, #2
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fef0 	bl	800187a <RDA5807M_write>
	r02.Enable = 1;
 8001a9a:	7b3b      	ldrb	r3, [r7, #12]
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset = 0;
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	f36f 0341 	bfc	r3, #1, #1
 8001aa8:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x02, (uint16_t*) &r02, 1);
 8001aaa:	f107 020c 	add.w	r2, r7, #12
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fee1 	bl	800187a <RDA5807M_write>

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <RDA5807M_resetSettings>:

void RDA5807M_resetSettings(I2C_HandleTypeDef *I2Cx){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	        Reg05h r05;
	        Reg06h r06;
	        Reg07h r07;
	    } buf;

	buf.r02.Enable 					= 1;
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	733b      	strb	r3, [r7, #12]
	buf.r02.Soft_Reset 				= 0;
 8001ad0:	7b3b      	ldrb	r3, [r7, #12]
 8001ad2:	f36f 0341 	bfc	r3, #1, #1
 8001ad6:	733b      	strb	r3, [r7, #12]
	buf.r02.New_Demodulate 			= 1;
 8001ad8:	7b3b      	ldrb	r3, [r7, #12]
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	733b      	strb	r3, [r7, #12]
	buf.r02.RDS_Enable 				= 1;
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	733b      	strb	r3, [r7, #12]
	buf.r02.CLK_Mode 				= 0;
 8001ae8:	7b3b      	ldrb	r3, [r7, #12]
 8001aea:	f36f 1306 	bfc	r3, #4, #3
 8001aee:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek_Mode				= 0;
 8001af0:	7b3b      	ldrb	r3, [r7, #12]
 8001af2:	f36f 13c7 	bfc	r3, #7, #1
 8001af6:	733b      	strb	r3, [r7, #12]
	buf.r02.Seek					= 0;
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	f36f 0300 	bfc	r3, #0, #1
 8001afe:	737b      	strb	r3, [r7, #13]
	buf.r02.Seek_Up					= 1;
 8001b00:	7b7b      	ldrb	r3, [r7, #13]
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Dir_In_Mode		= 0;
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	f36f 0382 	bfc	r3, #2, #1
 8001b0e:	737b      	strb	r3, [r7, #13]
	buf.r02.RCLK_Non_Calib			= 0;
 8001b10:	7b7b      	ldrb	r3, [r7, #13]
 8001b12:	f36f 03c3 	bfc	r3, #3, #1
 8001b16:	737b      	strb	r3, [r7, #13]
	buf.r02.Bass					= 0;
 8001b18:	7b7b      	ldrb	r3, [r7, #13]
 8001b1a:	f36f 1304 	bfc	r3, #4, #1
 8001b1e:	737b      	strb	r3, [r7, #13]
	buf.r02.Mono					= 0;
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	f36f 1345 	bfc	r3, #5, #1
 8001b26:	737b      	strb	r3, [r7, #13]
	buf.r02.Demute					= 1;
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	737b      	strb	r3, [r7, #13]
	buf.r02.DHIZ					= 1;
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	737b      	strb	r3, [r7, #13]

	buf.r03.Space					= 3;
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	f043 0303 	orr.w	r3, r3, #3
 8001b3e:	73bb      	strb	r3, [r7, #14]
	buf.r03.Band					= 0;
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	f36f 0383 	bfc	r3, #2, #2
 8001b46:	73bb      	strb	r3, [r7, #14]
	buf.r03.Tune					= 1;
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	73bb      	strb	r3, [r7, #14]
	buf.r03.Direct_Mode				= 0;
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	f36f 1345 	bfc	r3, #5, #1
 8001b56:	73bb      	strb	r3, [r7, #14]
	buf.r03.Channel_Select			= 0;
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	f36f 138f 	bfc	r3, #6, #10
 8001b5e:	81fb      	strh	r3, [r7, #14]

	buf.r04.Reserved				= 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	743b      	strb	r3, [r7, #16]
	buf.r04.AFCD					= 0;
 8001b64:	7c7b      	ldrb	r3, [r7, #17]
 8001b66:	f36f 0300 	bfc	r3, #0, #1
 8001b6a:	747b      	strb	r3, [r7, #17]
	buf.r04.Soft_Mute				= 1;
 8001b6c:	7c7b      	ldrb	r3, [r7, #17]
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved2				= 0;
 8001b74:	7c7b      	ldrb	r3, [r7, #17]
 8001b76:	f36f 0382 	bfc	r3, #2, #1
 8001b7a:	747b      	strb	r3, [r7, #17]
	buf.r04.De_emphasis				= 0;
 8001b7c:	7c7b      	ldrb	r3, [r7, #17]
 8001b7e:	f36f 03c3 	bfc	r3, #3, #1
 8001b82:	747b      	strb	r3, [r7, #17]
	buf.r04.Reserved3				= 0;
 8001b84:	7c7b      	ldrb	r3, [r7, #17]
 8001b86:	f36f 1307 	bfc	r3, #4, #4
 8001b8a:	747b      	strb	r3, [r7, #17]

	buf.r05.Volume					= 0;
 8001b8c:	7cbb      	ldrb	r3, [r7, #18]
 8001b8e:	f36f 0303 	bfc	r3, #0, #4
 8001b92:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved				= 3;
 8001b94:	7cbb      	ldrb	r3, [r7, #18]
 8001b96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001b9a:	74bb      	strb	r3, [r7, #18]
	buf.r05.Reserved2				= 3;
 8001b9c:	7cbb      	ldrb	r3, [r7, #18]
 8001b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ba2:	74bb      	strb	r3, [r7, #18]
	buf.r05.Seek_thresh				= 8;
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	f362 0303 	bfi	r3, r2, #0, #4
 8001bac:	74fb      	strb	r3, [r7, #19]
	buf.r05.Reserved3				= 0;
 8001bae:	7cfb      	ldrb	r3, [r7, #19]
 8001bb0:	f36f 1306 	bfc	r3, #4, #3
 8001bb4:	74fb      	strb	r3, [r7, #19]
	buf.r05.INT_Mode				= 1;
 8001bb6:	7cfb      	ldrb	r3, [r7, #19]
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	74fb      	strb	r3, [r7, #19]

	buf.r06.Reserved				= 0;
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	f36f 030c 	bfc	r3, #0, #13
 8001bc4:	82bb      	strh	r3, [r7, #20]
	buf.r06.Open_mode				= 0;
 8001bc6:	7d7b      	ldrb	r3, [r7, #21]
 8001bc8:	f36f 1346 	bfc	r3, #5, #2
 8001bcc:	757b      	strb	r3, [r7, #21]
	buf.r06.Reserved2				= 0;
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	f36f 13c7 	bfc	r3, #7, #1
 8001bd4:	757b      	strb	r3, [r7, #21]

	buf.r07.Freq_Mode				= 0;
 8001bd6:	7dbb      	ldrb	r3, [r7, #22]
 8001bd8:	f36f 0300 	bfc	r3, #0, #1
 8001bdc:	75bb      	strb	r3, [r7, #22]
	buf.r07.Soft_Blend_enable		= 1;
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f362 0386 	bfi	r3, r2, #2, #5
 8001be6:	75fb      	strb	r3, [r7, #23]
	buf.r07.Seek_thresh				= 0;
 8001be8:	7dbb      	ldrb	r3, [r7, #22]
 8001bea:	f36f 0387 	bfc	r3, #2, #6
 8001bee:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved				= 0;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	f36f 0300 	bfc	r3, #0, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]
	buf.r07.Mode_65M_50M			= 1;
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	75fb      	strb	r3, [r7, #23]
	buf.r07.Soft_Blend_thresh		= 16;
 8001c00:	7dbb      	ldrb	r3, [r7, #22]
 8001c02:	f36f 0341 	bfc	r3, #1, #1
 8001c06:	75bb      	strb	r3, [r7, #22]
	buf.r07.Reserved2				= 0;
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	f36f 13c7 	bfc	r3, #7, #1
 8001c0e:	75fb      	strb	r3, [r7, #23]

	RDA5807M_writeRegister(I2Cx, (uint16_t *) &buf.r02, 6);
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2206      	movs	r2, #6
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe5e 	bl	80018da <RDA5807M_writeRegister>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <RDA5807M_seek>:

void RDA5807M_seek(I2C_HandleTypeDef *I2Cx, uint8_t direction){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;
	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	2301      	movs	r3, #1
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe74 	bl	800192a <RDA5807M_read>
	RDA5807M_resetRDS_settings(I2Cx);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f95e 	bl	8001f04 <RDA5807M_resetRDS_settings>
	r02.Seek_Mode	= 1;
 8001c48:	7b3b      	ldrb	r3, [r7, #12]
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	733b      	strb	r3, [r7, #12]
	r02.Seek		= 1;
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	737b      	strb	r3, [r7, #13]
	if(direction){
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <RDA5807M_seek+0x40>
		r02.Seek_Up	= 1;
 8001c5e:	7b7b      	ldrb	r3, [r7, #13]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	737b      	strb	r3, [r7, #13]
 8001c66:	e003      	b.n	8001c70 <RDA5807M_seek+0x48>
	}else{
		r02.Seek_Up	= 0;
 8001c68:	7b7b      	ldrb	r3, [r7, #13]
 8001c6a:	f36f 0341 	bfc	r3, #1, #1
 8001c6e:	737b      	strb	r3, [r7, #13]
	}

	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	2301      	movs	r3, #1
 8001c76:	2102      	movs	r1, #2
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fdfe 	bl	800187a <RDA5807M_write>
	//test
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <RDA5807M_seek+0x78>)
 8001c86:	f000 ff43 	bl	8002b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <RDA5807M_seek+0x78>)
 8001c92:	f000 ff3d 	bl	8002b10 <HAL_GPIO_WritePin>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40020c00 	.word	0x40020c00

08001ca4 <RDA5807M_get_SeekReadyFlag>:

uint8_t RDA5807M_get_SeekReadyFlag(I2C_HandleTypeDef *I2Cx){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	210a      	movs	r1, #10
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fe38 	bl	800192a <RDA5807M_read>

	return r0A.Seek_Tune_Complete;
 8001cba:	7b7b      	ldrb	r3, [r7, #13]
 8001cbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <RDA5807M_setVolume>:

void RDA5807M_setVolume(I2C_HandleTypeDef *I2Cx, uint8_t value){
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
	Reg02h r02;
	Reg05h r05;
	uint8_t mute;

	if(value) mute = 0;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <RDA5807M_setVolume+0x18>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <RDA5807M_setVolume+0x1c>
	else mute = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]

	if(value > 16) value = 16;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d901      	bls.n	8001cf0 <RDA5807M_setVolume+0x26>
 8001cec:	2310      	movs	r3, #16
 8001cee:	70fb      	strb	r3, [r7, #3]

	value--;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	70fb      	strb	r3, [r7, #3]

	if(!mute){
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d115      	bne.n	8001d28 <RDA5807M_setVolume+0x5e>
		RDA5807M_read(I2Cx, 0x05, (uint16_t *) &r05, 1);
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	2301      	movs	r3, #1
 8001d02:	2105      	movs	r1, #5
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe10 	bl	800192a <RDA5807M_read>
		r05.Volume = value;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	7a3b      	ldrb	r3, [r7, #8]
 8001d14:	f362 0303 	bfi	r3, r2, #0, #4
 8001d18:	723b      	strb	r3, [r7, #8]
		RDA5807M_write(I2Cx, 0x05, (uint16_t *) &r05, 1);
 8001d1a:	f107 0208 	add.w	r2, r7, #8
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2105      	movs	r1, #5
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fda9 	bl	800187a <RDA5807M_write>
	}

	RDA5807M_read(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2102      	movs	r1, #2
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fdfa 	bl	800192a <RDA5807M_read>
	if(mute) r02.Demute = 0;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <RDA5807M_setVolume+0x7c>
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	f36f 1386 	bfc	r3, #6, #1
 8001d42:	737b      	strb	r3, [r7, #13]
 8001d44:	e003      	b.n	8001d4e <RDA5807M_setVolume+0x84>
	else r02.Demute = 1;
 8001d46:	7b7b      	ldrb	r3, [r7, #13]
 8001d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4c:	737b      	strb	r3, [r7, #13]
	RDA5807M_write(I2Cx, 0x02, (uint16_t *) &r02, 1);
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2301      	movs	r3, #1
 8001d54:	2102      	movs	r1, #2
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fd8f 	bl	800187a <RDA5807M_write>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <RDA5807M_setFreq>:

void RDA5807M_setFreq(I2C_HandleTypeDef *I2Cx, uint16_t freq){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
	Reg03h r03;
	if(freq < 870) freq = 870;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	f240 3265 	movw	r2, #869	; 0x365
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d803      	bhi.n	8001d82 <RDA5807M_setFreq+0x1e>
 8001d7a:	f240 3366 	movw	r3, #870	; 0x366
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	e006      	b.n	8001d90 <RDA5807M_setFreq+0x2c>
	else if(freq > 1080) freq = 1080;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8001d88:	d902      	bls.n	8001d90 <RDA5807M_setFreq+0x2c>
 8001d8a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001d8e:	807b      	strh	r3, [r7, #2]

	freq -= 870;
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 8001d96:	807b      	strh	r3, [r7, #2]

	RDA5807M_read(I2Cx, 0x03, (uint16_t *) &r03, 1);
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2103      	movs	r1, #3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fdc2 	bl	800192a <RDA5807M_read>
	r03.Channel_Select = freq;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	89bb      	ldrh	r3, [r7, #12]
 8001db0:	f362 138f 	bfi	r3, r2, #6, #10
 8001db4:	81bb      	strh	r3, [r7, #12]
	r03.Tune = 1;
 8001db6:	7b3b      	ldrb	r3, [r7, #12]
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	733b      	strb	r3, [r7, #12]
	RDA5807M_write(I2Cx, 0x03, (uint16_t *) &r03, 1);
 8001dbe:	f107 020c 	add.w	r2, r7, #12
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fd57 	bl	800187a <RDA5807M_write>
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <RDA5807M_getFreq>:

uint16_t RDA5807M_getFreq(I2C_HandleTypeDef *I2Cx){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;
	uint16_t freq;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	2301      	movs	r3, #1
 8001de2:	210a      	movs	r1, #10
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fda0 	bl	800192a <RDA5807M_read>
	freq = r0A.Read_channel;
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	81fb      	strh	r3, [r7, #14]
	freq = freq/4;
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(freq == 319) return 0;
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f240 123f 	movw	r2, #319	; 0x13f
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <RDA5807M_getFreq+0x34>
 8001e04:	2300      	movs	r3, #0
 8001e06:	e004      	b.n	8001e12 <RDA5807M_getFreq+0x3e>

	freq += 870;
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	f203 3366 	addw	r3, r3, #870	; 0x366
 8001e0e:	81fb      	strh	r3, [r7, #14]

	return freq;
 8001e10:	89fb      	ldrh	r3, [r7, #14]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <RDA5807M_readRDS>:



bool RDA5807M_readRDS(I2C_HandleTypeDef *I2Cx){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	Reg0Ah r0A;
	Reg0Bh r0B;

	RDA5807M_read(I2Cx, 0x0A, (uint16_t *) &r0A, 1);
 8001e24:	f107 020c 	add.w	r2, r7, #12
 8001e28:	2301      	movs	r3, #1
 8001e2a:	210a      	movs	r1, #10
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fd7c 	bl	800192a <RDA5807M_read>
	RDA5807M_read(I2Cx, 0x0B, (uint16_t *) &r0B, 1);
 8001e32:	f107 0208 	add.w	r2, r7, #8
 8001e36:	2301      	movs	r3, #1
 8001e38:	210b      	movs	r1, #11
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fd75 	bl	800192a <RDA5807M_read>


	RDA5807M_read(I2Cx, 0x0C, (uint16_t *) &RDS_BlockA, 1);
 8001e40:	2301      	movs	r3, #1
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <RDA5807M_readRDS+0xc0>)
 8001e44:	210c      	movs	r1, #12
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fd6f 	bl	800192a <RDA5807M_read>
	RDA5807M_read(I2Cx, 0x0D, (uint16_t *) &RDS_BlockB, 1);
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <RDA5807M_readRDS+0xc4>)
 8001e50:	210d      	movs	r1, #13
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fd69 	bl	800192a <RDA5807M_read>
	RDA5807M_read(I2Cx, 0x0E, (uint16_t *) &RDS_BlockC, 1);
 8001e58:	2301      	movs	r3, #1
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <RDA5807M_readRDS+0xc8>)
 8001e5c:	210e      	movs	r1, #14
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fd63 	bl	800192a <RDA5807M_read>
	RDA5807M_read(I2Cx, 0x0F, (uint16_t *) &RDS_BlockD, 1);
 8001e64:	2301      	movs	r3, #1
 8001e66:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <RDA5807M_readRDS+0xcc>)
 8001e68:	210f      	movs	r1, #15
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fd5d 	bl	800192a <RDA5807M_read>

	if(r0B.BLERB >0 || r0B.BLERA >0){
 8001e70:	7a3b      	ldrb	r3, [r7, #8]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <RDA5807M_readRDS+0x6c>
 8001e7c:	7a3b      	ldrb	r3, [r7, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <RDA5807M_readRDS+0x70>
						return false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e022      	b.n	8001ed2 <RDA5807M_readRDS+0xb6>
	}

	if(!r0A.RDS_Ready){
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <RDA5807M_readRDS+0x80>
		return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e01a      	b.n	8001ed2 <RDA5807M_readRDS+0xb6>
	}

	if(r0A.RDS_Ready){
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <RDA5807M_readRDS+0xb4>
		if(!r0B.ABCD_E){
 8001ea8:	7a3b      	ldrb	r3, [r7, #8]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10d      	bne.n	8001ed0 <RDA5807M_readRDS+0xb4>

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <RDA5807M_readRDS+0xd0>)
 8001ebc:	f000 fe28 	bl	8002b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec6:	4809      	ldr	r0, [pc, #36]	; (8001eec <RDA5807M_readRDS+0xd0>)
 8001ec8:	f000 fe22 	bl	8002b10 <HAL_GPIO_WritePin>
			RDA5807M_processRDS();
 8001ecc:	f000 f888 	bl	8001fe0 <RDA5807M_processRDS>
		}
	}
	return true;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200001e0 	.word	0x200001e0
 8001ee0:	200001ee 	.word	0x200001ee
 8001ee4:	2000017e 	.word	0x2000017e
 8001ee8:	20000184 	.word	0x20000184
 8001eec:	40020c00 	.word	0x40020c00

08001ef0 <RDA5807M_getStationName>:

char* RDA5807M_getStationName(){
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	return ActualStationName;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <RDA5807M_getStationName+0x10>)
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200000d8 	.word	0x200000d8

08001f04 <RDA5807M_resetRDS_settings>:


void RDA5807M_resetRDS_settings(I2C_HandleTypeDef *I2Cx){//reset RDSa
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	Reg02h r02;
	r02.Enable 					= 1;
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	733b      	strb	r3, [r7, #12]
	r02.Soft_Reset 				= 0;
 8001f14:	7b3b      	ldrb	r3, [r7, #12]
 8001f16:	f36f 0341 	bfc	r3, #1, #1
 8001f1a:	733b      	strb	r3, [r7, #12]
	r02.New_Demodulate 			= 1;
 8001f1c:	7b3b      	ldrb	r3, [r7, #12]
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	733b      	strb	r3, [r7, #12]
	r02.RDS_Enable 				= 0;
 8001f24:	7b3b      	ldrb	r3, [r7, #12]
 8001f26:	f36f 03c3 	bfc	r3, #3, #1
 8001f2a:	733b      	strb	r3, [r7, #12]
	r02.CLK_Mode 				= 0;
 8001f2c:	7b3b      	ldrb	r3, [r7, #12]
 8001f2e:	f36f 1306 	bfc	r3, #4, #3
 8001f32:	733b      	strb	r3, [r7, #12]
	r02.Seek_Mode				= 0;
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	f36f 13c7 	bfc	r3, #7, #1
 8001f3a:	733b      	strb	r3, [r7, #12]
	r02.Seek					= 0;
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	f36f 0300 	bfc	r3, #0, #1
 8001f42:	737b      	strb	r3, [r7, #13]
	r02.Seek_Up					= 1;
 8001f44:	7b7b      	ldrb	r3, [r7, #13]
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	737b      	strb	r3, [r7, #13]
	r02.RCLK_Dir_In_Mode		= 0;
 8001f4c:	7b7b      	ldrb	r3, [r7, #13]
 8001f4e:	f36f 0382 	bfc	r3, #2, #1
 8001f52:	737b      	strb	r3, [r7, #13]
	r02.RCLK_Non_Calib			= 0;
 8001f54:	7b7b      	ldrb	r3, [r7, #13]
 8001f56:	f36f 03c3 	bfc	r3, #3, #1
 8001f5a:	737b      	strb	r3, [r7, #13]
	r02.Bass					= 0;
 8001f5c:	7b7b      	ldrb	r3, [r7, #13]
 8001f5e:	f36f 1304 	bfc	r3, #4, #1
 8001f62:	737b      	strb	r3, [r7, #13]
	r02.Mono					= 0;
 8001f64:	7b7b      	ldrb	r3, [r7, #13]
 8001f66:	f36f 1345 	bfc	r3, #5, #1
 8001f6a:	737b      	strb	r3, [r7, #13]
	r02.Demute					= 1;
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	737b      	strb	r3, [r7, #13]
	r02.DHIZ					= 1;
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7a:	737b      	strb	r3, [r7, #13]
	RDA5807M_writeRegister(I2Cx,(uint16_t *) &r02,1);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2201      	movs	r2, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fca8 	bl	80018da <RDA5807M_writeRegister>
	r02.RDS_Enable              = 1;
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	733b      	strb	r3, [r7, #12]
	RDA5807M_writeRegister(I2Cx,(uint16_t *) &r02,1);
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	2201      	movs	r2, #1
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fc9d 	bl	80018da <RDA5807M_writeRegister>

	strcpy(StationName, "        ");
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <RDA5807M_resetRDS_settings+0xc8>)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <RDA5807M_resetRDS_settings+0xcc>)
 8001fa4:	cb03      	ldmia	r3!, {r0, r1}
 8001fa6:	6010      	str	r0, [r2, #0]
 8001fa8:	6051      	str	r1, [r2, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	7213      	strb	r3, [r2, #8]
	RadReady = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <RDA5807M_resetRDS_settings+0xd0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
	strcpy(ActualStationName , "RadPogod");
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <RDA5807M_resetRDS_settings+0xd4>)
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <RDA5807M_resetRDS_settings+0xd8>)
 8001fb8:	cb03      	ldmia	r3!, {r0, r1}
 8001fba:	6010      	str	r0, [r2, #0]
 8001fbc:	6051      	str	r1, [r2, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	7213      	strb	r3, [r2, #8]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200001e4 	.word	0x200001e4
 8001fd0:	08005e04 	.word	0x08005e04
 8001fd4:	200000d6 	.word	0x200000d6
 8001fd8:	200000d8 	.word	0x200000d8
 8001fdc:	08005e10 	.word	0x08005e10

08001fe0 <RDA5807M_processRDS>:



void RDA5807M_processRDS(){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	unsigned char offset, char1, char2;
	int RDS_Group;
	RDS_Group = RDS_BlockB & 0xF800;
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <RDA5807M_processRDS+0x19c>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8001fee:	607b      	str	r3, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff4:	4862      	ldr	r0, [pc, #392]	; (8002180 <RDA5807M_processRDS+0x1a0>)
 8001ff6:	f000 fda4 	bl	8002b42 <HAL_GPIO_TogglePin>

	RDS_Group= RDS_BlockB >>10;
 8001ffa:	4b60      	ldr	r3, [pc, #384]	; (800217c <RDA5807M_processRDS+0x19c>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	b29b      	uxth	r3, r3
 8002002:	607b      	str	r3, [r7, #4]
	if(RDS_Group == 0x0001){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 80b3 	bne.w	8002172 <RDA5807M_processRDS+0x192>

		offset = (RDS_BlockB & 0x03);
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <RDA5807M_processRDS+0x19c>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	70fb      	strb	r3, [r7, #3]
		char1 = (char)(RDS_BlockD >> 8);
 8002018:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <RDA5807M_processRDS+0x1a4>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b29b      	uxth	r3, r3
 8002020:	70bb      	strb	r3, [r7, #2]
		char2 = (char)(RDS_BlockD & 0x00FF);
 8002022:	4b58      	ldr	r3, [pc, #352]	; (8002184 <RDA5807M_processRDS+0x1a4>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	707b      	strb	r3, [r7, #1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002028:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800202c:	4854      	ldr	r0, [pc, #336]	; (8002180 <RDA5807M_processRDS+0x1a0>)
 800202e:	f000 fd88 	bl	8002b42 <HAL_GPIO_TogglePin>
		switch (offset){
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	2b03      	cmp	r3, #3
 8002036:	f200 8087 	bhi.w	8002148 <RDA5807M_processRDS+0x168>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <RDA5807M_processRDS+0x60>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002051 	.word	0x08002051
 8002044:	0800208f 	.word	0x0800208f
 8002048:	080020cd 	.word	0x080020cd
 800204c:	0800210b 	.word	0x0800210b
		case 0:
			if(StationName[0]!=char1 || StationName[1]!=char2){
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	78ba      	ldrb	r2, [r7, #2]
 8002056:	429a      	cmp	r2, r3
 8002058:	d104      	bne.n	8002064 <RDA5807M_processRDS+0x84>
 800205a:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	787a      	ldrb	r2, [r7, #1]
 8002060:	429a      	cmp	r2, r3
 8002062:	d077      	beq.n	8002154 <RDA5807M_processRDS+0x174>
				if(RadReady== 0xFF) RadReady = 0;
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d102      	bne.n	8002072 <RDA5807M_processRDS+0x92>
 800206c:	4b47      	ldr	r3, [pc, #284]	; (800218c <RDA5807M_processRDS+0x1ac>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
				StationName[0]=char1;
 8002072:	4a45      	ldr	r2, [pc, #276]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 8002074:	78bb      	ldrb	r3, [r7, #2]
 8002076:	7013      	strb	r3, [r2, #0]
				StationName[1]=char2;
 8002078:	4a43      	ldr	r2, [pc, #268]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800207a:	787b      	ldrb	r3, [r7, #1]
 800207c:	7053      	strb	r3, [r2, #1]
				RadReady = RadReady | 0xC0 ;
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b40      	ldr	r3, [pc, #256]	; (800218c <RDA5807M_processRDS+0x1ac>)
 800208a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800208c:	e062      	b.n	8002154 <RDA5807M_processRDS+0x174>
		case 1:
			if(StationName[2]!=char1 || StationName[3]!=char2){
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 8002090:	789b      	ldrb	r3, [r3, #2]
 8002092:	78ba      	ldrb	r2, [r7, #2]
 8002094:	429a      	cmp	r2, r3
 8002096:	d104      	bne.n	80020a2 <RDA5807M_processRDS+0xc2>
 8002098:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	787a      	ldrb	r2, [r7, #1]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d05a      	beq.n	8002158 <RDA5807M_processRDS+0x178>
				if(RadReady== 0xFF) RadReady = 0;
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d102      	bne.n	80020b0 <RDA5807M_processRDS+0xd0>
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
				StationName[2]=char1;
 80020b0:	4a35      	ldr	r2, [pc, #212]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020b2:	78bb      	ldrb	r3, [r7, #2]
 80020b4:	7093      	strb	r3, [r2, #2]
				StationName[3]=char2;
 80020b6:	4a34      	ldr	r2, [pc, #208]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	70d3      	strb	r3, [r2, #3]
				RadReady = RadReady | 0x30 ;
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020c8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80020ca:	e045      	b.n	8002158 <RDA5807M_processRDS+0x178>
		case 2:
			if(StationName[4]!=char1 || StationName[5]!=char2){
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020ce:	791b      	ldrb	r3, [r3, #4]
 80020d0:	78ba      	ldrb	r2, [r7, #2]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d104      	bne.n	80020e0 <RDA5807M_processRDS+0x100>
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020d8:	795b      	ldrb	r3, [r3, #5]
 80020da:	787a      	ldrb	r2, [r7, #1]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d03d      	beq.n	800215c <RDA5807M_processRDS+0x17c>
				if(RadReady== 0xFF) RadReady = 0;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2bff      	cmp	r3, #255	; 0xff
 80020e6:	d102      	bne.n	80020ee <RDA5807M_processRDS+0x10e>
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
				StationName[4]=char1;
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020f0:	78bb      	ldrb	r3, [r7, #2]
 80020f2:	7113      	strb	r3, [r2, #4]
				StationName[5]=char2;
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 80020f6:	787b      	ldrb	r3, [r7, #1]
 80020f8:	7153      	strb	r3, [r2, #5]
				RadReady = RadReady | 0x0C ;
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <RDA5807M_processRDS+0x1ac>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f043 030c 	orr.w	r3, r3, #12
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002106:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002108:	e028      	b.n	800215c <RDA5807M_processRDS+0x17c>
		case 3:
			if(StationName[6]!=char1 || StationName[7]!=char2){
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	78ba      	ldrb	r2, [r7, #2]
 8002110:	429a      	cmp	r2, r3
 8002112:	d104      	bne.n	800211e <RDA5807M_processRDS+0x13e>
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 8002116:	79db      	ldrb	r3, [r3, #7]
 8002118:	787a      	ldrb	r2, [r7, #1]
 800211a:	429a      	cmp	r2, r3
 800211c:	d020      	beq.n	8002160 <RDA5807M_processRDS+0x180>
				if(RadReady== 0xFF) RadReady = 0;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	d102      	bne.n	800212c <RDA5807M_processRDS+0x14c>
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
				StationName[6]=char1;
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800212e:	78bb      	ldrb	r3, [r7, #2]
 8002130:	7193      	strb	r3, [r2, #6]
				StationName[7]=char2;
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	71d3      	strb	r3, [r2, #7]
				RadReady = RadReady | 0x03 ;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <RDA5807M_processRDS+0x1ac>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f043 0303 	orr.w	r3, r3, #3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002144:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002146:	e00b      	b.n	8002160 <RDA5807M_processRDS+0x180>
		default:
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <RDA5807M_processRDS+0x1a0>)
 800214e:	f000 fcf8 	bl	8002b42 <HAL_GPIO_TogglePin>
			break;
 8002152:	e006      	b.n	8002162 <RDA5807M_processRDS+0x182>
			break;
 8002154:	bf00      	nop
 8002156:	e004      	b.n	8002162 <RDA5807M_processRDS+0x182>
			break;
 8002158:	bf00      	nop
 800215a:	e002      	b.n	8002162 <RDA5807M_processRDS+0x182>
			break;
 800215c:	bf00      	nop
 800215e:	e000      	b.n	8002162 <RDA5807M_processRDS+0x182>
			break;
 8002160:	bf00      	nop
		}
		if(RadReady == 0xFF){
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <RDA5807M_processRDS+0x1ac>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d103      	bne.n	8002172 <RDA5807M_processRDS+0x192>
			strcpy(ActualStationName , StationName);
 800216a:	4907      	ldr	r1, [pc, #28]	; (8002188 <RDA5807M_processRDS+0x1a8>)
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <RDA5807M_processRDS+0x1b0>)
 800216e:	f003 fac1 	bl	80056f4 <strcpy>
		}
	}

}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200001ee 	.word	0x200001ee
 8002180:	40020c00 	.word	0x40020c00
 8002184:	20000184 	.word	0x20000184
 8002188:	200001e4 	.word	0x200001e4
 800218c:	200000d6 	.word	0x200000d6
 8002190:	200000d8 	.word	0x200000d8

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_I2C_MspInit+0x84>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12b      	bne.n	800225e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_I2C_MspInit+0x88>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_I2C_MspInit+0x88>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_I2C_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002222:	23c0      	movs	r3, #192	; 0xc0
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002226:	2312      	movs	r3, #18
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222a:	2301      	movs	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002232:	2304      	movs	r3, #4
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <HAL_I2C_MspInit+0x8c>)
 800223e:	f000 fab5 	bl	80027ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_I2C_MspInit+0x88>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_I2C_MspInit+0x88>)
 800224c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_I2C_MspInit+0x88>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005400 	.word	0x40005400
 800226c:	40023800 	.word	0x40023800
 8002270:	40020400 	.word	0x40020400

08002274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_TIM_Base_MspInit+0x70>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022a2:	e01a      	b.n	80022da <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_TIM_Base_MspInit+0x78>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d115      	bne.n	80022da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_TIM_Base_MspInit+0x74>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	201e      	movs	r0, #30
 80022d0:	f000 fa35 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022d4:	201e      	movs	r0, #30
 80022d6:	f000 fa4e 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40000800 	.word	0x40000800

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002344:	f000 f8de 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM4_IRQHandler+0x10>)
 8002352:	f002 fd0c 	bl	8004d6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200000e8 	.word	0x200000e8

08002360 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002364:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002368:	f000 fc06 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800236c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002370:	f000 fc02 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002378:	f000 fbfe 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800237c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002380:	f000 fbfa 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_sbrk+0x50>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x16>
		heap_end = &end;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <_sbrk+0x50>)
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <_sbrk+0x54>)
 800239c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <_sbrk+0x50>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <_sbrk+0x50>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	466a      	mov	r2, sp
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d907      	bls.n	80023c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023b2:	f003 f88d 	bl	80054d0 <__errno>
 80023b6:	4602      	mov	r2, r0
 80023b8:	230c      	movs	r3, #12
 80023ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c0:	e006      	b.n	80023d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <_sbrk+0x50>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <_sbrk+0x50>)
 80023cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200000c4 	.word	0x200000c4
 80023dc:	20000278 	.word	0x20000278

080023e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <SystemInit+0x28>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <SystemInit+0x28>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SystemInit+0x28>)
 80023f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023fa:	609a      	str	r2, [r3, #8]
#endif
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002444 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002410:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002412:	e003      	b.n	800241c <LoopCopyDataInit>

08002414 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002416:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002418:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800241a:	3104      	adds	r1, #4

0800241c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002420:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002422:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002424:	d3f6      	bcc.n	8002414 <CopyDataInit>
  ldr  r2, =_sbss
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002428:	e002      	b.n	8002430 <LoopFillZerobss>

0800242a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800242a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800242c:	f842 3b04 	str.w	r3, [r2], #4

08002430 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002432:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002434:	d3f9      	bcc.n	800242a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002436:	f7ff ffd3 	bl	80023e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 f84f 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe ff73 	bl	8001328 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002444:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002448:	08005e78 	.word	0x08005e78
  ldr  r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002450:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002454:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002458:	20000278 	.word	0x20000278

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 f94d 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fe7e 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f965 	bl	8002792 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	f000 f92d 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000014 	.word	0x20000014
 80024fc:	2000001c 	.word	0x2000001c
 8002500:	20000018 	.word	0x20000018

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000001c 	.word	0x2000001c
 8002528:	20000270 	.word	0x20000270

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000270 	.word	0x20000270

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff ffee 	bl	800252c <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_Delay+0x40>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffde 	bl	800252c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000001c 	.word	0x2000001c

08002588 <__NVIC_SetPriorityGrouping>:
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff29 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff3e 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff8e 	bl	800267c <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5d 	bl	8002628 <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff31 	bl	80025ec <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e16b      	b.n	8002aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 815a 	bne.w	8002a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00b      	beq.n	8002806 <HAL_GPIO_Init+0x5a>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027fa:	2b11      	cmp	r3, #17
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b12      	cmp	r3, #18
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0xfc>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80b4 	beq.w	8002a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_GPIO_Init+0x308>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a5e      	ldr	r2, [pc, #376]	; (8002ab4 <HAL_GPIO_Init+0x308>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <HAL_GPIO_Init+0x308>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_GPIO_Init+0x30c>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a51      	ldr	r2, [pc, #324]	; (8002abc <HAL_GPIO_Init+0x310>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02b      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a50      	ldr	r2, [pc, #320]	; (8002ac0 <HAL_GPIO_Init+0x314>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d025      	beq.n	80029ce <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4f      	ldr	r2, [pc, #316]	; (8002ac4 <HAL_GPIO_Init+0x318>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <HAL_GPIO_Init+0x31c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d019      	beq.n	80029c6 <HAL_GPIO_Init+0x21a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4d      	ldr	r2, [pc, #308]	; (8002acc <HAL_GPIO_Init+0x320>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x216>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4c      	ldr	r2, [pc, #304]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00d      	beq.n	80029be <HAL_GPIO_Init+0x212>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <HAL_GPIO_Init+0x328>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4a      	ldr	r2, [pc, #296]	; (8002ad8 <HAL_GPIO_Init+0x32c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_GPIO_Init+0x20a>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00e      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029b6:	2308      	movs	r3, #8
 80029b8:	e00c      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e00a      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029be:	2305      	movs	r3, #5
 80029c0:	e008      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029c2:	2304      	movs	r3, #4
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029c6:	2303      	movs	r3, #3
 80029c8:	e004      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029d2:	2300      	movs	r3, #0
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f002 0203 	and.w	r2, r2, #3
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	4093      	lsls	r3, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e4:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_GPIO_Init+0x30c>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_GPIO_Init+0x330>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a16:	4a31      	ldr	r2, [pc, #196]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	f67f ae90 	bls.w	80027c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3724      	adds	r7, #36	; 0x24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e001      	b.n	8002b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	401a      	ands	r2, r3
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d104      	bne.n	8002b66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	041a      	lsls	r2, r3, #16
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fa40 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40013c00 	.word	0x40013c00

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e11f      	b.n	8002dfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fb08 	bl	80021e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f002 f828 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a7b      	ldr	r2, [pc, #492]	; (8002e04 <HAL_I2C_Init+0x25c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d807      	bhi.n	8002c2c <HAL_I2C_Init+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_I2C_Init+0x260>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e006      	b.n	8002c3a <HAL_I2C_Init+0x92>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_I2C_Init+0x264>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0db      	b.n	8002dfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a72      	ldr	r2, [pc, #456]	; (8002e10 <HAL_I2C_Init+0x268>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9b      	lsrs	r3, r3, #18
 8002c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a64      	ldr	r2, [pc, #400]	; (8002e04 <HAL_I2C_Init+0x25c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <HAL_I2C_Init+0xd4>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	e009      	b.n	8002c90 <HAL_I2C_Init+0xe8>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	4a63      	ldr	r2, [pc, #396]	; (8002e14 <HAL_I2C_Init+0x26c>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4956      	ldr	r1, [pc, #344]	; (8002e04 <HAL_I2C_Init+0x25c>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d80d      	bhi.n	8002ccc <HAL_I2C_Init+0x124>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e59      	subs	r1, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	bf38      	it	cc
 8002cc8:	2304      	movcc	r3, #4
 8002cca:	e04f      	b.n	8002d6c <HAL_I2C_Init+0x1c4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d111      	bne.n	8002cf8 <HAL_I2C_Init+0x150>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e012      	b.n	8002d1e <HAL_I2C_Init+0x176>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	0099      	lsls	r1, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Init+0x17e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e022      	b.n	8002d6c <HAL_I2C_Init+0x1c4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_I2C_Init+0x1a4>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e58      	subs	r0, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	440b      	add	r3, r1
 8002d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4a:	e00f      	b.n	8002d6c <HAL_I2C_Init+0x1c4>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	6809      	ldr	r1, [r1, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6911      	ldr	r1, [r2, #16]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	000186a0 	.word	0x000186a0
 8002e08:	001e847f 	.word	0x001e847f
 8002e0c:	003d08ff 	.word	0x003d08ff
 8002e10:	431bde83 	.word	0x431bde83
 8002e14:	10624dd3 	.word	0x10624dd3

08002e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fb7e 	bl	800252c <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 80e0 	bne.w	8003000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2319      	movs	r3, #25
 8002e46:	2201      	movs	r2, #1
 8002e48:	4970      	ldr	r1, [pc, #448]	; (800300c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f001 f8f0 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0d3      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x50>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0cc      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d007      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	893a      	ldrh	r2, [r7, #8]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a50      	ldr	r2, [pc, #320]	; (8003010 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed0:	8979      	ldrh	r1, [r7, #10]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fde2 	bl	8003aa0 <I2C_MasterRequestWrite>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e08d      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002efc:	e066      	b.n	8002fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6a39      	ldr	r1, [r7, #32]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f001 f96a 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06b      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d11b      	bne.n	8002fa0 <HAL_I2C_Master_Transmit+0x188>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	6a39      	ldr	r1, [r7, #32]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f001 f95a 	bl	800425e <I2C_WaitOnBTFFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e01a      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d194      	bne.n	8002efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000

08003014 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
 8003024:	4613      	mov	r3, r2
 8003026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff fa80 	bl	800252c <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 820b 	bne.w	8003452 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	497c      	ldr	r1, [pc, #496]	; (8003238 <HAL_I2C_Master_Receive+0x224>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fff2 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e1fe      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_Master_Receive+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e1f7      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2222      	movs	r2, #34	; 0x22
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2210      	movs	r2, #16
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a5c      	ldr	r2, [pc, #368]	; (800323c <HAL_I2C_Master_Receive+0x228>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fd66 	bl	8003ba4 <I2C_MasterRequestRead>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1b8      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d113      	bne.n	8003112 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e18c      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b01      	cmp	r3, #1
 8003118:	d11b      	bne.n	8003152 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e16c      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b02      	cmp	r3, #2
 8003158:	d11b      	bne.n	8003192 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	e14c      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031b8:	e138      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b03      	cmp	r3, #3
 80031c0:	f200 80f1 	bhi.w	80033a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d123      	bne.n	8003214 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f001 f885 	bl	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e139      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003212:	e10b      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	d14e      	bne.n	80032ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	2200      	movs	r2, #0
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <HAL_I2C_Master_Receive+0x22c>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 ff02 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e10e      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
 8003236:	bf00      	nop
 8003238:	00100002 	.word	0x00100002
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b8:	e0b8      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	2200      	movs	r2, #0
 80032c2:	4966      	ldr	r1, [pc, #408]	; (800345c <HAL_I2C_Master_Receive+0x448>)
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 feb3 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0bf      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2200      	movs	r2, #0
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_I2C_Master_Receive+0x448>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fe85 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e091      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a4:	e042      	b.n	800342c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 ff98 	bl	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e04c      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d118      	bne.n	800342c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f aec2 	bne.w	80031ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	00010004 	.word	0x00010004

08003460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7ff f857 	bl	800252c <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 80d9 	bne.w	8003640 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	496d      	ldr	r1, [pc, #436]	; (800364c <HAL_I2C_Mem_Write+0x1ec>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fdc9 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0cc      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Write+0x56>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0c5      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_I2C_Mem_Write+0x1f0>)
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fc04 	bl	8003d3c <I2C_RequestMemoryWrite>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d052      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e081      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fe4a 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06b      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x180>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1aa      	bne.n	800353e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fe36 	bl	800425e <I2C_WaitOnBTFFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e016      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000

08003654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800366e:	f7fe ff5d 	bl	800252c <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	f040 8208 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2319      	movs	r3, #25
 8003688:	2201      	movs	r2, #1
 800368a:	497b      	ldr	r1, [pc, #492]	; (8003878 <HAL_I2C_Mem_Read+0x224>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fccf 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
 800369a:	e1fb      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_I2C_Mem_Read+0x56>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e1f4      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d007      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2222      	movs	r2, #34	; 0x22
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a5b      	ldr	r2, [pc, #364]	; (800387c <HAL_I2C_Mem_Read+0x228>)
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003712:	88f8      	ldrh	r0, [r7, #6]
 8003714:	893a      	ldrh	r2, [r7, #8]
 8003716:	8979      	ldrh	r1, [r7, #10]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4603      	mov	r3, r0
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fb9e 	bl	8003e64 <I2C_RequestMemoryRead>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1b0      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e184      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	2b01      	cmp	r3, #1
 8003768:	d11b      	bne.n	80037a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e164      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d11b      	bne.n	80037e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	e144      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037f8:	e138      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b03      	cmp	r3, #3
 8003800:	f200 80f1 	bhi.w	80039e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	2b01      	cmp	r3, #1
 800380a:	d123      	bne.n	8003854 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fd65 	bl	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e139      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003852:	e10b      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	2b02      	cmp	r3, #2
 800385a:	d14e      	bne.n	80038fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	2200      	movs	r2, #0
 8003864:	4906      	ldr	r1, [pc, #24]	; (8003880 <HAL_I2C_Mem_Read+0x22c>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fbe2 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e10e      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
 8003876:	bf00      	nop
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000
 8003880:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f8:	e0b8      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2200      	movs	r2, #0
 8003902:	4966      	ldr	r1, [pc, #408]	; (8003a9c <HAL_I2C_Mem_Read+0x448>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fb93 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0bf      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2200      	movs	r2, #0
 800395e:	494f      	ldr	r1, [pc, #316]	; (8003a9c <HAL_I2C_Mem_Read+0x448>)
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fb65 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e091      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e4:	e042      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fc78 	bl	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e04c      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d118      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f aec2 	bne.w	80037fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3728      	adds	r7, #40	; 0x28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	00010004 	.word	0x00010004

08003aa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d006      	beq.n	8003aca <I2C_MasterRequestWrite+0x2a>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d003      	beq.n	8003aca <I2C_MasterRequestWrite+0x2a>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac8:	d108      	bne.n	8003adc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e00b      	b.n	8003af4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	2b12      	cmp	r3, #18
 8003ae2:	d107      	bne.n	8003af4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fa95 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e035      	b.n	8003b92 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2e:	d108      	bne.n	8003b42 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	e01b      	b.n	8003b7a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	11db      	asrs	r3, r3, #7
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 0306 	and.w	r3, r3, #6
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f063 030f 	orn	r3, r3, #15
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	490f      	ldr	r1, [pc, #60]	; (8003b9c <I2C_MasterRequestWrite+0xfc>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fabc 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e010      	b.n	8003b92 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4908      	ldr	r1, [pc, #32]	; (8003ba0 <I2C_MasterRequestWrite+0x100>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 faac 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	00010008 	.word	0x00010008
 8003ba0:	00010002 	.word	0x00010002

08003ba4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d006      	beq.n	8003bde <I2C_MasterRequestRead+0x3a>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d003      	beq.n	8003bde <I2C_MasterRequestRead+0x3a>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bdc:	d108      	bne.n	8003bf0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e00b      	b.n	8003c08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	2b11      	cmp	r3, #17
 8003bf6:	d107      	bne.n	8003c08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fa0b 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00c      	beq.n	8003c3a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e078      	b.n	8003d2c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c42:	d108      	bne.n	8003c56 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
 8003c54:	e05e      	b.n	8003d14 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	11db      	asrs	r3, r3, #7
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0306 	and.w	r3, r3, #6
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f063 030f 	orn	r3, r3, #15
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4930      	ldr	r1, [pc, #192]	; (8003d34 <I2C_MasterRequestRead+0x190>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa32 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e053      	b.n	8003d2c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c84:	897b      	ldrh	r3, [r7, #10]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4929      	ldr	r1, [pc, #164]	; (8003d38 <I2C_MasterRequestRead+0x194>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fa22 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e043      	b.n	8003d2c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f9aa 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e017      	b.n	8003d2c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cfc:	897b      	ldrh	r3, [r7, #10]
 8003cfe:	11db      	asrs	r3, r3, #7
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f063 030e 	orn	r3, r3, #14
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4907      	ldr	r1, [pc, #28]	; (8003d38 <I2C_MasterRequestRead+0x194>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9df 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010008 	.word	0x00010008
 8003d38:	00010002 	.word	0x00010002

08003d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	4608      	mov	r0, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	817b      	strh	r3, [r7, #10]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	813b      	strh	r3, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f95c 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e05f      	b.n	8003e58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	492c      	ldr	r1, [pc, #176]	; (8003e60 <I2C_RequestMemoryWrite+0x124>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f995 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04c      	b.n	8003e58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	6a39      	ldr	r1, [r7, #32]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9ff 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d107      	bne.n	8003dfc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e02b      	b.n	8003e58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e06:	893b      	ldrh	r3, [r7, #8]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	e021      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e12:	893b      	ldrh	r3, [r7, #8]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	6a39      	ldr	r1, [r7, #32]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f9d9 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d107      	bne.n	8003e48 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e005      	b.n	8003e58 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00010002 	.word	0x00010002

08003e64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8c0 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0a9      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed0:	897b      	ldrh	r3, [r7, #10]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	4951      	ldr	r1, [pc, #324]	; (800402c <I2C_RequestMemoryRead+0x1c8>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f8f9 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e096      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f963 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e075      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]
 8003f48:	e021      	b.n	8003f8e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4a:	893b      	ldrh	r3, [r7, #8]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	6a39      	ldr	r1, [r7, #32]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f93d 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e04f      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f922 	bl	80041dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e034      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f82a 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00c      	beq.n	8003ffc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e013      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ffc:	897b      	ldrh	r3, [r7, #10]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <I2C_RequestMemoryRead+0x1c8>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f863 	bl	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	00010002 	.word	0x00010002

08004030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004040:	e025      	b.n	800408e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d021      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe fa6f 	bl	800252c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d116      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e023      	b.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10d      	bne.n	80040b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	43da      	mvns	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4013      	ands	r3, r2
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	e00c      	b.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d0b6      	beq.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ec:	e051      	b.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fc:	d123      	bne.n	8004146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0204 	orr.w	r2, r3, #4
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e046      	b.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414c:	d021      	beq.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fe f9ed 	bl	800252c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d116      	bne.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e020      	b.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10c      	bne.n	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e00b      	b.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	43da      	mvns	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d18d      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e8:	e02d      	b.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8ce 	bl	800438c <I2C_IsAcknowledgeFailed>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e02d      	b.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004200:	d021      	beq.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe f993 	bl	800252c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d1ca      	bne.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800426a:	e02d      	b.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f88d 	bl	800438c <I2C_IsAcknowledgeFailed>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e02d      	b.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004282:	d021      	beq.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7fe f952 	bl	800252c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d116      	bne.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d1ca      	bne.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ec:	e042      	b.n	8004374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d119      	bne.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0210 	mvn.w	r2, #16
 8004304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e029      	b.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe f8fc 	bl	800252c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d1b5      	bne.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d11b      	bne.n	80043dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f043 0204 	orr.w	r2, r3, #4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e25b      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d075      	beq.n	80044f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440a:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b04      	cmp	r3, #4
 8004414:	d00c      	beq.n	8004430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4ba0      	ldr	r3, [pc, #640]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441e:	2b08      	cmp	r3, #8
 8004420:	d112      	bne.n	8004448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b9d      	ldr	r3, [pc, #628]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d10b      	bne.n	8004448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	4b99      	ldr	r3, [pc, #612]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_RCC_OscConfig+0x108>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d157      	bne.n	80044f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e236      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d106      	bne.n	8004460 <HAL_RCC_OscConfig+0x74>
 8004452:	4b91      	ldr	r3, [pc, #580]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a90      	ldr	r2, [pc, #576]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x98>
 800446a:	4b8b      	ldr	r3, [pc, #556]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a8a      	ldr	r2, [pc, #552]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b88      	ldr	r3, [pc, #544]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a87      	ldr	r2, [pc, #540]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004484:	4b84      	ldr	r3, [pc, #528]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a83      	ldr	r2, [pc, #524]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b81      	ldr	r3, [pc, #516]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a80      	ldr	r2, [pc, #512]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fe f842 	bl	800252c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fe f83e 	bl	800252c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1fb      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b76      	ldr	r3, [pc, #472]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xc0>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fe f82e 	bl	800252c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fe f82a 	bl	800252c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1e7      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0xe8>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d063      	beq.n	80045ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b62      	ldr	r3, [pc, #392]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004516:	2b08      	cmp	r3, #8
 8004518:	d11c      	bne.n	8004554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451a:	4b5f      	ldr	r3, [pc, #380]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	4b5c      	ldr	r3, [pc, #368]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_RCC_OscConfig+0x152>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1bb      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453e:	4b56      	ldr	r3, [pc, #344]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4952      	ldr	r1, [pc, #328]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	e03a      	b.n	80045ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d020      	beq.n	800459e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <HAL_RCC_OscConfig+0x2b0>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd ffe3 	bl	800252c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456a:	f7fd ffdf 	bl	800252c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e19c      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4940      	ldr	r1, [pc, #256]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
 800459c:	e015      	b.n	80045ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_RCC_OscConfig+0x2b0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd ffc2 	bl	800252c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fd ffbe 	bl	800252c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e17b      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d030      	beq.n	8004638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045de:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fd ffa2 	bl	800252c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ec:	f7fd ff9e 	bl	800252c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e15b      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	4b26      	ldr	r3, [pc, #152]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x200>
 800460a:	e015      	b.n	8004638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fd ff8b 	bl	800252c <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461a:	f7fd ff87 	bl	800252c <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e144      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800462e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a0 	beq.w	8004786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_OscConfig+0x2b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d121      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_RCC_OscConfig+0x2b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <HAL_RCC_OscConfig+0x2b8>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fd ff4d 	bl	800252c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e011      	b.n	80046ba <HAL_RCC_OscConfig+0x2ce>
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	42470000 	.word	0x42470000
 80046a0:	42470e80 	.word	0x42470e80
 80046a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a8:	f7fd ff40 	bl	800252c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0fd      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_RCC_OscConfig+0x4d4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d106      	bne.n	80046dc <HAL_RCC_OscConfig+0x2f0>
 80046ce:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
 80046da:	e01c      	b.n	8004716 <HAL_RCC_OscConfig+0x32a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	d10c      	bne.n	80046fe <HAL_RCC_OscConfig+0x312>
 80046e4:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a76      	ldr	r2, [pc, #472]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
 80046f0:	4b74      	ldr	r3, [pc, #464]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a73      	ldr	r2, [pc, #460]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	e00b      	b.n	8004716 <HAL_RCC_OscConfig+0x32a>
 80046fe:	4b71      	ldr	r3, [pc, #452]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a70      	ldr	r2, [pc, #448]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6713      	str	r3, [r2, #112]	; 0x70
 800470a:	4b6e      	ldr	r3, [pc, #440]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	4a6d      	ldr	r2, [pc, #436]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7fd ff05 	bl	800252c <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd ff01 	bl	800252c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0bc      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	4b61      	ldr	r3, [pc, #388]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ee      	beq.n	8004726 <HAL_RCC_OscConfig+0x33a>
 8004748:	e014      	b.n	8004774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474a:	f7fd feef 	bl	800252c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004750:	e00a      	b.n	8004768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fd feeb 	bl	800252c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0a6      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ee      	bne.n	8004752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8092 	beq.w	80048b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004790:	4b4c      	ldr	r3, [pc, #304]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d05c      	beq.n	8004856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d141      	bne.n	8004828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a4:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <HAL_RCC_OscConfig+0x4dc>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd febf 	bl	800252c <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fd febb 	bl	800252c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e078      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c4:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	019b      	lsls	r3, r3, #6
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	4933      	ldr	r1, [pc, #204]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fa:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <HAL_RCC_OscConfig+0x4dc>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fd fe94 	bl	800252c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd fe90 	bl	800252c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e04d      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x41c>
 8004826:	e045      	b.n	80048b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <HAL_RCC_OscConfig+0x4dc>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482e:	f7fd fe7d 	bl	800252c <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004836:	f7fd fe79 	bl	800252c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e036      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x44a>
 8004854:	e02e      	b.n	80048b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e029      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <HAL_RCC_OscConfig+0x4d8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	429a      	cmp	r2, r3
 8004874:	d11c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d115      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004890:	4293      	cmp	r3, r2
 8004892:	d10d      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40007000 	.word	0x40007000
 80048c4:	40023800 	.word	0x40023800
 80048c8:	42470060 	.word	0x42470060

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0cc      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b68      	ldr	r3, [pc, #416]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d90c      	bls.n	8004908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0b8      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d020      	beq.n	8004956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b59      	ldr	r3, [pc, #356]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800492a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a52      	ldr	r2, [pc, #328]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b50      	ldr	r3, [pc, #320]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	494d      	ldr	r1, [pc, #308]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d044      	beq.n	80049ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d119      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	2b03      	cmp	r3, #3
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e067      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b37      	ldr	r3, [pc, #220]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4934      	ldr	r1, [pc, #208]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fd fdb6 	bl	800252c <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd fdb2 	bl	800252c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 020c 	and.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1eb      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d20c      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e032      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4916      	ldr	r1, [pc, #88]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	490e      	ldr	r1, [pc, #56]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a52:	f000 f821 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a56:	4601      	mov	r1, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
 8004a66:	fa21 f303 	lsr.w	r3, r1, r3
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fd16 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023c00 	.word	0x40023c00
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	08005e1c 	.word	0x08005e1c
 8004a90:	20000014 	.word	0x20000014
 8004a94:	20000018 	.word	0x20000018

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aae:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d007      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x32>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d008      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x38>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 80b4 	bne.w	8004c2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b5e      	ldr	r3, [pc, #376]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ac6:	60bb      	str	r3, [r7, #8]
       break;
 8004ac8:	e0b3      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aca:	4b5e      	ldr	r3, [pc, #376]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004acc:	60bb      	str	r3, [r7, #8]
      break;
 8004ace:	e0b0      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ada:	4b58      	ldr	r3, [pc, #352]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04a      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae6:	4b55      	ldr	r3, [pc, #340]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	f04f 0400 	mov.w	r4, #0
 8004af0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	ea03 0501 	and.w	r5, r3, r1
 8004afc:	ea04 0602 	and.w	r6, r4, r2
 8004b00:	4629      	mov	r1, r5
 8004b02:	4632      	mov	r2, r6
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	f04f 0400 	mov.w	r4, #0
 8004b0c:	0154      	lsls	r4, r2, #5
 8004b0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b12:	014b      	lsls	r3, r1, #5
 8004b14:	4619      	mov	r1, r3
 8004b16:	4622      	mov	r2, r4
 8004b18:	1b49      	subs	r1, r1, r5
 8004b1a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	f04f 0400 	mov.w	r4, #0
 8004b26:	0194      	lsls	r4, r2, #6
 8004b28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b2c:	018b      	lsls	r3, r1, #6
 8004b2e:	1a5b      	subs	r3, r3, r1
 8004b30:	eb64 0402 	sbc.w	r4, r4, r2
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	00e2      	lsls	r2, r4, #3
 8004b3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b42:	00d9      	lsls	r1, r3, #3
 8004b44:	460b      	mov	r3, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	195b      	adds	r3, r3, r5
 8004b4a:	eb44 0406 	adc.w	r4, r4, r6
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	0262      	lsls	r2, r4, #9
 8004b58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b5c:	0259      	lsls	r1, r3, #9
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4614      	mov	r4, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	4621      	mov	r1, r4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f04f 0400 	mov.w	r4, #0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4623      	mov	r3, r4
 8004b70:	f7fb fd62 	bl	8000638 <__aeabi_uldivmod>
 8004b74:	4603      	mov	r3, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e049      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	099b      	lsrs	r3, r3, #6
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	ea03 0501 	and.w	r5, r3, r1
 8004b92:	ea04 0602 	and.w	r6, r4, r2
 8004b96:	4629      	mov	r1, r5
 8004b98:	4632      	mov	r2, r6
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	f04f 0400 	mov.w	r4, #0
 8004ba2:	0154      	lsls	r4, r2, #5
 8004ba4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ba8:	014b      	lsls	r3, r1, #5
 8004baa:	4619      	mov	r1, r3
 8004bac:	4622      	mov	r2, r4
 8004bae:	1b49      	subs	r1, r1, r5
 8004bb0:	eb62 0206 	sbc.w	r2, r2, r6
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	f04f 0400 	mov.w	r4, #0
 8004bbc:	0194      	lsls	r4, r2, #6
 8004bbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bc2:	018b      	lsls	r3, r1, #6
 8004bc4:	1a5b      	subs	r3, r3, r1
 8004bc6:	eb64 0402 	sbc.w	r4, r4, r2
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	00e2      	lsls	r2, r4, #3
 8004bd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bd8:	00d9      	lsls	r1, r3, #3
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	195b      	adds	r3, r3, r5
 8004be0:	eb44 0406 	adc.w	r4, r4, r6
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	02a2      	lsls	r2, r4, #10
 8004bee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bf2:	0299      	lsls	r1, r3, #10
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	461a      	mov	r2, r3
 8004c04:	4623      	mov	r3, r4
 8004c06:	f7fb fd17 	bl	8000638 <__aeabi_uldivmod>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c2e:	60bb      	str	r3, [r7, #8]
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	68bb      	ldr	r3, [r7, #8]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000014 	.word	0x20000014

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4601      	mov	r1, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	08005e2c 	.word	0x08005e2c

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01d      	b.n	8004cd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fd fae0 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fa38 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d122      	bne.n	8004dca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d11b      	bne.n	8004dca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0202 	mvn.w	r2, #2
 8004d9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9a5 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004db6:	e005      	b.n	8004dc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f997 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9a8 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d122      	bne.n	8004e1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d11b      	bne.n	8004e1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0204 	mvn.w	r2, #4
 8004dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f97b 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004e0a:	e005      	b.n	8004e18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f96d 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f97e 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d122      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d11b      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0208 	mvn.w	r2, #8
 8004e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2204      	movs	r2, #4
 8004e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f951 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004e5e:	e005      	b.n	8004e6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f943 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f954 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d122      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d11b      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0210 	mvn.w	r2, #16
 8004e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f927 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004eb2:	e005      	b.n	8004ec0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f919 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f92a 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0201 	mvn.w	r2, #1
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc f8e5 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 facf 	bl	80054bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f8ef 	bl	8005128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0220 	mvn.w	r2, #32
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fa99 	bl	80054a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_ConfigClockSource+0x18>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e0a6      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x166>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fbc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d067      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x120>
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d80b      	bhi.n	8004fea <HAL_TIM_ConfigClockSource+0x6c>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d073      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x140>
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d802      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x62>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d06f      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fde:	e078      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d06c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x140>
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d06a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fe8:	e073      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fea:	2b70      	cmp	r3, #112	; 0x70
 8004fec:	d00d      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x8c>
 8004fee:	2b70      	cmp	r3, #112	; 0x70
 8004ff0:	d804      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x7e>
 8004ff2:	2b50      	cmp	r3, #80	; 0x50
 8004ff4:	d033      	beq.n	800505e <HAL_TIM_ConfigClockSource+0xe0>
 8004ff6:	2b60      	cmp	r3, #96	; 0x60
 8004ff8:	d041      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ffa:	e06a      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d066      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x152>
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	d017      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005008:	e063      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f000 f9a9 	bl	8005370 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	609a      	str	r2, [r3, #8]
      break;
 8005036:	e04c      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f000 f992 	bl	8005370 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505a:	609a      	str	r2, [r3, #8]
      break;
 800505c:	e039      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	f000 f906 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2150      	movs	r1, #80	; 0x50
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f95f 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 800507c:	e029      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 f925 	bl	80052da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2160      	movs	r1, #96	; 0x60
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f94f 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 800509c:	e019      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 f8e6 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f93f 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 80050bc:	e009      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 f936 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a40      	ldr	r2, [pc, #256]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d00f      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <TIM_Base_SetConfig+0x118>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a3b      	ldr	r2, [pc, #236]	; (800525c <TIM_Base_SetConfig+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a3a      	ldr	r2, [pc, #232]	; (8005260 <TIM_Base_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02b      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d027      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <TIM_Base_SetConfig+0x118>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d023      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01f      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <TIM_Base_SetConfig+0x120>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01b      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <TIM_Base_SetConfig+0x124>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d017      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a28      	ldr	r2, [pc, #160]	; (8005264 <TIM_Base_SetConfig+0x128>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <TIM_Base_SetConfig+0x12c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00f      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <TIM_Base_SetConfig+0x130>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00b      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a25      	ldr	r2, [pc, #148]	; (8005270 <TIM_Base_SetConfig+0x134>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <TIM_Base_SetConfig+0x138>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a23      	ldr	r2, [pc, #140]	; (8005278 <TIM_Base_SetConfig+0x13c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d108      	bne.n	8005200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0xf8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <TIM_Base_SetConfig+0x124>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40010400 	.word	0x40010400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800
 8005270:	40001800 	.word	0x40001800
 8005274:	40001c00 	.word	0x40001c00
 8005278:	40002000 	.word	0x40002000

0800527c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 030a 	bic.w	r3, r3, #10
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0210 	bic.w	r2, r3, #16
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	031b      	lsls	r3, r3, #12
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005316:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	f043 0307 	orr.w	r3, r3, #7
 800535c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	021a      	lsls	r2, r3, #8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	431a      	orrs	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e05a      	b.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d01d      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a18      	ldr	r2, [pc, #96]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10c      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40001800 	.word	0x40001800

080054a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <__errno>:
 80054d0:	4b01      	ldr	r3, [pc, #4]	; (80054d8 <__errno+0x8>)
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000020 	.word	0x20000020

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0d      	ldr	r6, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1ba4      	subs	r4, r4, r6
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2500      	movs	r5, #0
 80054e8:	42a5      	cmp	r5, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4e0b      	ldr	r6, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f000 fc70 	bl	8005dd4 <_init>
 80054f4:	1ba4      	subs	r4, r4, r6
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2500      	movs	r5, #0
 80054fa:	42a5      	cmp	r5, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005504:	4798      	blx	r3
 8005506:	3501      	adds	r5, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800550e:	4798      	blx	r3
 8005510:	3501      	adds	r5, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08005e70 	.word	0x08005e70
 8005518:	08005e70 	.word	0x08005e70
 800551c:	08005e70 	.word	0x08005e70
 8005520:	08005e74 	.word	0x08005e74

08005524 <malloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <malloc+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f000 b859 	b.w	80055e0 <_malloc_r>
 800552e:	bf00      	nop
 8005530:	20000020 	.word	0x20000020

08005534 <memset>:
 8005534:	4402      	add	r2, r0
 8005536:	4603      	mov	r3, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <_free_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4605      	mov	r5, r0
 8005548:	2900      	cmp	r1, #0
 800554a:	d045      	beq.n	80055d8 <_free_r+0x94>
 800554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005550:	1f0c      	subs	r4, r1, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfb8      	it	lt
 8005556:	18e4      	addlt	r4, r4, r3
 8005558:	f000 f8d4 	bl	8005704 <__malloc_lock>
 800555c:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <_free_r+0x98>)
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	4610      	mov	r0, r2
 8005562:	b933      	cbnz	r3, 8005572 <_free_r+0x2e>
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	6014      	str	r4, [r2, #0]
 8005568:	4628      	mov	r0, r5
 800556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800556e:	f000 b8ca 	b.w	8005706 <__malloc_unlock>
 8005572:	42a3      	cmp	r3, r4
 8005574:	d90c      	bls.n	8005590 <_free_r+0x4c>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	1862      	adds	r2, r4, r1
 800557a:	4293      	cmp	r3, r2
 800557c:	bf04      	itt	eq
 800557e:	681a      	ldreq	r2, [r3, #0]
 8005580:	685b      	ldreq	r3, [r3, #4]
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	bf04      	itt	eq
 8005586:	1852      	addeq	r2, r2, r1
 8005588:	6022      	streq	r2, [r4, #0]
 800558a:	6004      	str	r4, [r0, #0]
 800558c:	e7ec      	b.n	8005568 <_free_r+0x24>
 800558e:	4613      	mov	r3, r2
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	b10a      	cbz	r2, 8005598 <_free_r+0x54>
 8005594:	42a2      	cmp	r2, r4
 8005596:	d9fa      	bls.n	800558e <_free_r+0x4a>
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	1858      	adds	r0, r3, r1
 800559c:	42a0      	cmp	r0, r4
 800559e:	d10b      	bne.n	80055b8 <_free_r+0x74>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	4401      	add	r1, r0
 80055a4:	1858      	adds	r0, r3, r1
 80055a6:	4282      	cmp	r2, r0
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	d1dd      	bne.n	8005568 <_free_r+0x24>
 80055ac:	6810      	ldr	r0, [r2, #0]
 80055ae:	6852      	ldr	r2, [r2, #4]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	4401      	add	r1, r0
 80055b4:	6019      	str	r1, [r3, #0]
 80055b6:	e7d7      	b.n	8005568 <_free_r+0x24>
 80055b8:	d902      	bls.n	80055c0 <_free_r+0x7c>
 80055ba:	230c      	movs	r3, #12
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	e7d3      	b.n	8005568 <_free_r+0x24>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	1821      	adds	r1, r4, r0
 80055c4:	428a      	cmp	r2, r1
 80055c6:	bf04      	itt	eq
 80055c8:	6811      	ldreq	r1, [r2, #0]
 80055ca:	6852      	ldreq	r2, [r2, #4]
 80055cc:	6062      	str	r2, [r4, #4]
 80055ce:	bf04      	itt	eq
 80055d0:	1809      	addeq	r1, r1, r0
 80055d2:	6021      	streq	r1, [r4, #0]
 80055d4:	605c      	str	r4, [r3, #4]
 80055d6:	e7c7      	b.n	8005568 <_free_r+0x24>
 80055d8:	bd38      	pop	{r3, r4, r5, pc}
 80055da:	bf00      	nop
 80055dc:	200000c8 	.word	0x200000c8

080055e0 <_malloc_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	1ccd      	adds	r5, r1, #3
 80055e4:	f025 0503 	bic.w	r5, r5, #3
 80055e8:	3508      	adds	r5, #8
 80055ea:	2d0c      	cmp	r5, #12
 80055ec:	bf38      	it	cc
 80055ee:	250c      	movcc	r5, #12
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	4606      	mov	r6, r0
 80055f4:	db01      	blt.n	80055fa <_malloc_r+0x1a>
 80055f6:	42a9      	cmp	r1, r5
 80055f8:	d903      	bls.n	8005602 <_malloc_r+0x22>
 80055fa:	230c      	movs	r3, #12
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	2000      	movs	r0, #0
 8005600:	bd70      	pop	{r4, r5, r6, pc}
 8005602:	f000 f87f 	bl	8005704 <__malloc_lock>
 8005606:	4a21      	ldr	r2, [pc, #132]	; (800568c <_malloc_r+0xac>)
 8005608:	6814      	ldr	r4, [r2, #0]
 800560a:	4621      	mov	r1, r4
 800560c:	b991      	cbnz	r1, 8005634 <_malloc_r+0x54>
 800560e:	4c20      	ldr	r4, [pc, #128]	; (8005690 <_malloc_r+0xb0>)
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	b91b      	cbnz	r3, 800561c <_malloc_r+0x3c>
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f83d 	bl	8005694 <_sbrk_r>
 800561a:	6020      	str	r0, [r4, #0]
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f000 f838 	bl	8005694 <_sbrk_r>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d124      	bne.n	8005672 <_malloc_r+0x92>
 8005628:	230c      	movs	r3, #12
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f86a 	bl	8005706 <__malloc_unlock>
 8005632:	e7e4      	b.n	80055fe <_malloc_r+0x1e>
 8005634:	680b      	ldr	r3, [r1, #0]
 8005636:	1b5b      	subs	r3, r3, r5
 8005638:	d418      	bmi.n	800566c <_malloc_r+0x8c>
 800563a:	2b0b      	cmp	r3, #11
 800563c:	d90f      	bls.n	800565e <_malloc_r+0x7e>
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	50cd      	str	r5, [r1, r3]
 8005642:	18cc      	adds	r4, r1, r3
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f85e 	bl	8005706 <__malloc_unlock>
 800564a:	f104 000b 	add.w	r0, r4, #11
 800564e:	1d23      	adds	r3, r4, #4
 8005650:	f020 0007 	bic.w	r0, r0, #7
 8005654:	1ac3      	subs	r3, r0, r3
 8005656:	d0d3      	beq.n	8005600 <_malloc_r+0x20>
 8005658:	425a      	negs	r2, r3
 800565a:	50e2      	str	r2, [r4, r3]
 800565c:	e7d0      	b.n	8005600 <_malloc_r+0x20>
 800565e:	428c      	cmp	r4, r1
 8005660:	684b      	ldr	r3, [r1, #4]
 8005662:	bf16      	itet	ne
 8005664:	6063      	strne	r3, [r4, #4]
 8005666:	6013      	streq	r3, [r2, #0]
 8005668:	460c      	movne	r4, r1
 800566a:	e7eb      	b.n	8005644 <_malloc_r+0x64>
 800566c:	460c      	mov	r4, r1
 800566e:	6849      	ldr	r1, [r1, #4]
 8005670:	e7cc      	b.n	800560c <_malloc_r+0x2c>
 8005672:	1cc4      	adds	r4, r0, #3
 8005674:	f024 0403 	bic.w	r4, r4, #3
 8005678:	42a0      	cmp	r0, r4
 800567a:	d005      	beq.n	8005688 <_malloc_r+0xa8>
 800567c:	1a21      	subs	r1, r4, r0
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f808 	bl	8005694 <_sbrk_r>
 8005684:	3001      	adds	r0, #1
 8005686:	d0cf      	beq.n	8005628 <_malloc_r+0x48>
 8005688:	6025      	str	r5, [r4, #0]
 800568a:	e7db      	b.n	8005644 <_malloc_r+0x64>
 800568c:	200000c8 	.word	0x200000c8
 8005690:	200000cc 	.word	0x200000cc

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4c06      	ldr	r4, [pc, #24]	; (80056b0 <_sbrk_r+0x1c>)
 8005698:	2300      	movs	r3, #0
 800569a:	4605      	mov	r5, r0
 800569c:	4608      	mov	r0, r1
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	f7fc fe72 	bl	8002388 <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	602b      	str	r3, [r5, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20000274 	.word	0x20000274

080056b4 <siprintf>:
 80056b4:	b40e      	push	{r1, r2, r3}
 80056b6:	b500      	push	{lr}
 80056b8:	b09c      	sub	sp, #112	; 0x70
 80056ba:	ab1d      	add	r3, sp, #116	; 0x74
 80056bc:	9002      	str	r0, [sp, #8]
 80056be:	9006      	str	r0, [sp, #24]
 80056c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c4:	4809      	ldr	r0, [pc, #36]	; (80056ec <siprintf+0x38>)
 80056c6:	9107      	str	r1, [sp, #28]
 80056c8:	9104      	str	r1, [sp, #16]
 80056ca:	4909      	ldr	r1, [pc, #36]	; (80056f0 <siprintf+0x3c>)
 80056cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d0:	9105      	str	r1, [sp, #20]
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	a902      	add	r1, sp, #8
 80056d8:	f000 f870 	bl	80057bc <_svfiprintf_r>
 80056dc:	9b02      	ldr	r3, [sp, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	b01c      	add	sp, #112	; 0x70
 80056e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e8:	b003      	add	sp, #12
 80056ea:	4770      	bx	lr
 80056ec:	20000020 	.word	0x20000020
 80056f0:	ffff0208 	.word	0xffff0208

080056f4 <strcpy>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056fa:	f803 2b01 	strb.w	r2, [r3], #1
 80056fe:	2a00      	cmp	r2, #0
 8005700:	d1f9      	bne.n	80056f6 <strcpy+0x2>
 8005702:	4770      	bx	lr

08005704 <__malloc_lock>:
 8005704:	4770      	bx	lr

08005706 <__malloc_unlock>:
 8005706:	4770      	bx	lr

08005708 <__ssputs_r>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	688e      	ldr	r6, [r1, #8]
 800570e:	429e      	cmp	r6, r3
 8005710:	4682      	mov	sl, r0
 8005712:	460c      	mov	r4, r1
 8005714:	4690      	mov	r8, r2
 8005716:	4699      	mov	r9, r3
 8005718:	d837      	bhi.n	800578a <__ssputs_r+0x82>
 800571a:	898a      	ldrh	r2, [r1, #12]
 800571c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005720:	d031      	beq.n	8005786 <__ssputs_r+0x7e>
 8005722:	6825      	ldr	r5, [r4, #0]
 8005724:	6909      	ldr	r1, [r1, #16]
 8005726:	1a6f      	subs	r7, r5, r1
 8005728:	6965      	ldr	r5, [r4, #20]
 800572a:	2302      	movs	r3, #2
 800572c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005730:	fb95 f5f3 	sdiv	r5, r5, r3
 8005734:	f109 0301 	add.w	r3, r9, #1
 8005738:	443b      	add	r3, r7
 800573a:	429d      	cmp	r5, r3
 800573c:	bf38      	it	cc
 800573e:	461d      	movcc	r5, r3
 8005740:	0553      	lsls	r3, r2, #21
 8005742:	d530      	bpl.n	80057a6 <__ssputs_r+0x9e>
 8005744:	4629      	mov	r1, r5
 8005746:	f7ff ff4b 	bl	80055e0 <_malloc_r>
 800574a:	4606      	mov	r6, r0
 800574c:	b950      	cbnz	r0, 8005764 <__ssputs_r+0x5c>
 800574e:	230c      	movs	r3, #12
 8005750:	f8ca 3000 	str.w	r3, [sl]
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	463a      	mov	r2, r7
 8005766:	6921      	ldr	r1, [r4, #16]
 8005768:	f000 faa8 	bl	8005cbc <memcpy>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	6126      	str	r6, [r4, #16]
 800577a:	6165      	str	r5, [r4, #20]
 800577c:	443e      	add	r6, r7
 800577e:	1bed      	subs	r5, r5, r7
 8005780:	6026      	str	r6, [r4, #0]
 8005782:	60a5      	str	r5, [r4, #8]
 8005784:	464e      	mov	r6, r9
 8005786:	454e      	cmp	r6, r9
 8005788:	d900      	bls.n	800578c <__ssputs_r+0x84>
 800578a:	464e      	mov	r6, r9
 800578c:	4632      	mov	r2, r6
 800578e:	4641      	mov	r1, r8
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	f000 fa9e 	bl	8005cd2 <memmove>
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	1b9b      	subs	r3, r3, r6
 800579a:	60a3      	str	r3, [r4, #8]
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	441e      	add	r6, r3
 80057a0:	6026      	str	r6, [r4, #0]
 80057a2:	2000      	movs	r0, #0
 80057a4:	e7dc      	b.n	8005760 <__ssputs_r+0x58>
 80057a6:	462a      	mov	r2, r5
 80057a8:	f000 faac 	bl	8005d04 <_realloc_r>
 80057ac:	4606      	mov	r6, r0
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d1e2      	bne.n	8005778 <__ssputs_r+0x70>
 80057b2:	6921      	ldr	r1, [r4, #16]
 80057b4:	4650      	mov	r0, sl
 80057b6:	f7ff fec5 	bl	8005544 <_free_r>
 80057ba:	e7c8      	b.n	800574e <__ssputs_r+0x46>

080057bc <_svfiprintf_r>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	461d      	mov	r5, r3
 80057c2:	898b      	ldrh	r3, [r1, #12]
 80057c4:	061f      	lsls	r7, r3, #24
 80057c6:	b09d      	sub	sp, #116	; 0x74
 80057c8:	4680      	mov	r8, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	4616      	mov	r6, r2
 80057ce:	d50f      	bpl.n	80057f0 <_svfiprintf_r+0x34>
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	b96b      	cbnz	r3, 80057f0 <_svfiprintf_r+0x34>
 80057d4:	2140      	movs	r1, #64	; 0x40
 80057d6:	f7ff ff03 	bl	80055e0 <_malloc_r>
 80057da:	6020      	str	r0, [r4, #0]
 80057dc:	6120      	str	r0, [r4, #16]
 80057de:	b928      	cbnz	r0, 80057ec <_svfiprintf_r+0x30>
 80057e0:	230c      	movs	r3, #12
 80057e2:	f8c8 3000 	str.w	r3, [r8]
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ea:	e0c8      	b.n	800597e <_svfiprintf_r+0x1c2>
 80057ec:	2340      	movs	r3, #64	; 0x40
 80057ee:	6163      	str	r3, [r4, #20]
 80057f0:	2300      	movs	r3, #0
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	2320      	movs	r3, #32
 80057f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057fa:	2330      	movs	r3, #48	; 0x30
 80057fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005800:	9503      	str	r5, [sp, #12]
 8005802:	f04f 0b01 	mov.w	fp, #1
 8005806:	4637      	mov	r7, r6
 8005808:	463d      	mov	r5, r7
 800580a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800580e:	b10b      	cbz	r3, 8005814 <_svfiprintf_r+0x58>
 8005810:	2b25      	cmp	r3, #37	; 0x25
 8005812:	d13e      	bne.n	8005892 <_svfiprintf_r+0xd6>
 8005814:	ebb7 0a06 	subs.w	sl, r7, r6
 8005818:	d00b      	beq.n	8005832 <_svfiprintf_r+0x76>
 800581a:	4653      	mov	r3, sl
 800581c:	4632      	mov	r2, r6
 800581e:	4621      	mov	r1, r4
 8005820:	4640      	mov	r0, r8
 8005822:	f7ff ff71 	bl	8005708 <__ssputs_r>
 8005826:	3001      	adds	r0, #1
 8005828:	f000 80a4 	beq.w	8005974 <_svfiprintf_r+0x1b8>
 800582c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582e:	4453      	add	r3, sl
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	783b      	ldrb	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 809d 	beq.w	8005974 <_svfiprintf_r+0x1b8>
 800583a:	2300      	movs	r3, #0
 800583c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	9307      	str	r3, [sp, #28]
 8005848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800584c:	931a      	str	r3, [sp, #104]	; 0x68
 800584e:	462f      	mov	r7, r5
 8005850:	2205      	movs	r2, #5
 8005852:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005856:	4850      	ldr	r0, [pc, #320]	; (8005998 <_svfiprintf_r+0x1dc>)
 8005858:	f7fa fcba 	bl	80001d0 <memchr>
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	b9d0      	cbnz	r0, 8005896 <_svfiprintf_r+0xda>
 8005860:	06d9      	lsls	r1, r3, #27
 8005862:	bf44      	itt	mi
 8005864:	2220      	movmi	r2, #32
 8005866:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800586a:	071a      	lsls	r2, r3, #28
 800586c:	bf44      	itt	mi
 800586e:	222b      	movmi	r2, #43	; 0x2b
 8005870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005874:	782a      	ldrb	r2, [r5, #0]
 8005876:	2a2a      	cmp	r2, #42	; 0x2a
 8005878:	d015      	beq.n	80058a6 <_svfiprintf_r+0xea>
 800587a:	9a07      	ldr	r2, [sp, #28]
 800587c:	462f      	mov	r7, r5
 800587e:	2000      	movs	r0, #0
 8005880:	250a      	movs	r5, #10
 8005882:	4639      	mov	r1, r7
 8005884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005888:	3b30      	subs	r3, #48	; 0x30
 800588a:	2b09      	cmp	r3, #9
 800588c:	d94d      	bls.n	800592a <_svfiprintf_r+0x16e>
 800588e:	b1b8      	cbz	r0, 80058c0 <_svfiprintf_r+0x104>
 8005890:	e00f      	b.n	80058b2 <_svfiprintf_r+0xf6>
 8005892:	462f      	mov	r7, r5
 8005894:	e7b8      	b.n	8005808 <_svfiprintf_r+0x4c>
 8005896:	4a40      	ldr	r2, [pc, #256]	; (8005998 <_svfiprintf_r+0x1dc>)
 8005898:	1a80      	subs	r0, r0, r2
 800589a:	fa0b f000 	lsl.w	r0, fp, r0
 800589e:	4318      	orrs	r0, r3
 80058a0:	9004      	str	r0, [sp, #16]
 80058a2:	463d      	mov	r5, r7
 80058a4:	e7d3      	b.n	800584e <_svfiprintf_r+0x92>
 80058a6:	9a03      	ldr	r2, [sp, #12]
 80058a8:	1d11      	adds	r1, r2, #4
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	9103      	str	r1, [sp, #12]
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	db01      	blt.n	80058b6 <_svfiprintf_r+0xfa>
 80058b2:	9207      	str	r2, [sp, #28]
 80058b4:	e004      	b.n	80058c0 <_svfiprintf_r+0x104>
 80058b6:	4252      	negs	r2, r2
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	9207      	str	r2, [sp, #28]
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	783b      	ldrb	r3, [r7, #0]
 80058c2:	2b2e      	cmp	r3, #46	; 0x2e
 80058c4:	d10c      	bne.n	80058e0 <_svfiprintf_r+0x124>
 80058c6:	787b      	ldrb	r3, [r7, #1]
 80058c8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ca:	d133      	bne.n	8005934 <_svfiprintf_r+0x178>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	9203      	str	r2, [sp, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfb8      	it	lt
 80058d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058dc:	3702      	adds	r7, #2
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	4d2e      	ldr	r5, [pc, #184]	; (800599c <_svfiprintf_r+0x1e0>)
 80058e2:	7839      	ldrb	r1, [r7, #0]
 80058e4:	2203      	movs	r2, #3
 80058e6:	4628      	mov	r0, r5
 80058e8:	f7fa fc72 	bl	80001d0 <memchr>
 80058ec:	b138      	cbz	r0, 80058fe <_svfiprintf_r+0x142>
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	1b40      	subs	r0, r0, r5
 80058f2:	fa03 f000 	lsl.w	r0, r3, r0
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	4303      	orrs	r3, r0
 80058fa:	3701      	adds	r7, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	7839      	ldrb	r1, [r7, #0]
 8005900:	4827      	ldr	r0, [pc, #156]	; (80059a0 <_svfiprintf_r+0x1e4>)
 8005902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005906:	2206      	movs	r2, #6
 8005908:	1c7e      	adds	r6, r7, #1
 800590a:	f7fa fc61 	bl	80001d0 <memchr>
 800590e:	2800      	cmp	r0, #0
 8005910:	d038      	beq.n	8005984 <_svfiprintf_r+0x1c8>
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <_svfiprintf_r+0x1e8>)
 8005914:	bb13      	cbnz	r3, 800595c <_svfiprintf_r+0x1a0>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	3307      	adds	r3, #7
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	3308      	adds	r3, #8
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	444b      	add	r3, r9
 8005926:	9309      	str	r3, [sp, #36]	; 0x24
 8005928:	e76d      	b.n	8005806 <_svfiprintf_r+0x4a>
 800592a:	fb05 3202 	mla	r2, r5, r2, r3
 800592e:	2001      	movs	r0, #1
 8005930:	460f      	mov	r7, r1
 8005932:	e7a6      	b.n	8005882 <_svfiprintf_r+0xc6>
 8005934:	2300      	movs	r3, #0
 8005936:	3701      	adds	r7, #1
 8005938:	9305      	str	r3, [sp, #20]
 800593a:	4619      	mov	r1, r3
 800593c:	250a      	movs	r5, #10
 800593e:	4638      	mov	r0, r7
 8005940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005944:	3a30      	subs	r2, #48	; 0x30
 8005946:	2a09      	cmp	r2, #9
 8005948:	d903      	bls.n	8005952 <_svfiprintf_r+0x196>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0c8      	beq.n	80058e0 <_svfiprintf_r+0x124>
 800594e:	9105      	str	r1, [sp, #20]
 8005950:	e7c6      	b.n	80058e0 <_svfiprintf_r+0x124>
 8005952:	fb05 2101 	mla	r1, r5, r1, r2
 8005956:	2301      	movs	r3, #1
 8005958:	4607      	mov	r7, r0
 800595a:	e7f0      	b.n	800593e <_svfiprintf_r+0x182>
 800595c:	ab03      	add	r3, sp, #12
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4622      	mov	r2, r4
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <_svfiprintf_r+0x1ec>)
 8005964:	a904      	add	r1, sp, #16
 8005966:	4640      	mov	r0, r8
 8005968:	f3af 8000 	nop.w
 800596c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005970:	4681      	mov	r9, r0
 8005972:	d1d6      	bne.n	8005922 <_svfiprintf_r+0x166>
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	065b      	lsls	r3, r3, #25
 8005978:	f53f af35 	bmi.w	80057e6 <_svfiprintf_r+0x2a>
 800597c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800597e:	b01d      	add	sp, #116	; 0x74
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	ab03      	add	r3, sp, #12
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4622      	mov	r2, r4
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <_svfiprintf_r+0x1ec>)
 800598c:	a904      	add	r1, sp, #16
 800598e:	4640      	mov	r0, r8
 8005990:	f000 f882 	bl	8005a98 <_printf_i>
 8005994:	e7ea      	b.n	800596c <_svfiprintf_r+0x1b0>
 8005996:	bf00      	nop
 8005998:	08005e34 	.word	0x08005e34
 800599c:	08005e3a 	.word	0x08005e3a
 80059a0:	08005e3e 	.word	0x08005e3e
 80059a4:	00000000 	.word	0x00000000
 80059a8:	08005709 	.word	0x08005709

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4691      	mov	r9, r2
 80059b2:	461f      	mov	r7, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059bc:	4293      	cmp	r3, r2
 80059be:	bfb8      	it	lt
 80059c0:	4613      	movlt	r3, r2
 80059c2:	f8c9 3000 	str.w	r3, [r9]
 80059c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ca:	4606      	mov	r6, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	b112      	cbz	r2, 80059d6 <_printf_common+0x2a>
 80059d0:	3301      	adds	r3, #1
 80059d2:	f8c9 3000 	str.w	r3, [r9]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059e0:	3302      	addmi	r3, #2
 80059e2:	f8c9 3000 	strmi.w	r3, [r9]
 80059e6:	6825      	ldr	r5, [r4, #0]
 80059e8:	f015 0506 	ands.w	r5, r5, #6
 80059ec:	d107      	bne.n	80059fe <_printf_common+0x52>
 80059ee:	f104 0a19 	add.w	sl, r4, #25
 80059f2:	68e3      	ldr	r3, [r4, #12]
 80059f4:	f8d9 2000 	ldr.w	r2, [r9]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	42ab      	cmp	r3, r5
 80059fc:	dc28      	bgt.n	8005a50 <_printf_common+0xa4>
 80059fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	3300      	adds	r3, #0
 8005a06:	bf18      	it	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	0692      	lsls	r2, r2, #26
 8005a0c:	d42d      	bmi.n	8005a6a <_printf_common+0xbe>
 8005a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a12:	4639      	mov	r1, r7
 8005a14:	4630      	mov	r0, r6
 8005a16:	47c0      	blx	r8
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d020      	beq.n	8005a5e <_printf_common+0xb2>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	68e5      	ldr	r5, [r4, #12]
 8005a20:	f8d9 2000 	ldr.w	r2, [r9]
 8005a24:	f003 0306 	and.w	r3, r3, #6
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	bf08      	it	eq
 8005a2c:	1aad      	subeq	r5, r5, r2
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	bf0c      	ite	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	2500      	movne	r5, #0
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	bfc4      	itt	gt
 8005a3e:	1a9b      	subgt	r3, r3, r2
 8005a40:	18ed      	addgt	r5, r5, r3
 8005a42:	f04f 0900 	mov.w	r9, #0
 8005a46:	341a      	adds	r4, #26
 8005a48:	454d      	cmp	r5, r9
 8005a4a:	d11a      	bne.n	8005a82 <_printf_common+0xd6>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e008      	b.n	8005a62 <_printf_common+0xb6>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4639      	mov	r1, r7
 8005a56:	4630      	mov	r0, r6
 8005a58:	47c0      	blx	r8
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d103      	bne.n	8005a66 <_printf_common+0xba>
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	3501      	adds	r5, #1
 8005a68:	e7c3      	b.n	80059f2 <_printf_common+0x46>
 8005a6a:	18e1      	adds	r1, r4, r3
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	2030      	movs	r0, #48	; 0x30
 8005a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a74:	4422      	add	r2, r4
 8005a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a7e:	3302      	adds	r3, #2
 8005a80:	e7c5      	b.n	8005a0e <_printf_common+0x62>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4622      	mov	r2, r4
 8005a86:	4639      	mov	r1, r7
 8005a88:	4630      	mov	r0, r6
 8005a8a:	47c0      	blx	r8
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d0e6      	beq.n	8005a5e <_printf_common+0xb2>
 8005a90:	f109 0901 	add.w	r9, r9, #1
 8005a94:	e7d8      	b.n	8005a48 <_printf_common+0x9c>
	...

08005a98 <_printf_i>:
 8005a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	7e09      	ldrb	r1, [r1, #24]
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	296e      	cmp	r1, #110	; 0x6e
 8005aa8:	4617      	mov	r7, r2
 8005aaa:	4606      	mov	r6, r0
 8005aac:	4698      	mov	r8, r3
 8005aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ab0:	f000 80b3 	beq.w	8005c1a <_printf_i+0x182>
 8005ab4:	d822      	bhi.n	8005afc <_printf_i+0x64>
 8005ab6:	2963      	cmp	r1, #99	; 0x63
 8005ab8:	d036      	beq.n	8005b28 <_printf_i+0x90>
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x3a>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	f000 80b9 	beq.w	8005c34 <_printf_i+0x19c>
 8005ac2:	2958      	cmp	r1, #88	; 0x58
 8005ac4:	f000 8083 	beq.w	8005bce <_printf_i+0x136>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ad0:	e032      	b.n	8005b38 <_printf_i+0xa0>
 8005ad2:	2964      	cmp	r1, #100	; 0x64
 8005ad4:	d001      	beq.n	8005ada <_printf_i+0x42>
 8005ad6:	2969      	cmp	r1, #105	; 0x69
 8005ad8:	d1f6      	bne.n	8005ac8 <_printf_i+0x30>
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	0605      	lsls	r5, r0, #24
 8005ae0:	f103 0104 	add.w	r1, r3, #4
 8005ae4:	d52a      	bpl.n	8005b3c <_printf_i+0xa4>
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da03      	bge.n	8005af6 <_printf_i+0x5e>
 8005aee:	222d      	movs	r2, #45	; 0x2d
 8005af0:	425b      	negs	r3, r3
 8005af2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005af6:	486f      	ldr	r0, [pc, #444]	; (8005cb4 <_printf_i+0x21c>)
 8005af8:	220a      	movs	r2, #10
 8005afa:	e039      	b.n	8005b70 <_printf_i+0xd8>
 8005afc:	2973      	cmp	r1, #115	; 0x73
 8005afe:	f000 809d 	beq.w	8005c3c <_printf_i+0x1a4>
 8005b02:	d808      	bhi.n	8005b16 <_printf_i+0x7e>
 8005b04:	296f      	cmp	r1, #111	; 0x6f
 8005b06:	d020      	beq.n	8005b4a <_printf_i+0xb2>
 8005b08:	2970      	cmp	r1, #112	; 0x70
 8005b0a:	d1dd      	bne.n	8005ac8 <_printf_i+0x30>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	f043 0320 	orr.w	r3, r3, #32
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	e003      	b.n	8005b1e <_printf_i+0x86>
 8005b16:	2975      	cmp	r1, #117	; 0x75
 8005b18:	d017      	beq.n	8005b4a <_printf_i+0xb2>
 8005b1a:	2978      	cmp	r1, #120	; 0x78
 8005b1c:	d1d4      	bne.n	8005ac8 <_printf_i+0x30>
 8005b1e:	2378      	movs	r3, #120	; 0x78
 8005b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b24:	4864      	ldr	r0, [pc, #400]	; (8005cb8 <_printf_i+0x220>)
 8005b26:	e055      	b.n	8005bd4 <_printf_i+0x13c>
 8005b28:	6813      	ldr	r3, [r2, #0]
 8005b2a:	1d19      	adds	r1, r3, #4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6011      	str	r1, [r2, #0]
 8005b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e08c      	b.n	8005c56 <_printf_i+0x1be>
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6011      	str	r1, [r2, #0]
 8005b40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b44:	bf18      	it	ne
 8005b46:	b21b      	sxthne	r3, r3
 8005b48:	e7cf      	b.n	8005aea <_printf_i+0x52>
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	6825      	ldr	r5, [r4, #0]
 8005b4e:	1d18      	adds	r0, r3, #4
 8005b50:	6010      	str	r0, [r2, #0]
 8005b52:	0628      	lsls	r0, r5, #24
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0xc2>
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	e002      	b.n	8005b60 <_printf_i+0xc8>
 8005b5a:	0668      	lsls	r0, r5, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0xbe>
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	4854      	ldr	r0, [pc, #336]	; (8005cb4 <_printf_i+0x21c>)
 8005b62:	296f      	cmp	r1, #111	; 0x6f
 8005b64:	bf14      	ite	ne
 8005b66:	220a      	movne	r2, #10
 8005b68:	2208      	moveq	r2, #8
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b70:	6865      	ldr	r5, [r4, #4]
 8005b72:	60a5      	str	r5, [r4, #8]
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	f2c0 8095 	blt.w	8005ca4 <_printf_i+0x20c>
 8005b7a:	6821      	ldr	r1, [r4, #0]
 8005b7c:	f021 0104 	bic.w	r1, r1, #4
 8005b80:	6021      	str	r1, [r4, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d13d      	bne.n	8005c02 <_printf_i+0x16a>
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	f040 808e 	bne.w	8005ca8 <_printf_i+0x210>
 8005b8c:	4665      	mov	r5, ip
 8005b8e:	2a08      	cmp	r2, #8
 8005b90:	d10b      	bne.n	8005baa <_printf_i+0x112>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	07db      	lsls	r3, r3, #31
 8005b96:	d508      	bpl.n	8005baa <_printf_i+0x112>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	6862      	ldr	r2, [r4, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	bfde      	ittt	le
 8005ba0:	2330      	movle	r3, #48	; 0x30
 8005ba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ba6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005baa:	ebac 0305 	sub.w	r3, ip, r5
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	f8cd 8000 	str.w	r8, [sp]
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	aa03      	add	r2, sp, #12
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff fef6 	bl	80059ac <_printf_common>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d14d      	bne.n	8005c60 <_printf_i+0x1c8>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc8:	b005      	add	sp, #20
 8005bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bce:	4839      	ldr	r0, [pc, #228]	; (8005cb4 <_printf_i+0x21c>)
 8005bd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	1d1d      	adds	r5, r3, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6015      	str	r5, [r2, #0]
 8005bde:	060a      	lsls	r2, r1, #24
 8005be0:	d50b      	bpl.n	8005bfa <_printf_i+0x162>
 8005be2:	07ca      	lsls	r2, r1, #31
 8005be4:	bf44      	itt	mi
 8005be6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bea:	6021      	strmi	r1, [r4, #0]
 8005bec:	b91b      	cbnz	r3, 8005bf6 <_printf_i+0x15e>
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	f022 0220 	bic.w	r2, r2, #32
 8005bf4:	6022      	str	r2, [r4, #0]
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	e7b7      	b.n	8005b6a <_printf_i+0xd2>
 8005bfa:	064d      	lsls	r5, r1, #25
 8005bfc:	bf48      	it	mi
 8005bfe:	b29b      	uxthmi	r3, r3
 8005c00:	e7ef      	b.n	8005be2 <_printf_i+0x14a>
 8005c02:	4665      	mov	r5, ip
 8005c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c08:	fb02 3311 	mls	r3, r2, r1, r3
 8005c0c:	5cc3      	ldrb	r3, [r0, r3]
 8005c0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c12:	460b      	mov	r3, r1
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d1f5      	bne.n	8005c04 <_printf_i+0x16c>
 8005c18:	e7b9      	b.n	8005b8e <_printf_i+0xf6>
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	6825      	ldr	r5, [r4, #0]
 8005c1e:	6961      	ldr	r1, [r4, #20]
 8005c20:	1d18      	adds	r0, r3, #4
 8005c22:	6010      	str	r0, [r2, #0]
 8005c24:	0628      	lsls	r0, r5, #24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	d501      	bpl.n	8005c2e <_printf_i+0x196>
 8005c2a:	6019      	str	r1, [r3, #0]
 8005c2c:	e002      	b.n	8005c34 <_printf_i+0x19c>
 8005c2e:	066a      	lsls	r2, r5, #25
 8005c30:	d5fb      	bpl.n	8005c2a <_printf_i+0x192>
 8005c32:	8019      	strh	r1, [r3, #0]
 8005c34:	2300      	movs	r3, #0
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	4665      	mov	r5, ip
 8005c3a:	e7b9      	b.n	8005bb0 <_printf_i+0x118>
 8005c3c:	6813      	ldr	r3, [r2, #0]
 8005c3e:	1d19      	adds	r1, r3, #4
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	681d      	ldr	r5, [r3, #0]
 8005c44:	6862      	ldr	r2, [r4, #4]
 8005c46:	2100      	movs	r1, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7fa fac1 	bl	80001d0 <memchr>
 8005c4e:	b108      	cbz	r0, 8005c54 <_printf_i+0x1bc>
 8005c50:	1b40      	subs	r0, r0, r5
 8005c52:	6060      	str	r0, [r4, #4]
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5e:	e7a7      	b.n	8005bb0 <_printf_i+0x118>
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	462a      	mov	r2, r5
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	47c0      	blx	r8
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d0aa      	beq.n	8005bc4 <_printf_i+0x12c>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	079b      	lsls	r3, r3, #30
 8005c72:	d413      	bmi.n	8005c9c <_printf_i+0x204>
 8005c74:	68e0      	ldr	r0, [r4, #12]
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	4298      	cmp	r0, r3
 8005c7a:	bfb8      	it	lt
 8005c7c:	4618      	movlt	r0, r3
 8005c7e:	e7a3      	b.n	8005bc8 <_printf_i+0x130>
 8005c80:	2301      	movs	r3, #1
 8005c82:	464a      	mov	r2, r9
 8005c84:	4639      	mov	r1, r7
 8005c86:	4630      	mov	r0, r6
 8005c88:	47c0      	blx	r8
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d09a      	beq.n	8005bc4 <_printf_i+0x12c>
 8005c8e:	3501      	adds	r5, #1
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	9a03      	ldr	r2, [sp, #12]
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	42ab      	cmp	r3, r5
 8005c98:	dcf2      	bgt.n	8005c80 <_printf_i+0x1e8>
 8005c9a:	e7eb      	b.n	8005c74 <_printf_i+0x1dc>
 8005c9c:	2500      	movs	r5, #0
 8005c9e:	f104 0919 	add.w	r9, r4, #25
 8005ca2:	e7f5      	b.n	8005c90 <_printf_i+0x1f8>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ac      	bne.n	8005c02 <_printf_i+0x16a>
 8005ca8:	7803      	ldrb	r3, [r0, #0]
 8005caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb2:	e76c      	b.n	8005b8e <_printf_i+0xf6>
 8005cb4:	08005e45 	.word	0x08005e45
 8005cb8:	08005e56 	.word	0x08005e56

08005cbc <memcpy>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	1e43      	subs	r3, r0, #1
 8005cc0:	440a      	add	r2, r1
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	d100      	bne.n	8005cc8 <memcpy+0xc>
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd0:	e7f7      	b.n	8005cc2 <memcpy+0x6>

08005cd2 <memmove>:
 8005cd2:	4288      	cmp	r0, r1
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	eb01 0302 	add.w	r3, r1, r2
 8005cda:	d807      	bhi.n	8005cec <memmove+0x1a>
 8005cdc:	1e42      	subs	r2, r0, #1
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d00a      	beq.n	8005cf8 <memmove+0x26>
 8005ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005cea:	e7f8      	b.n	8005cde <memmove+0xc>
 8005cec:	4283      	cmp	r3, r0
 8005cee:	d9f5      	bls.n	8005cdc <memmove+0xa>
 8005cf0:	1881      	adds	r1, r0, r2
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	42d3      	cmn	r3, r2
 8005cf6:	d100      	bne.n	8005cfa <memmove+0x28>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d02:	e7f7      	b.n	8005cf4 <memmove+0x22>

08005d04 <_realloc_r>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	4607      	mov	r7, r0
 8005d08:	4614      	mov	r4, r2
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	b921      	cbnz	r1, 8005d18 <_realloc_r+0x14>
 8005d0e:	4611      	mov	r1, r2
 8005d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d14:	f7ff bc64 	b.w	80055e0 <_malloc_r>
 8005d18:	b922      	cbnz	r2, 8005d24 <_realloc_r+0x20>
 8005d1a:	f7ff fc13 	bl	8005544 <_free_r>
 8005d1e:	4625      	mov	r5, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d24:	f000 f814 	bl	8005d50 <_malloc_usable_size_r>
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d20f      	bcs.n	8005d4c <_realloc_r+0x48>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f7ff fc56 	bl	80055e0 <_malloc_r>
 8005d34:	4605      	mov	r5, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0f2      	beq.n	8005d20 <_realloc_r+0x1c>
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	f7ff ffbd 	bl	8005cbc <memcpy>
 8005d42:	4631      	mov	r1, r6
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff fbfd 	bl	8005544 <_free_r>
 8005d4a:	e7e9      	b.n	8005d20 <_realloc_r+0x1c>
 8005d4c:	4635      	mov	r5, r6
 8005d4e:	e7e7      	b.n	8005d20 <_realloc_r+0x1c>

08005d50 <_malloc_usable_size_r>:
 8005d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d54:	1f18      	subs	r0, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfbc      	itt	lt
 8005d5a:	580b      	ldrlt	r3, [r1, r0]
 8005d5c:	18c0      	addlt	r0, r0, r3
 8005d5e:	4770      	bx	lr

08005d60 <trunc>:
 8005d60:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8005d64:	ec5c bb10 	vmov	fp, ip, d0
 8005d68:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8005d6c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8005d70:	2913      	cmp	r1, #19
 8005d72:	4664      	mov	r4, ip
 8005d74:	dc11      	bgt.n	8005d9a <trunc+0x3a>
 8005d76:	2900      	cmp	r1, #0
 8005d78:	bfa7      	ittee	ge
 8005d7a:	4b15      	ldrge	r3, [pc, #84]	; (8005dd0 <trunc+0x70>)
 8005d7c:	fa43 f101 	asrge.w	r1, r3, r1
 8005d80:	2200      	movlt	r2, #0
 8005d82:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8005d86:	bfa4      	itt	ge
 8005d88:	2200      	movge	r2, #0
 8005d8a:	ea2c 0301 	bicge.w	r3, ip, r1
 8005d8e:	4693      	mov	fp, r2
 8005d90:	469c      	mov	ip, r3
 8005d92:	ec4c bb10 	vmov	d0, fp, ip
 8005d96:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8005d9a:	2933      	cmp	r1, #51	; 0x33
 8005d9c:	dd0d      	ble.n	8005dba <trunc+0x5a>
 8005d9e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005da2:	d1f6      	bne.n	8005d92 <trunc+0x32>
 8005da4:	4663      	mov	r3, ip
 8005da6:	ee10 2a10 	vmov	r2, s0
 8005daa:	ee10 0a10 	vmov	r0, s0
 8005dae:	4621      	mov	r1, r4
 8005db0:	f7fa fa64 	bl	800027c <__adddf3>
 8005db4:	4683      	mov	fp, r0
 8005db6:	468c      	mov	ip, r1
 8005db8:	e7eb      	b.n	8005d92 <trunc+0x32>
 8005dba:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc2:	fa23 f000 	lsr.w	r0, r3, r0
 8005dc6:	ea2b 0600 	bic.w	r6, fp, r0
 8005dca:	46b3      	mov	fp, r6
 8005dcc:	46a4      	mov	ip, r4
 8005dce:	e7e0      	b.n	8005d92 <trunc+0x32>
 8005dd0:	000fffff 	.word	0x000fffff

08005dd4 <_init>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr

08005de0 <_fini>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr
