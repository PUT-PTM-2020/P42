
temp2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000319c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003378  08003378  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003380  08003380  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000074  080033fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080033fc  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ee5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001815  00000000  00000000  00029f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  0002c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f51  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c9c  00000000  00000000  0004da99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7ff0  00000000  00000000  00055735  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dfc  00000000  00000000  0011d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003314 	.word	0x08003314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003314 	.word	0x08003314

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <LCD1602_EnablePulse>:
static uint8_t DisplayControl = 0x0F;
static uint8_t FunctionSet = 0x38;


static void LCD1602_EnablePulse(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <LCD1602_EnablePulse+0x38>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <LCD1602_EnablePulse+0x3c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4619      	mov	r1, r3
 8000948:	f001 f96e 	bl	8001c28 <HAL_GPIO_WritePin>
	delay(writeTimeConstant);
 800094c:	230a      	movs	r3, #10
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fa3a 	bl	8000dc8 <delay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <LCD1602_EnablePulse+0x38>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <LCD1602_EnablePulse+0x3c>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	f001 f962 	bl	8001c28 <HAL_GPIO_WritePin>
	delay(60);
 8000964:	203c      	movs	r0, #60	; 0x3c
 8000966:	f000 fa2f 	bl	8000dc8 <delay>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000090 	.word	0x20000090
 8000974:	20000096 	.word	0x20000096

08000978 <LCD1602_RS>:


static void LCD1602_RS(bool state)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d008      	beq.n	800099a <LCD1602_RS+0x22>
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <LCD1602_RS+0x3c>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <LCD1602_RS+0x40>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	4619      	mov	r1, r3
 8000994:	f001 f948 	bl	8001c28 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000998:	e007      	b.n	80009aa <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LCD1602_RS+0x3c>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LCD1602_RS+0x40>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	f001 f93f 	bl	8001c28 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000090 	.word	0x20000090
 80009b8:	20000094 	.word	0x20000094

080009bc <LCD1602_write>:



static void LCD1602_write(uint8_t byte)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	091b      	lsrs	r3, r3, #4
 80009d2:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 80009d4:	4b61      	ldr	r3, [pc, #388]	; (8000b5c <LCD1602_write+0x1a0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d15a      	bne.n	8000a92 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80009dc:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <LCD1602_write+0x1a4>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <LCD1602_write+0x1a8>)
 80009e2:	8819      	ldrh	r1, [r3, #0]
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	f001 f91b 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80009f2:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <LCD1602_write+0x1a4>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	4b5c      	ldr	r3, [pc, #368]	; (8000b68 <LCD1602_write+0x1ac>)
 80009f8:	8819      	ldrh	r1, [r3, #0]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	f001 f910 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000a08:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <LCD1602_write+0x1a4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	4b57      	ldr	r3, [pc, #348]	; (8000b6c <LCD1602_write+0x1b0>)
 8000a0e:	8819      	ldrh	r1, [r3, #0]
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f001 f905 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <LCD1602_write+0x1a4>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <LCD1602_write+0x1b4>)
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f001 f8fa 	bl	8001c28 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000a34:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <LCD1602_write+0x1b8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	4b4f      	ldr	r3, [pc, #316]	; (8000b78 <LCD1602_write+0x1bc>)
 8000a3a:	8819      	ldrh	r1, [r3, #0]
 8000a3c:	7bbb      	ldrb	r3, [r7, #14]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	f001 f8ef 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <LCD1602_write+0x1b8>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <LCD1602_write+0x1c0>)
 8000a50:	8819      	ldrh	r1, [r3, #0]
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f001 f8e4 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <LCD1602_write+0x1b8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <LCD1602_write+0x1c4>)
 8000a66:	8819      	ldrh	r1, [r3, #0]
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	f001 f8d9 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <LCD1602_write+0x1b8>)
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <LCD1602_write+0x1c8>)
 8000a7c:	8819      	ldrh	r1, [r3, #0]
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	f001 f8ce 	bl	8001c28 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000a8c:	f7ff ff54 	bl	8000938 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000a90:	e05f      	b.n	8000b52 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000a92:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <LCD1602_write+0x1a0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d15b      	bne.n	8000b52 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <LCD1602_write+0x1b8>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <LCD1602_write+0x1bc>)
 8000aa0:	8819      	ldrh	r1, [r3, #0]
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f001 f8bc 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <LCD1602_write+0x1b8>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <LCD1602_write+0x1c0>)
 8000ab6:	8819      	ldrh	r1, [r3, #0]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f001 f8b1 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <LCD1602_write+0x1b8>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <LCD1602_write+0x1c4>)
 8000acc:	8819      	ldrh	r1, [r3, #0]
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f001 f8a6 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <LCD1602_write+0x1b8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <LCD1602_write+0x1c8>)
 8000ae2:	8819      	ldrh	r1, [r3, #0]
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	f001 f89b 	bl	8001c28 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000af2:	f7ff ff21 	bl	8000938 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <LCD1602_write+0x1b8>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <LCD1602_write+0x1bc>)
 8000afc:	8819      	ldrh	r1, [r3, #0]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	f001 f88e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <LCD1602_write+0x1b8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <LCD1602_write+0x1c0>)
 8000b12:	8819      	ldrh	r1, [r3, #0]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f001 f883 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <LCD1602_write+0x1b8>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <LCD1602_write+0x1c4>)
 8000b28:	8819      	ldrh	r1, [r3, #0]
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	f001 f878 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <LCD1602_write+0x1b8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <LCD1602_write+0x1c8>)
 8000b3e:	8819      	ldrh	r1, [r3, #0]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f001 f86d 	bl	8001c28 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000b4e:	f7ff fef3 	bl	8000938 <LCD1602_EnablePulse>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000098 	.word	0x20000098
 8000b64:	2000009c 	.word	0x2000009c
 8000b68:	2000009e 	.word	0x2000009e
 8000b6c:	200000a0 	.word	0x200000a0
 8000b70:	200000a2 	.word	0x200000a2
 8000b74:	200000a4 	.word	0x200000a4
 8000b78:	200000a8 	.word	0x200000a8
 8000b7c:	200000aa 	.word	0x200000aa
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	200000ae 	.word	0x200000ae

08000b88 <LCD1602_writeCommand>:


static void LCD1602_writeCommand(uint8_t command)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(false);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fef0 	bl	8000978 <LCD1602_RS>
	LCD1602_write(command);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff0e 	bl	80009bc <LCD1602_write>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <LCD1602_writeData>:


static void LCD1602_writeData(uint8_t data)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(true);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fee0 	bl	8000978 <LCD1602_RS>
	LCD1602_write(data);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fefe 	bl	80009bc <LCD1602_write>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <LCD1602_write4bitCommand>:


static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fecc 	bl	8000978 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <LCD1602_write4bitCommand+0x7c>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <LCD1602_write4bitCommand+0x80>)
 8000be6:	8819      	ldrh	r1, [r3, #0]
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f001 f819 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <LCD1602_write4bitCommand+0x7c>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <LCD1602_write4bitCommand+0x84>)
 8000bfc:	8819      	ldrh	r1, [r3, #0]
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	f001 f80e 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <LCD1602_write4bitCommand+0x7c>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <LCD1602_write4bitCommand+0x88>)
 8000c12:	8819      	ldrh	r1, [r3, #0]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f001 f803 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <LCD1602_write4bitCommand+0x7c>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <LCD1602_write4bitCommand+0x8c>)
 8000c28:	8819      	ldrh	r1, [r3, #0]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	f000 fff8 	bl	8001c28 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8000c38:	f7ff fe7e 	bl	8000938 <LCD1602_EnablePulse>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000a4 	.word	0x200000a4
 8000c48:	200000a8 	.word	0x200000a8
 8000c4c:	200000aa 	.word	0x200000aa
 8000c50:	200000ac 	.word	0x200000ac
 8000c54:	200000ae 	.word	0x200000ae

08000c58 <LCD1602_Begin4BIT>:
	HAL_Delay(2);
}


void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	817b      	strh	r3, [r7, #10]
 8000c66:	4613      	mov	r3, r2
 8000c68:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8000c6a:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <LCD1602_Begin4BIT+0xac>)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <LCD1602_Begin4BIT+0xb0>)
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <LCD1602_Begin4BIT+0xb4>)
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8000c7c:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <LCD1602_Begin4BIT+0xb8>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <LCD1602_Begin4BIT+0xbc>)
 8000c84:	8b3b      	ldrh	r3, [r7, #24]
 8000c86:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8000c88:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <LCD1602_Begin4BIT+0xc0>)
 8000c8a:	8bbb      	ldrh	r3, [r7, #28]
 8000c8c:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <LCD1602_Begin4BIT+0xc4>)
 8000c90:	8c3b      	ldrh	r3, [r7, #32]
 8000c92:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <LCD1602_Begin4BIT+0xc8>)
 8000c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c98:	8013      	strh	r3, [r2, #0]
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <LCD1602_Begin4BIT+0xcc>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <LCD1602_Begin4BIT+0xd0>)
 8000ca2:	2228      	movs	r2, #40	; 0x28
 8000ca4:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8000ca6:	2014      	movs	r0, #20
 8000ca8:	f000 fd04 	bl	80016b4 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f7ff ff8b 	bl	8000bc8 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8000cb2:	2005      	movs	r0, #5
 8000cb4:	f000 fcfe 	bl	80016b4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f7ff ff85 	bl	8000bc8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fcf8 	bl	80016b4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff ff7f 	bl	8000bc8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fcf2 	bl	80016b4 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff ff79 	bl	8000bc8 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fcec 	bl	80016b4 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f7ff ff53 	bl	8000b88 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff ff50 	bl	8000b88 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 fce3 	bl	80016b4 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000cee:	2028      	movs	r0, #40	; 0x28
 8000cf0:	f7ff ff4a 	bl	8000b88 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 fcdd 	bl	80016b4 <HAL_Delay>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000090 	.word	0x20000090
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	20000096 	.word	0x20000096
 8000d10:	200000a4 	.word	0x200000a4
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	200000aa 	.word	0x200000aa
 8000d1c:	200000ac 	.word	0x200000ac
 8000d20:	200000ae 	.word	0x200000ae
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000001 	.word	0x20000001

08000d2c <LCD1602_print>:


void LCD1602_print(char string[])
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e009      	b.n	8000d4e <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff30 	bl	8000ba8 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d805      	bhi.n	8000d60 <LCD1602_print+0x34>
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1ec      	bne.n	8000d3a <LCD1602_print+0xe>
	}
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LCD1602_setCursor>:


void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d108      	bne.n	8000d9c <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d90:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fef7 	bl	8000b88 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}
 8000d9a:	e007      	b.n	8000dac <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000da2:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff feee 	bl	8000b88 <LCD1602_writeCommand>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LCD1602_clear>:
	LCD1602_writeCommand(DisplayControl);
}


void LCD1602_clear(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fee5 	bl	8000b88 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 fc78 	bl	80016b4 <HAL_Delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <delay>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <delay+0x2c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8000dda:	bf00      	nop
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <delay+0x2c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d3f9      	bcc.n	8000ddc <delay+0x14>
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	200000c8 	.word	0x200000c8

08000df8 <Set_Pin_Output>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;

float Temperature = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fd4c 	bl	80018c4 <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 fd2e 	bl	80018c4 <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DS18B20_Start>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <DS18B20_Start+0x5c>)
 8000e7e:	f7ff ffbb 	bl	8000df8 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <DS18B20_Start+0x5c>)
 8000e88:	f000 fece 	bl	8001c28 <HAL_GPIO_WritePin>
	delay(480);
 8000e8c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e90:	f7ff ff9a 	bl	8000dc8 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000e94:	2102      	movs	r1, #2
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <DS18B20_Start+0x5c>)
 8000e98:	f7ff ffcc 	bl	8000e34 <Set_Pin_Input>
	delay(80);
 8000e9c:	2050      	movs	r0, #80	; 0x50
 8000e9e:	f7ff ff93 	bl	8000dc8 <delay>

	if(!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))) Response = 1;
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <DS18B20_Start+0x5c>)
 8000ea6:	f000 fea7 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <DS18B20_Start+0x46>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	e001      	b.n	8000eba <DS18B20_Start+0x4a>
	else Response = -1;
 8000eb6:	23ff      	movs	r3, #255	; 0xff
 8000eb8:	71fb      	strb	r3, [r7, #7]

	delay(400);
 8000eba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ebe:	f7ff ff83 	bl	8000dc8 <delay>

	return Response;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <DS18B20_Write>:

void DS18B20_Write(uint8_t data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000eda:	2102      	movs	r1, #2
 8000edc:	481d      	ldr	r0, [pc, #116]	; (8000f54 <DS18B20_Write+0x84>)
 8000ede:	f7ff ff8b 	bl	8000df8 <Set_Pin_Output>

	for(int i=0; i<8; i++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e02e      	b.n	8000f46 <DS18B20_Write+0x76>
		if((data & (1<<i))!=0){
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	fa42 f303 	asr.w	r3, r2, r3
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <DS18B20_Write+0x50>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <DS18B20_Write+0x84>)
 8000efc:	f7ff ff7c 	bl	8000df8 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2102      	movs	r1, #2
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <DS18B20_Write+0x84>)
 8000f06:	f000 fe8f 	bl	8001c28 <HAL_GPIO_WritePin>
			delay(1);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff ff5c 	bl	8000dc8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000f10:	2102      	movs	r1, #2
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <DS18B20_Write+0x84>)
 8000f14:	f7ff ff8e 	bl	8000e34 <Set_Pin_Input>
			delay(60);
 8000f18:	203c      	movs	r0, #60	; 0x3c
 8000f1a:	f7ff ff55 	bl	8000dc8 <delay>
 8000f1e:	e00f      	b.n	8000f40 <DS18B20_Write+0x70>
		}
		else{
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000f20:	2102      	movs	r1, #2
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <DS18B20_Write+0x84>)
 8000f24:	f7ff ff68 	bl	8000df8 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <DS18B20_Write+0x84>)
 8000f2e:	f000 fe7b 	bl	8001c28 <HAL_GPIO_WritePin>
			delay(60);
 8000f32:	203c      	movs	r0, #60	; 0x3c
 8000f34:	f7ff ff48 	bl	8000dc8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <DS18B20_Write+0x84>)
 8000f3c:	f7ff ff7a 	bl	8000e34 <Set_Pin_Input>
	for(int i=0; i<8; i++){
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	ddcd      	ble.n	8000ee8 <DS18B20_Write+0x18>
		}
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40020000 	.word	0x40020000

08000f58 <DS18B20_Read>:

uint8_t DS18B20_Read(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000f62:	2102      	movs	r1, #2
 8000f64:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <DS18B20_Read+0x78>)
 8000f66:	f7ff ff65 	bl	8000e34 <Set_Pin_Input>

	for(int i=0; i<8; i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	e026      	b.n	8000fbe <DS18B20_Read+0x66>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000f70:	2102      	movs	r1, #2
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <DS18B20_Read+0x78>)
 8000f74:	f7ff ff40 	bl	8000df8 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <DS18B20_Read+0x78>)
 8000f7e:	f000 fe53 	bl	8001c28 <HAL_GPIO_WritePin>
		delay(2);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff ff20 	bl	8000dc8 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <DS18B20_Read+0x78>)
 8000f8c:	f7ff ff52 	bl	8000e34 <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)){
 8000f90:	2102      	movs	r1, #2
 8000f92:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <DS18B20_Read+0x78>)
 8000f94:	f000 fe30 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <DS18B20_Read+0x5a>
			value |= 1 << i;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8000fb2:	203c      	movs	r0, #60	; 0x3c
 8000fb4:	f7ff ff08 	bl	8000dc8 <delay>
	for(int i=0; i<8; i++){
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	ddd5      	ble.n	8000f70 <DS18B20_Read+0x18>
	}
	return value;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b08d      	sub	sp, #52	; 0x34
 8000fd8:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 faf9 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f8c9 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f000 f97f 	bl	80012e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fe6:	f000 f92f 	bl	8001248 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000fea:	4859      	ldr	r0, [pc, #356]	; (8001150 <main+0x17c>)
 8000fec:	f001 fa8f 	bl	800250e <HAL_TIM_Base_Start>

  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8000ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff4:	9303      	str	r3, [sp, #12]
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4b52      	ldr	r3, [pc, #328]	; (8001154 <main+0x180>)
 800100a:	2202      	movs	r2, #2
 800100c:	2101      	movs	r1, #1
 800100e:	4852      	ldr	r0, [pc, #328]	; (8001158 <main+0x184>)
 8001010:	f7ff fe22 	bl	8000c58 <LCD1602_Begin4BIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Presence = DS18B20_Start();
 8001014:	f7ff ff2c 	bl	8000e70 <DS18B20_Start>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <main+0x188>)
 800101e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fb47 	bl	80016b4 <HAL_Delay>
	  DS18B20_Write(0xCC);
 8001026:	20cc      	movs	r0, #204	; 0xcc
 8001028:	f7ff ff52 	bl	8000ed0 <DS18B20_Write>
	  DS18B20_Write(0x44);
 800102c:	2044      	movs	r0, #68	; 0x44
 800102e:	f7ff ff4f 	bl	8000ed0 <DS18B20_Write>
	  HAL_Delay(800);
 8001032:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001036:	f000 fb3d 	bl	80016b4 <HAL_Delay>

	  Presence = DS18B20_Start();
 800103a:	f7ff ff19 	bl	8000e70 <DS18B20_Start>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <main+0x188>)
 8001044:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fb34 	bl	80016b4 <HAL_Delay>
	  DS18B20_Write(0xCC);
 800104c:	20cc      	movs	r0, #204	; 0xcc
 800104e:	f7ff ff3f 	bl	8000ed0 <DS18B20_Write>
	  DS18B20_Write(0xBE);
 8001052:	20be      	movs	r0, #190	; 0xbe
 8001054:	f7ff ff3c 	bl	8000ed0 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8001058:	f7ff ff7e 	bl	8000f58 <DS18B20_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <main+0x18c>)
 8001062:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 8001064:	f7ff ff78 	bl	8000f58 <DS18B20_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <main+0x190>)
 800106e:	701a      	strb	r2, [r3, #0]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <main+0x190>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <main+0x18c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <main+0x194>)
 8001086:	801a      	strh	r2, [r3, #0]
	  Temperature = (float)TEMP/16;
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <main+0x194>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001094:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <main+0x198>)
 800109e:	edc3 7a00 	vstr	s15, [r3]


	  tmp = (int)Temperature;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <main+0x198>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	ee17 3a90 	vmov	r3, s15
 80010b0:	61fb      	str	r3, [r7, #28]
	  tmp3 = Temperature -tmp;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <main+0x198>)
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c6:	edc7 7a06 	vstr	s15, [r7, #24]
	  tmp2 = trunc(tmp3*10);
 80010ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa2d 	bl	8000538 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	ec44 3b10 	vmov	d0, r3, r4
 80010e6:	f002 f8db 	bl	80032a0 <trunc>
 80010ea:	ec54 3b10 	vmov	r3, r4, d0
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f7ff fa79 	bl	80005e8 <__aeabi_d2iz>
 80010f6:	4603      	mov	r3, r0
 80010f8:	617b      	str	r3, [r7, #20]
	  sprintf(linia, "%d.%d",tmp,tmp2);
 80010fa:	1d38      	adds	r0, r7, #4
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	491b      	ldr	r1, [pc, #108]	; (8001170 <main+0x19c>)
 8001102:	f001 fcc7 	bl	8002a94 <siprintf>

	  LCD1602_clear();
 8001106:	f7ff fe55 	bl	8000db4 <LCD1602_clear>
	  LCD1602_setCursor(1,1);
 800110a:	2101      	movs	r1, #1
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fe2b 	bl	8000d68 <LCD1602_setCursor>
	  LCD1602_print(linia);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe09 	bl	8000d2c <LCD1602_print>

	  if(Temperature > 20 && Temperature < 30) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <main+0x198>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dd0f      	ble.n	800114e <main+0x17a>
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <main+0x198>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d505      	bpl.n	800114e <main+0x17a>
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <main+0x180>)
 800114a:	f000 fd6d 	bl	8001c28 <HAL_GPIO_WritePin>
	  Presence = DS18B20_Start();
 800114e:	e761      	b.n	8001014 <main+0x40>
 8001150:	200000c8 	.word	0x200000c8
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	200000c4 	.word	0x200000c4
 8001160:	2000010a 	.word	0x2000010a
 8001164:	2000010e 	.word	0x2000010e
 8001168:	20000108 	.word	0x20000108
 800116c:	200000b0 	.word	0x200000b0
 8001170:	0800332c 	.word	0x0800332c

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fc7e 	bl	8002a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <SystemClock_Config+0xcc>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <SystemClock_Config+0xd0>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011e8:	23a8      	movs	r3, #168	; 0xa8
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fd2f 	bl	8001c5c <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001204:	f000 f8f8 	bl	80013f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2105      	movs	r1, #5
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff88 	bl	800213c <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001232:	f000 f8e1 	bl	80013f8 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM3_Init+0x94>)
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <MX_TIM3_Init+0x98>)
 8001268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM3_Init+0x94>)
 800126c:	2253      	movs	r2, #83	; 0x53
 800126e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM3_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM3_Init+0x94>)
 8001278:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800127c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM3_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM3_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_TIM3_Init+0x94>)
 800128c:	f001 f914 	bl	80024b8 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 f8af 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM3_Init+0x94>)
 80012a8:	f001 f955 	bl	8002556 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f8a1 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM3_Init+0x94>)
 80012c4:	f001 fb38 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f000 f893 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000c8 	.word	0x200000c8
 80012e0:	40000400 	.word	0x40000400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a39      	ldr	r2, [pc, #228]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <MX_GPIO_Init+0x104>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x104>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <MX_GPIO_Init+0x104>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_GPIO_Init+0x104>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2102      	movs	r1, #2
 800136e:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_GPIO_Init+0x108>)
 8001370:	f000 fc5a 	bl	8001c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800137a:	481d      	ldr	r0, [pc, #116]	; (80013f0 <MX_GPIO_Init+0x10c>)
 800137c:	f000 fc54 	bl	8001c28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2103      	movs	r1, #3
 8001384:	481b      	ldr	r0, [pc, #108]	; (80013f4 <MX_GPIO_Init+0x110>)
 8001386:	f000 fc4f 	bl	8001c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138a:	2302      	movs	r3, #2
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_GPIO_Init+0x108>)
 80013a2:	f000 fa8f 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80013a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0x10c>)
 80013c0:	f000 fa80 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80013c4:	2303      	movs	r3, #3
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_GPIO_Init+0x110>)
 80013dc:	f000 fa72 	bl	80018c4 <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_TIM_Base_MspInit+0x3c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_TIM_Base_MspInit+0x40>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_TIM_Base_MspInit+0x40>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_TIM_Base_MspInit+0x40>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40000400 	.word	0x40000400
 8001498:	40023800 	.word	0x40023800

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f000 f8c0 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x50>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x16>
		heap_end = &end;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <_sbrk+0x50>)
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <_sbrk+0x54>)
 800150c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <_sbrk+0x50>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <_sbrk+0x50>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	466a      	mov	r2, sp
 800151e:	4293      	cmp	r3, r2
 8001520:	d907      	bls.n	8001532 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001522:	f001 fa85 	bl	8002a30 <__errno>
 8001526:	4602      	mov	r2, r0
 8001528:	230c      	movs	r3, #12
 800152a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001530:	e006      	b.n	8001540 <_sbrk+0x48>
	}

	heap_end += incr;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <_sbrk+0x50>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a03      	ldr	r2, [pc, #12]	; (8001548 <_sbrk+0x50>)
 800153c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000b4 	.word	0x200000b4
 800154c:	20000118 	.word	0x20000118

08001550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <SystemInit+0x28>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <SystemInit+0x28>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SystemInit+0x28>)
 8001566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156a:	609a      	str	r2, [r3, #8]
#endif
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001580:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001582:	e003      	b.n	800158c <LoopCopyDataInit>

08001584 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001586:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001588:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800158a:	3104      	adds	r1, #4

0800158c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001590:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001594:	d3f6      	bcc.n	8001584 <CopyDataInit>
  ldr  r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001598:	e002      	b.n	80015a0 <LoopFillZerobss>

0800159a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800159a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800159c:	f842 3b04 	str.w	r3, [r2], #4

080015a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a4:	d3f9      	bcc.n	800159a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a6:	f7ff ffd3 	bl	8001550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f001 fa47 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fd11 	bl	8000fd4 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015b8:	08003388 	.word	0x08003388
  ldr  r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015c0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80015c4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80015c8:	20000118 	.word	0x20000118

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f92f 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff ff00 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f939 	bl	80018aa <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001650:	f000 f90f 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000004 	.word	0x20000004
 800166c:	2000000c 	.word	0x2000000c
 8001670:	20000008 	.word	0x20000008

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000110 	.word	0x20000110

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000110 	.word	0x20000110

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_Delay+0x40>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000000c 	.word	0x2000000c

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	f7ff ff8e 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff47 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff5c 	bl	8001740 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff8e 	bl	80017b0 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffb0 	bl	8001818 <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e16b      	b.n	8001bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 815a 	bne.w	8001bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d00b      	beq.n	800191e <HAL_GPIO_Init+0x5a>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001912:	2b11      	cmp	r3, #17
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d130      	bne.n	8001980 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0xfc>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b12      	cmp	r3, #18
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80b4 	beq.w	8001bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02b      	beq.n	8001aea <HAL_GPIO_Init+0x226>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x314>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d025      	beq.n	8001ae6 <HAL_GPIO_Init+0x222>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x318>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01f      	beq.n	8001ae2 <HAL_GPIO_Init+0x21e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_Init+0x31c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x320>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x216>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x212>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x328>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_GPIO_Init+0x32c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x20a>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00e      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae90 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e25b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d075      	beq.n	8001d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d00c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d112      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b9d      	ldr	r3, [pc, #628]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x108>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e236      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x74>
 8001cc2:	4b91      	ldr	r3, [pc, #580]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a90      	ldr	r2, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a8a      	ldr	r2, [pc, #552]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a83      	ldr	r2, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a80      	ldr	r2, [pc, #512]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fcc2 	bl	800169c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fcbe 	bl	800169c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1fb      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xc0>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fcae 	bl	800169c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fcaa 	bl	800169c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1e7      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0xe8>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1bb      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4952      	ldr	r1, [pc, #328]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fc63 	bl	800169c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fc5f 	bl	800169c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e19c      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4940      	ldr	r1, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fc42 	bl	800169c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fc3e 	bl	800169c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e17b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d030      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x2b4>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff fc22 	bl	800169c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc1e 	bl	800169c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e15b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x200>
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x2b4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fc0b 	bl	800169c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fc07 	bl	800169c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e144      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a0 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fbcd 	bl	800169c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ce>
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	42470000 	.word	0x42470000
 8001f10:	42470e80 	.word	0x42470e80
 8001f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7ff fbc0 	bl	800169c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0fd      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x4d4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
 8001f3e:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a7c      	ldr	r2, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x32a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x312>
 8001f54:	4b77      	ldr	r3, [pc, #476]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a76      	ldr	r2, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b74      	ldr	r3, [pc, #464]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a73      	ldr	r2, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x32a>
 8001f6e:	4b71      	ldr	r3, [pc, #452]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a70      	ldr	r2, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a6d      	ldr	r2, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb85 	bl	800169c <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb81 	bl	800169c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0bc      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x33a>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb6f 	bl	800169c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fb6b 	bl	800169c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0a6      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8092 	beq.w	8002124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d05c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d141      	bne.n	8002098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fb3f 	bl	800169c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fb3b 	bl	800169c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e078      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	3b01      	subs	r3, #1
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	4933      	ldr	r1, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fb14 	bl	800169c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff fb10 	bl	800169c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04d      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x41c>
 8002096:	e045      	b.n	8002124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7ff fafd 	bl	800169c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff faf9 	bl	800169c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e036      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x44a>
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e029      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d115      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002100:	4293      	cmp	r3, r2
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40007000 	.word	0x40007000
 8002134:	40023800 	.word	0x40023800
 8002138:	42470060 	.word	0x42470060

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cc      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90c      	bls.n	8002178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d044      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e067      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7ff fa36 	bl	800169c <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff fa32 	bl	800169c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d20c      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f821 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f996 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08003334 	.word	0x08003334
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d007      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x32>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d008      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x38>
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80b4 	bne.w	800249c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002336:	60bb      	str	r3, [r7, #8]
       break;
 8002338:	e0b3      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800233c:	60bb      	str	r3, [r7, #8]
      break;
 800233e:	e0b0      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04a      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	ea03 0501 	and.w	r5, r3, r1
 800236c:	ea04 0602 	and.w	r6, r4, r2
 8002370:	4629      	mov	r1, r5
 8002372:	4632      	mov	r2, r6
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	0154      	lsls	r4, r2, #5
 800237e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002382:	014b      	lsls	r3, r1, #5
 8002384:	4619      	mov	r1, r3
 8002386:	4622      	mov	r2, r4
 8002388:	1b49      	subs	r1, r1, r5
 800238a:	eb62 0206 	sbc.w	r2, r2, r6
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0194      	lsls	r4, r2, #6
 8002398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800239c:	018b      	lsls	r3, r1, #6
 800239e:	1a5b      	subs	r3, r3, r1
 80023a0:	eb64 0402 	sbc.w	r4, r4, r2
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	00e2      	lsls	r2, r4, #3
 80023ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	460b      	mov	r3, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	195b      	adds	r3, r3, r5
 80023ba:	eb44 0406 	adc.w	r4, r4, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	0262      	lsls	r2, r4, #9
 80023c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023cc:	0259      	lsls	r1, r3, #9
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	4621      	mov	r1, r4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	461a      	mov	r2, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	f7fe f92a 	bl	8000638 <__aeabi_uldivmod>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e049      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	ea03 0501 	and.w	r5, r3, r1
 8002402:	ea04 0602 	and.w	r6, r4, r2
 8002406:	4629      	mov	r1, r5
 8002408:	4632      	mov	r2, r6
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	0154      	lsls	r4, r2, #5
 8002414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002418:	014b      	lsls	r3, r1, #5
 800241a:	4619      	mov	r1, r3
 800241c:	4622      	mov	r2, r4
 800241e:	1b49      	subs	r1, r1, r5
 8002420:	eb62 0206 	sbc.w	r2, r2, r6
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	f04f 0400 	mov.w	r4, #0
 800242c:	0194      	lsls	r4, r2, #6
 800242e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002432:	018b      	lsls	r3, r1, #6
 8002434:	1a5b      	subs	r3, r3, r1
 8002436:	eb64 0402 	sbc.w	r4, r4, r2
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	00e2      	lsls	r2, r4, #3
 8002444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002448:	00d9      	lsls	r1, r3, #3
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	195b      	adds	r3, r3, r5
 8002450:	eb44 0406 	adc.w	r4, r4, r6
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	02a2      	lsls	r2, r4, #10
 800245e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002462:	0299      	lsls	r1, r3, #10
 8002464:	460b      	mov	r3, r1
 8002466:	4614      	mov	r4, r2
 8002468:	4618      	mov	r0, r3
 800246a:	4621      	mov	r1, r4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	461a      	mov	r2, r3
 8002474:	4623      	mov	r3, r4
 8002476:	f7fe f8df 	bl	8000638 <__aeabi_uldivmod>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	60bb      	str	r3, [r7, #8]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800249e:	60bb      	str	r3, [r7, #8]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	68bb      	ldr	r3, [r7, #8]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e01d      	b.n	8002506 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe ffba 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 f8e4 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b06      	cmp	r3, #6
 800252e:	d007      	beq.n	8002540 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_TIM_ConfigClockSource+0x18>
 800256a:	2302      	movs	r3, #2
 800256c:	e0a6      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x166>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002594:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d067      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x120>
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d80b      	bhi.n	80025c2 <HAL_TIM_ConfigClockSource+0x6c>
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d073      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x140>
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d802      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x62>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06f      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025b6:	e078      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d06c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x140>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d06a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025c0:	e073      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025c2:	2b70      	cmp	r3, #112	; 0x70
 80025c4:	d00d      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x8c>
 80025c6:	2b70      	cmp	r3, #112	; 0x70
 80025c8:	d804      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x7e>
 80025ca:	2b50      	cmp	r3, #80	; 0x50
 80025cc:	d033      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xe0>
 80025ce:	2b60      	cmp	r3, #96	; 0x60
 80025d0:	d041      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025d2:	e06a      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d066      	beq.n	80026a8 <HAL_TIM_ConfigClockSource+0x152>
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025de:	d017      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025e0:	e063      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f000 f981 	bl	80028f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002604:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	609a      	str	r2, [r3, #8]
      break;
 800260e:	e04c      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f000 f96a 	bl	80028f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e039      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	f000 f8de 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2150      	movs	r1, #80	; 0x50
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f937 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 8002654:	e029      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8fd 	bl	8002862 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2160      	movs	r1, #96	; 0x60
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f927 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 8002674:	e019      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8be 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f917 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 8002694:	e009      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f000 f90e 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 80026a6:	e000      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a40      	ldr	r2, [pc, #256]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d00f      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <TIM_Base_SetConfig+0x118>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00b      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3c      	ldr	r2, [pc, #240]	; (80027e0 <TIM_Base_SetConfig+0x11c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <TIM_Base_SetConfig+0x120>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3a      	ldr	r2, [pc, #232]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d108      	bne.n	8002716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d027      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <TIM_Base_SetConfig+0x118>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d023      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <TIM_Base_SetConfig+0x11c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <TIM_Base_SetConfig+0x120>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d017      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a28      	ldr	r2, [pc, #160]	; (80027ec <TIM_Base_SetConfig+0x128>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <TIM_Base_SetConfig+0x12c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <TIM_Base_SetConfig+0x130>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <TIM_Base_SetConfig+0x134>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a24      	ldr	r2, [pc, #144]	; (80027fc <TIM_Base_SetConfig+0x138>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <TIM_Base_SetConfig+0x13c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0xf8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40010400 	.word	0x40010400
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	40001800 	.word	0x40001800
 80027fc:	40001c00 	.word	0x40001c00
 8002800:	40002000 	.word	0x40002000

08002804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 0210 	bic.w	r2, r3, #16
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800288c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f043 0307 	orr.w	r3, r3, #7
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	431a      	orrs	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e05a      	b.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d01d      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10c      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40010400 	.word	0x40010400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40001800 	.word	0x40001800

08002a30 <__errno>:
 8002a30:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <__errno+0x8>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000010 	.word	0x20000010

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	4e0d      	ldr	r6, [pc, #52]	; (8002a74 <__libc_init_array+0x38>)
 8002a40:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a42:	1ba4      	subs	r4, r4, r6
 8002a44:	10a4      	asrs	r4, r4, #2
 8002a46:	2500      	movs	r5, #0
 8002a48:	42a5      	cmp	r5, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	4e0b      	ldr	r6, [pc, #44]	; (8002a7c <__libc_init_array+0x40>)
 8002a4e:	4c0c      	ldr	r4, [pc, #48]	; (8002a80 <__libc_init_array+0x44>)
 8002a50:	f000 fc60 	bl	8003314 <_init>
 8002a54:	1ba4      	subs	r4, r4, r6
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	2500      	movs	r5, #0
 8002a5a:	42a5      	cmp	r5, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a64:	4798      	blx	r3
 8002a66:	3501      	adds	r5, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a6e:	4798      	blx	r3
 8002a70:	3501      	adds	r5, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08003380 	.word	0x08003380
 8002a78:	08003380 	.word	0x08003380
 8002a7c:	08003380 	.word	0x08003380
 8002a80:	08003384 	.word	0x08003384

08002a84 <memset>:
 8002a84:	4402      	add	r2, r0
 8002a86:	4603      	mov	r3, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <siprintf>:
 8002a94:	b40e      	push	{r1, r2, r3}
 8002a96:	b500      	push	{lr}
 8002a98:	b09c      	sub	sp, #112	; 0x70
 8002a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002a9c:	9002      	str	r0, [sp, #8]
 8002a9e:	9006      	str	r0, [sp, #24]
 8002aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aa4:	4809      	ldr	r0, [pc, #36]	; (8002acc <siprintf+0x38>)
 8002aa6:	9107      	str	r1, [sp, #28]
 8002aa8:	9104      	str	r1, [sp, #16]
 8002aaa:	4909      	ldr	r1, [pc, #36]	; (8002ad0 <siprintf+0x3c>)
 8002aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ab0:	9105      	str	r1, [sp, #20]
 8002ab2:	6800      	ldr	r0, [r0, #0]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	a902      	add	r1, sp, #8
 8002ab8:	f000 f866 	bl	8002b88 <_svfiprintf_r>
 8002abc:	9b02      	ldr	r3, [sp, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	b01c      	add	sp, #112	; 0x70
 8002ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ac8:	b003      	add	sp, #12
 8002aca:	4770      	bx	lr
 8002acc:	20000010 	.word	0x20000010
 8002ad0:	ffff0208 	.word	0xffff0208

08002ad4 <__ssputs_r>:
 8002ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	688e      	ldr	r6, [r1, #8]
 8002ada:	429e      	cmp	r6, r3
 8002adc:	4682      	mov	sl, r0
 8002ade:	460c      	mov	r4, r1
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	d837      	bhi.n	8002b56 <__ssputs_r+0x82>
 8002ae6:	898a      	ldrh	r2, [r1, #12]
 8002ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002aec:	d031      	beq.n	8002b52 <__ssputs_r+0x7e>
 8002aee:	6825      	ldr	r5, [r4, #0]
 8002af0:	6909      	ldr	r1, [r1, #16]
 8002af2:	1a6f      	subs	r7, r5, r1
 8002af4:	6965      	ldr	r5, [r4, #20]
 8002af6:	2302      	movs	r3, #2
 8002af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002afc:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b00:	f109 0301 	add.w	r3, r9, #1
 8002b04:	443b      	add	r3, r7
 8002b06:	429d      	cmp	r5, r3
 8002b08:	bf38      	it	cc
 8002b0a:	461d      	movcc	r5, r3
 8002b0c:	0553      	lsls	r3, r2, #21
 8002b0e:	d530      	bpl.n	8002b72 <__ssputs_r+0x9e>
 8002b10:	4629      	mov	r1, r5
 8002b12:	f000 fb2b 	bl	800316c <_malloc_r>
 8002b16:	4606      	mov	r6, r0
 8002b18:	b950      	cbnz	r0, 8002b30 <__ssputs_r+0x5c>
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	f8ca 3000 	str.w	r3, [sl]
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	463a      	mov	r2, r7
 8002b32:	6921      	ldr	r1, [r4, #16]
 8002b34:	f000 faa8 	bl	8003088 <memcpy>
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b42:	81a3      	strh	r3, [r4, #12]
 8002b44:	6126      	str	r6, [r4, #16]
 8002b46:	6165      	str	r5, [r4, #20]
 8002b48:	443e      	add	r6, r7
 8002b4a:	1bed      	subs	r5, r5, r7
 8002b4c:	6026      	str	r6, [r4, #0]
 8002b4e:	60a5      	str	r5, [r4, #8]
 8002b50:	464e      	mov	r6, r9
 8002b52:	454e      	cmp	r6, r9
 8002b54:	d900      	bls.n	8002b58 <__ssputs_r+0x84>
 8002b56:	464e      	mov	r6, r9
 8002b58:	4632      	mov	r2, r6
 8002b5a:	4641      	mov	r1, r8
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	f000 fa9e 	bl	800309e <memmove>
 8002b62:	68a3      	ldr	r3, [r4, #8]
 8002b64:	1b9b      	subs	r3, r3, r6
 8002b66:	60a3      	str	r3, [r4, #8]
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	441e      	add	r6, r3
 8002b6c:	6026      	str	r6, [r4, #0]
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7dc      	b.n	8002b2c <__ssputs_r+0x58>
 8002b72:	462a      	mov	r2, r5
 8002b74:	f000 fb54 	bl	8003220 <_realloc_r>
 8002b78:	4606      	mov	r6, r0
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1e2      	bne.n	8002b44 <__ssputs_r+0x70>
 8002b7e:	6921      	ldr	r1, [r4, #16]
 8002b80:	4650      	mov	r0, sl
 8002b82:	f000 faa5 	bl	80030d0 <_free_r>
 8002b86:	e7c8      	b.n	8002b1a <__ssputs_r+0x46>

08002b88 <_svfiprintf_r>:
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	898b      	ldrh	r3, [r1, #12]
 8002b90:	061f      	lsls	r7, r3, #24
 8002b92:	b09d      	sub	sp, #116	; 0x74
 8002b94:	4680      	mov	r8, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	4616      	mov	r6, r2
 8002b9a:	d50f      	bpl.n	8002bbc <_svfiprintf_r+0x34>
 8002b9c:	690b      	ldr	r3, [r1, #16]
 8002b9e:	b96b      	cbnz	r3, 8002bbc <_svfiprintf_r+0x34>
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	f000 fae3 	bl	800316c <_malloc_r>
 8002ba6:	6020      	str	r0, [r4, #0]
 8002ba8:	6120      	str	r0, [r4, #16]
 8002baa:	b928      	cbnz	r0, 8002bb8 <_svfiprintf_r+0x30>
 8002bac:	230c      	movs	r3, #12
 8002bae:	f8c8 3000 	str.w	r3, [r8]
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb6:	e0c8      	b.n	8002d4a <_svfiprintf_r+0x1c2>
 8002bb8:	2340      	movs	r3, #64	; 0x40
 8002bba:	6163      	str	r3, [r4, #20]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bc6:	2330      	movs	r3, #48	; 0x30
 8002bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bcc:	9503      	str	r5, [sp, #12]
 8002bce:	f04f 0b01 	mov.w	fp, #1
 8002bd2:	4637      	mov	r7, r6
 8002bd4:	463d      	mov	r5, r7
 8002bd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002bda:	b10b      	cbz	r3, 8002be0 <_svfiprintf_r+0x58>
 8002bdc:	2b25      	cmp	r3, #37	; 0x25
 8002bde:	d13e      	bne.n	8002c5e <_svfiprintf_r+0xd6>
 8002be0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002be4:	d00b      	beq.n	8002bfe <_svfiprintf_r+0x76>
 8002be6:	4653      	mov	r3, sl
 8002be8:	4632      	mov	r2, r6
 8002bea:	4621      	mov	r1, r4
 8002bec:	4640      	mov	r0, r8
 8002bee:	f7ff ff71 	bl	8002ad4 <__ssputs_r>
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	f000 80a4 	beq.w	8002d40 <_svfiprintf_r+0x1b8>
 8002bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bfa:	4453      	add	r3, sl
 8002bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bfe:	783b      	ldrb	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 809d 	beq.w	8002d40 <_svfiprintf_r+0x1b8>
 8002c06:	2300      	movs	r3, #0
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	9307      	str	r3, [sp, #28]
 8002c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c18:	931a      	str	r3, [sp, #104]	; 0x68
 8002c1a:	462f      	mov	r7, r5
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002c22:	4850      	ldr	r0, [pc, #320]	; (8002d64 <_svfiprintf_r+0x1dc>)
 8002c24:	f7fd fad4 	bl	80001d0 <memchr>
 8002c28:	9b04      	ldr	r3, [sp, #16]
 8002c2a:	b9d0      	cbnz	r0, 8002c62 <_svfiprintf_r+0xda>
 8002c2c:	06d9      	lsls	r1, r3, #27
 8002c2e:	bf44      	itt	mi
 8002c30:	2220      	movmi	r2, #32
 8002c32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c36:	071a      	lsls	r2, r3, #28
 8002c38:	bf44      	itt	mi
 8002c3a:	222b      	movmi	r2, #43	; 0x2b
 8002c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c40:	782a      	ldrb	r2, [r5, #0]
 8002c42:	2a2a      	cmp	r2, #42	; 0x2a
 8002c44:	d015      	beq.n	8002c72 <_svfiprintf_r+0xea>
 8002c46:	9a07      	ldr	r2, [sp, #28]
 8002c48:	462f      	mov	r7, r5
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	250a      	movs	r5, #10
 8002c4e:	4639      	mov	r1, r7
 8002c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c54:	3b30      	subs	r3, #48	; 0x30
 8002c56:	2b09      	cmp	r3, #9
 8002c58:	d94d      	bls.n	8002cf6 <_svfiprintf_r+0x16e>
 8002c5a:	b1b8      	cbz	r0, 8002c8c <_svfiprintf_r+0x104>
 8002c5c:	e00f      	b.n	8002c7e <_svfiprintf_r+0xf6>
 8002c5e:	462f      	mov	r7, r5
 8002c60:	e7b8      	b.n	8002bd4 <_svfiprintf_r+0x4c>
 8002c62:	4a40      	ldr	r2, [pc, #256]	; (8002d64 <_svfiprintf_r+0x1dc>)
 8002c64:	1a80      	subs	r0, r0, r2
 8002c66:	fa0b f000 	lsl.w	r0, fp, r0
 8002c6a:	4318      	orrs	r0, r3
 8002c6c:	9004      	str	r0, [sp, #16]
 8002c6e:	463d      	mov	r5, r7
 8002c70:	e7d3      	b.n	8002c1a <_svfiprintf_r+0x92>
 8002c72:	9a03      	ldr	r2, [sp, #12]
 8002c74:	1d11      	adds	r1, r2, #4
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	9103      	str	r1, [sp, #12]
 8002c7a:	2a00      	cmp	r2, #0
 8002c7c:	db01      	blt.n	8002c82 <_svfiprintf_r+0xfa>
 8002c7e:	9207      	str	r2, [sp, #28]
 8002c80:	e004      	b.n	8002c8c <_svfiprintf_r+0x104>
 8002c82:	4252      	negs	r2, r2
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	9207      	str	r2, [sp, #28]
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	783b      	ldrb	r3, [r7, #0]
 8002c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c90:	d10c      	bne.n	8002cac <_svfiprintf_r+0x124>
 8002c92:	787b      	ldrb	r3, [r7, #1]
 8002c94:	2b2a      	cmp	r3, #42	; 0x2a
 8002c96:	d133      	bne.n	8002d00 <_svfiprintf_r+0x178>
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	1d1a      	adds	r2, r3, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	9203      	str	r2, [sp, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bfb8      	it	lt
 8002ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ca8:	3702      	adds	r7, #2
 8002caa:	9305      	str	r3, [sp, #20]
 8002cac:	4d2e      	ldr	r5, [pc, #184]	; (8002d68 <_svfiprintf_r+0x1e0>)
 8002cae:	7839      	ldrb	r1, [r7, #0]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f7fd fa8c 	bl	80001d0 <memchr>
 8002cb8:	b138      	cbz	r0, 8002cca <_svfiprintf_r+0x142>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	1b40      	subs	r0, r0, r5
 8002cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8002cc2:	9b04      	ldr	r3, [sp, #16]
 8002cc4:	4303      	orrs	r3, r0
 8002cc6:	3701      	adds	r7, #1
 8002cc8:	9304      	str	r3, [sp, #16]
 8002cca:	7839      	ldrb	r1, [r7, #0]
 8002ccc:	4827      	ldr	r0, [pc, #156]	; (8002d6c <_svfiprintf_r+0x1e4>)
 8002cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cd2:	2206      	movs	r2, #6
 8002cd4:	1c7e      	adds	r6, r7, #1
 8002cd6:	f7fd fa7b 	bl	80001d0 <memchr>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d038      	beq.n	8002d50 <_svfiprintf_r+0x1c8>
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <_svfiprintf_r+0x1e8>)
 8002ce0:	bb13      	cbnz	r3, 8002d28 <_svfiprintf_r+0x1a0>
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	3308      	adds	r3, #8
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf0:	444b      	add	r3, r9
 8002cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf4:	e76d      	b.n	8002bd2 <_svfiprintf_r+0x4a>
 8002cf6:	fb05 3202 	mla	r2, r5, r2, r3
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	460f      	mov	r7, r1
 8002cfe:	e7a6      	b.n	8002c4e <_svfiprintf_r+0xc6>
 8002d00:	2300      	movs	r3, #0
 8002d02:	3701      	adds	r7, #1
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	4619      	mov	r1, r3
 8002d08:	250a      	movs	r5, #10
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d10:	3a30      	subs	r2, #48	; 0x30
 8002d12:	2a09      	cmp	r2, #9
 8002d14:	d903      	bls.n	8002d1e <_svfiprintf_r+0x196>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0c8      	beq.n	8002cac <_svfiprintf_r+0x124>
 8002d1a:	9105      	str	r1, [sp, #20]
 8002d1c:	e7c6      	b.n	8002cac <_svfiprintf_r+0x124>
 8002d1e:	fb05 2101 	mla	r1, r5, r1, r2
 8002d22:	2301      	movs	r3, #1
 8002d24:	4607      	mov	r7, r0
 8002d26:	e7f0      	b.n	8002d0a <_svfiprintf_r+0x182>
 8002d28:	ab03      	add	r3, sp, #12
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <_svfiprintf_r+0x1ec>)
 8002d30:	a904      	add	r1, sp, #16
 8002d32:	4640      	mov	r0, r8
 8002d34:	f3af 8000 	nop.w
 8002d38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002d3c:	4681      	mov	r9, r0
 8002d3e:	d1d6      	bne.n	8002cee <_svfiprintf_r+0x166>
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	065b      	lsls	r3, r3, #25
 8002d44:	f53f af35 	bmi.w	8002bb2 <_svfiprintf_r+0x2a>
 8002d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d4a:	b01d      	add	sp, #116	; 0x74
 8002d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d50:	ab03      	add	r3, sp, #12
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4622      	mov	r2, r4
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <_svfiprintf_r+0x1ec>)
 8002d58:	a904      	add	r1, sp, #16
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	f000 f882 	bl	8002e64 <_printf_i>
 8002d60:	e7ea      	b.n	8002d38 <_svfiprintf_r+0x1b0>
 8002d62:	bf00      	nop
 8002d64:	08003344 	.word	0x08003344
 8002d68:	0800334a 	.word	0x0800334a
 8002d6c:	0800334e 	.word	0x0800334e
 8002d70:	00000000 	.word	0x00000000
 8002d74:	08002ad5 	.word	0x08002ad5

08002d78 <_printf_common>:
 8002d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d7c:	4691      	mov	r9, r2
 8002d7e:	461f      	mov	r7, r3
 8002d80:	688a      	ldr	r2, [r1, #8]
 8002d82:	690b      	ldr	r3, [r1, #16]
 8002d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bfb8      	it	lt
 8002d8c:	4613      	movlt	r3, r2
 8002d8e:	f8c9 3000 	str.w	r3, [r9]
 8002d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d96:	4606      	mov	r6, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	b112      	cbz	r2, 8002da2 <_printf_common+0x2a>
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f8c9 3000 	str.w	r3, [r9]
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	0699      	lsls	r1, r3, #26
 8002da6:	bf42      	ittt	mi
 8002da8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002dac:	3302      	addmi	r3, #2
 8002dae:	f8c9 3000 	strmi.w	r3, [r9]
 8002db2:	6825      	ldr	r5, [r4, #0]
 8002db4:	f015 0506 	ands.w	r5, r5, #6
 8002db8:	d107      	bne.n	8002dca <_printf_common+0x52>
 8002dba:	f104 0a19 	add.w	sl, r4, #25
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	f8d9 2000 	ldr.w	r2, [r9]
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	42ab      	cmp	r3, r5
 8002dc8:	dc28      	bgt.n	8002e1c <_printf_common+0xa4>
 8002dca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	3300      	adds	r3, #0
 8002dd2:	bf18      	it	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	0692      	lsls	r2, r2, #26
 8002dd8:	d42d      	bmi.n	8002e36 <_printf_common+0xbe>
 8002dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dde:	4639      	mov	r1, r7
 8002de0:	4630      	mov	r0, r6
 8002de2:	47c0      	blx	r8
 8002de4:	3001      	adds	r0, #1
 8002de6:	d020      	beq.n	8002e2a <_printf_common+0xb2>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	68e5      	ldr	r5, [r4, #12]
 8002dec:	f8d9 2000 	ldr.w	r2, [r9]
 8002df0:	f003 0306 	and.w	r3, r3, #6
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	bf08      	it	eq
 8002df8:	1aad      	subeq	r5, r5, r2
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	6922      	ldr	r2, [r4, #16]
 8002dfe:	bf0c      	ite	eq
 8002e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e04:	2500      	movne	r5, #0
 8002e06:	4293      	cmp	r3, r2
 8002e08:	bfc4      	itt	gt
 8002e0a:	1a9b      	subgt	r3, r3, r2
 8002e0c:	18ed      	addgt	r5, r5, r3
 8002e0e:	f04f 0900 	mov.w	r9, #0
 8002e12:	341a      	adds	r4, #26
 8002e14:	454d      	cmp	r5, r9
 8002e16:	d11a      	bne.n	8002e4e <_printf_common+0xd6>
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e008      	b.n	8002e2e <_printf_common+0xb6>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4652      	mov	r2, sl
 8002e20:	4639      	mov	r1, r7
 8002e22:	4630      	mov	r0, r6
 8002e24:	47c0      	blx	r8
 8002e26:	3001      	adds	r0, #1
 8002e28:	d103      	bne.n	8002e32 <_printf_common+0xba>
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e32:	3501      	adds	r5, #1
 8002e34:	e7c3      	b.n	8002dbe <_printf_common+0x46>
 8002e36:	18e1      	adds	r1, r4, r3
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	2030      	movs	r0, #48	; 0x30
 8002e3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e40:	4422      	add	r2, r4
 8002e42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	e7c5      	b.n	8002dda <_printf_common+0x62>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4622      	mov	r2, r4
 8002e52:	4639      	mov	r1, r7
 8002e54:	4630      	mov	r0, r6
 8002e56:	47c0      	blx	r8
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d0e6      	beq.n	8002e2a <_printf_common+0xb2>
 8002e5c:	f109 0901 	add.w	r9, r9, #1
 8002e60:	e7d8      	b.n	8002e14 <_printf_common+0x9c>
	...

08002e64 <_printf_i>:
 8002e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	7e09      	ldrb	r1, [r1, #24]
 8002e70:	b085      	sub	sp, #20
 8002e72:	296e      	cmp	r1, #110	; 0x6e
 8002e74:	4617      	mov	r7, r2
 8002e76:	4606      	mov	r6, r0
 8002e78:	4698      	mov	r8, r3
 8002e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e7c:	f000 80b3 	beq.w	8002fe6 <_printf_i+0x182>
 8002e80:	d822      	bhi.n	8002ec8 <_printf_i+0x64>
 8002e82:	2963      	cmp	r1, #99	; 0x63
 8002e84:	d036      	beq.n	8002ef4 <_printf_i+0x90>
 8002e86:	d80a      	bhi.n	8002e9e <_printf_i+0x3a>
 8002e88:	2900      	cmp	r1, #0
 8002e8a:	f000 80b9 	beq.w	8003000 <_printf_i+0x19c>
 8002e8e:	2958      	cmp	r1, #88	; 0x58
 8002e90:	f000 8083 	beq.w	8002f9a <_printf_i+0x136>
 8002e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e9c:	e032      	b.n	8002f04 <_printf_i+0xa0>
 8002e9e:	2964      	cmp	r1, #100	; 0x64
 8002ea0:	d001      	beq.n	8002ea6 <_printf_i+0x42>
 8002ea2:	2969      	cmp	r1, #105	; 0x69
 8002ea4:	d1f6      	bne.n	8002e94 <_printf_i+0x30>
 8002ea6:	6820      	ldr	r0, [r4, #0]
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	0605      	lsls	r5, r0, #24
 8002eac:	f103 0104 	add.w	r1, r3, #4
 8002eb0:	d52a      	bpl.n	8002f08 <_printf_i+0xa4>
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da03      	bge.n	8002ec2 <_printf_i+0x5e>
 8002eba:	222d      	movs	r2, #45	; 0x2d
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ec2:	486f      	ldr	r0, [pc, #444]	; (8003080 <_printf_i+0x21c>)
 8002ec4:	220a      	movs	r2, #10
 8002ec6:	e039      	b.n	8002f3c <_printf_i+0xd8>
 8002ec8:	2973      	cmp	r1, #115	; 0x73
 8002eca:	f000 809d 	beq.w	8003008 <_printf_i+0x1a4>
 8002ece:	d808      	bhi.n	8002ee2 <_printf_i+0x7e>
 8002ed0:	296f      	cmp	r1, #111	; 0x6f
 8002ed2:	d020      	beq.n	8002f16 <_printf_i+0xb2>
 8002ed4:	2970      	cmp	r1, #112	; 0x70
 8002ed6:	d1dd      	bne.n	8002e94 <_printf_i+0x30>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	f043 0320 	orr.w	r3, r3, #32
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	e003      	b.n	8002eea <_printf_i+0x86>
 8002ee2:	2975      	cmp	r1, #117	; 0x75
 8002ee4:	d017      	beq.n	8002f16 <_printf_i+0xb2>
 8002ee6:	2978      	cmp	r1, #120	; 0x78
 8002ee8:	d1d4      	bne.n	8002e94 <_printf_i+0x30>
 8002eea:	2378      	movs	r3, #120	; 0x78
 8002eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ef0:	4864      	ldr	r0, [pc, #400]	; (8003084 <_printf_i+0x220>)
 8002ef2:	e055      	b.n	8002fa0 <_printf_i+0x13c>
 8002ef4:	6813      	ldr	r3, [r2, #0]
 8002ef6:	1d19      	adds	r1, r3, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6011      	str	r1, [r2, #0]
 8002efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f04:	2301      	movs	r3, #1
 8002f06:	e08c      	b.n	8003022 <_printf_i+0x1be>
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6011      	str	r1, [r2, #0]
 8002f0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f10:	bf18      	it	ne
 8002f12:	b21b      	sxthne	r3, r3
 8002f14:	e7cf      	b.n	8002eb6 <_printf_i+0x52>
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	6825      	ldr	r5, [r4, #0]
 8002f1a:	1d18      	adds	r0, r3, #4
 8002f1c:	6010      	str	r0, [r2, #0]
 8002f1e:	0628      	lsls	r0, r5, #24
 8002f20:	d501      	bpl.n	8002f26 <_printf_i+0xc2>
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	e002      	b.n	8002f2c <_printf_i+0xc8>
 8002f26:	0668      	lsls	r0, r5, #25
 8002f28:	d5fb      	bpl.n	8002f22 <_printf_i+0xbe>
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	4854      	ldr	r0, [pc, #336]	; (8003080 <_printf_i+0x21c>)
 8002f2e:	296f      	cmp	r1, #111	; 0x6f
 8002f30:	bf14      	ite	ne
 8002f32:	220a      	movne	r2, #10
 8002f34:	2208      	moveq	r2, #8
 8002f36:	2100      	movs	r1, #0
 8002f38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f3c:	6865      	ldr	r5, [r4, #4]
 8002f3e:	60a5      	str	r5, [r4, #8]
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	f2c0 8095 	blt.w	8003070 <_printf_i+0x20c>
 8002f46:	6821      	ldr	r1, [r4, #0]
 8002f48:	f021 0104 	bic.w	r1, r1, #4
 8002f4c:	6021      	str	r1, [r4, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d13d      	bne.n	8002fce <_printf_i+0x16a>
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	f040 808e 	bne.w	8003074 <_printf_i+0x210>
 8002f58:	4665      	mov	r5, ip
 8002f5a:	2a08      	cmp	r2, #8
 8002f5c:	d10b      	bne.n	8002f76 <_printf_i+0x112>
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	07db      	lsls	r3, r3, #31
 8002f62:	d508      	bpl.n	8002f76 <_printf_i+0x112>
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bfde      	ittt	le
 8002f6c:	2330      	movle	r3, #48	; 0x30
 8002f6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f72:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002f76:	ebac 0305 	sub.w	r3, ip, r5
 8002f7a:	6123      	str	r3, [r4, #16]
 8002f7c:	f8cd 8000 	str.w	r8, [sp]
 8002f80:	463b      	mov	r3, r7
 8002f82:	aa03      	add	r2, sp, #12
 8002f84:	4621      	mov	r1, r4
 8002f86:	4630      	mov	r0, r6
 8002f88:	f7ff fef6 	bl	8002d78 <_printf_common>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d14d      	bne.n	800302c <_printf_i+0x1c8>
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f94:	b005      	add	sp, #20
 8002f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f9a:	4839      	ldr	r0, [pc, #228]	; (8003080 <_printf_i+0x21c>)
 8002f9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	6821      	ldr	r1, [r4, #0]
 8002fa4:	1d1d      	adds	r5, r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6015      	str	r5, [r2, #0]
 8002faa:	060a      	lsls	r2, r1, #24
 8002fac:	d50b      	bpl.n	8002fc6 <_printf_i+0x162>
 8002fae:	07ca      	lsls	r2, r1, #31
 8002fb0:	bf44      	itt	mi
 8002fb2:	f041 0120 	orrmi.w	r1, r1, #32
 8002fb6:	6021      	strmi	r1, [r4, #0]
 8002fb8:	b91b      	cbnz	r3, 8002fc2 <_printf_i+0x15e>
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	f022 0220 	bic.w	r2, r2, #32
 8002fc0:	6022      	str	r2, [r4, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	e7b7      	b.n	8002f36 <_printf_i+0xd2>
 8002fc6:	064d      	lsls	r5, r1, #25
 8002fc8:	bf48      	it	mi
 8002fca:	b29b      	uxthmi	r3, r3
 8002fcc:	e7ef      	b.n	8002fae <_printf_i+0x14a>
 8002fce:	4665      	mov	r5, ip
 8002fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fd4:	fb02 3311 	mls	r3, r2, r1, r3
 8002fd8:	5cc3      	ldrb	r3, [r0, r3]
 8002fda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fde:	460b      	mov	r3, r1
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d1f5      	bne.n	8002fd0 <_printf_i+0x16c>
 8002fe4:	e7b9      	b.n	8002f5a <_printf_i+0xf6>
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	6825      	ldr	r5, [r4, #0]
 8002fea:	6961      	ldr	r1, [r4, #20]
 8002fec:	1d18      	adds	r0, r3, #4
 8002fee:	6010      	str	r0, [r2, #0]
 8002ff0:	0628      	lsls	r0, r5, #24
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	d501      	bpl.n	8002ffa <_printf_i+0x196>
 8002ff6:	6019      	str	r1, [r3, #0]
 8002ff8:	e002      	b.n	8003000 <_printf_i+0x19c>
 8002ffa:	066a      	lsls	r2, r5, #25
 8002ffc:	d5fb      	bpl.n	8002ff6 <_printf_i+0x192>
 8002ffe:	8019      	strh	r1, [r3, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	4665      	mov	r5, ip
 8003006:	e7b9      	b.n	8002f7c <_printf_i+0x118>
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	1d19      	adds	r1, r3, #4
 800300c:	6011      	str	r1, [r2, #0]
 800300e:	681d      	ldr	r5, [r3, #0]
 8003010:	6862      	ldr	r2, [r4, #4]
 8003012:	2100      	movs	r1, #0
 8003014:	4628      	mov	r0, r5
 8003016:	f7fd f8db 	bl	80001d0 <memchr>
 800301a:	b108      	cbz	r0, 8003020 <_printf_i+0x1bc>
 800301c:	1b40      	subs	r0, r0, r5
 800301e:	6060      	str	r0, [r4, #4]
 8003020:	6863      	ldr	r3, [r4, #4]
 8003022:	6123      	str	r3, [r4, #16]
 8003024:	2300      	movs	r3, #0
 8003026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800302a:	e7a7      	b.n	8002f7c <_printf_i+0x118>
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	462a      	mov	r2, r5
 8003030:	4639      	mov	r1, r7
 8003032:	4630      	mov	r0, r6
 8003034:	47c0      	blx	r8
 8003036:	3001      	adds	r0, #1
 8003038:	d0aa      	beq.n	8002f90 <_printf_i+0x12c>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	079b      	lsls	r3, r3, #30
 800303e:	d413      	bmi.n	8003068 <_printf_i+0x204>
 8003040:	68e0      	ldr	r0, [r4, #12]
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	4298      	cmp	r0, r3
 8003046:	bfb8      	it	lt
 8003048:	4618      	movlt	r0, r3
 800304a:	e7a3      	b.n	8002f94 <_printf_i+0x130>
 800304c:	2301      	movs	r3, #1
 800304e:	464a      	mov	r2, r9
 8003050:	4639      	mov	r1, r7
 8003052:	4630      	mov	r0, r6
 8003054:	47c0      	blx	r8
 8003056:	3001      	adds	r0, #1
 8003058:	d09a      	beq.n	8002f90 <_printf_i+0x12c>
 800305a:	3501      	adds	r5, #1
 800305c:	68e3      	ldr	r3, [r4, #12]
 800305e:	9a03      	ldr	r2, [sp, #12]
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	42ab      	cmp	r3, r5
 8003064:	dcf2      	bgt.n	800304c <_printf_i+0x1e8>
 8003066:	e7eb      	b.n	8003040 <_printf_i+0x1dc>
 8003068:	2500      	movs	r5, #0
 800306a:	f104 0919 	add.w	r9, r4, #25
 800306e:	e7f5      	b.n	800305c <_printf_i+0x1f8>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ac      	bne.n	8002fce <_printf_i+0x16a>
 8003074:	7803      	ldrb	r3, [r0, #0]
 8003076:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800307a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800307e:	e76c      	b.n	8002f5a <_printf_i+0xf6>
 8003080:	08003355 	.word	0x08003355
 8003084:	08003366 	.word	0x08003366

08003088 <memcpy>:
 8003088:	b510      	push	{r4, lr}
 800308a:	1e43      	subs	r3, r0, #1
 800308c:	440a      	add	r2, r1
 800308e:	4291      	cmp	r1, r2
 8003090:	d100      	bne.n	8003094 <memcpy+0xc>
 8003092:	bd10      	pop	{r4, pc}
 8003094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800309c:	e7f7      	b.n	800308e <memcpy+0x6>

0800309e <memmove>:
 800309e:	4288      	cmp	r0, r1
 80030a0:	b510      	push	{r4, lr}
 80030a2:	eb01 0302 	add.w	r3, r1, r2
 80030a6:	d807      	bhi.n	80030b8 <memmove+0x1a>
 80030a8:	1e42      	subs	r2, r0, #1
 80030aa:	4299      	cmp	r1, r3
 80030ac:	d00a      	beq.n	80030c4 <memmove+0x26>
 80030ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030b6:	e7f8      	b.n	80030aa <memmove+0xc>
 80030b8:	4283      	cmp	r3, r0
 80030ba:	d9f5      	bls.n	80030a8 <memmove+0xa>
 80030bc:	1881      	adds	r1, r0, r2
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	42d3      	cmn	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memmove+0x28>
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030ce:	e7f7      	b.n	80030c0 <memmove+0x22>

080030d0 <_free_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4605      	mov	r5, r0
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d045      	beq.n	8003164 <_free_r+0x94>
 80030d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030dc:	1f0c      	subs	r4, r1, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bfb8      	it	lt
 80030e2:	18e4      	addlt	r4, r4, r3
 80030e4:	f000 f8d2 	bl	800328c <__malloc_lock>
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <_free_r+0x98>)
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	4610      	mov	r0, r2
 80030ee:	b933      	cbnz	r3, 80030fe <_free_r+0x2e>
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	6014      	str	r4, [r2, #0]
 80030f4:	4628      	mov	r0, r5
 80030f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030fa:	f000 b8c8 	b.w	800328e <__malloc_unlock>
 80030fe:	42a3      	cmp	r3, r4
 8003100:	d90c      	bls.n	800311c <_free_r+0x4c>
 8003102:	6821      	ldr	r1, [r4, #0]
 8003104:	1862      	adds	r2, r4, r1
 8003106:	4293      	cmp	r3, r2
 8003108:	bf04      	itt	eq
 800310a:	681a      	ldreq	r2, [r3, #0]
 800310c:	685b      	ldreq	r3, [r3, #4]
 800310e:	6063      	str	r3, [r4, #4]
 8003110:	bf04      	itt	eq
 8003112:	1852      	addeq	r2, r2, r1
 8003114:	6022      	streq	r2, [r4, #0]
 8003116:	6004      	str	r4, [r0, #0]
 8003118:	e7ec      	b.n	80030f4 <_free_r+0x24>
 800311a:	4613      	mov	r3, r2
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	b10a      	cbz	r2, 8003124 <_free_r+0x54>
 8003120:	42a2      	cmp	r2, r4
 8003122:	d9fa      	bls.n	800311a <_free_r+0x4a>
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	1858      	adds	r0, r3, r1
 8003128:	42a0      	cmp	r0, r4
 800312a:	d10b      	bne.n	8003144 <_free_r+0x74>
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	4401      	add	r1, r0
 8003130:	1858      	adds	r0, r3, r1
 8003132:	4282      	cmp	r2, r0
 8003134:	6019      	str	r1, [r3, #0]
 8003136:	d1dd      	bne.n	80030f4 <_free_r+0x24>
 8003138:	6810      	ldr	r0, [r2, #0]
 800313a:	6852      	ldr	r2, [r2, #4]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	4401      	add	r1, r0
 8003140:	6019      	str	r1, [r3, #0]
 8003142:	e7d7      	b.n	80030f4 <_free_r+0x24>
 8003144:	d902      	bls.n	800314c <_free_r+0x7c>
 8003146:	230c      	movs	r3, #12
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	e7d3      	b.n	80030f4 <_free_r+0x24>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	1821      	adds	r1, r4, r0
 8003150:	428a      	cmp	r2, r1
 8003152:	bf04      	itt	eq
 8003154:	6811      	ldreq	r1, [r2, #0]
 8003156:	6852      	ldreq	r2, [r2, #4]
 8003158:	6062      	str	r2, [r4, #4]
 800315a:	bf04      	itt	eq
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	605c      	str	r4, [r3, #4]
 8003162:	e7c7      	b.n	80030f4 <_free_r+0x24>
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	200000b8 	.word	0x200000b8

0800316c <_malloc_r>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	1ccd      	adds	r5, r1, #3
 8003170:	f025 0503 	bic.w	r5, r5, #3
 8003174:	3508      	adds	r5, #8
 8003176:	2d0c      	cmp	r5, #12
 8003178:	bf38      	it	cc
 800317a:	250c      	movcc	r5, #12
 800317c:	2d00      	cmp	r5, #0
 800317e:	4606      	mov	r6, r0
 8003180:	db01      	blt.n	8003186 <_malloc_r+0x1a>
 8003182:	42a9      	cmp	r1, r5
 8003184:	d903      	bls.n	800318e <_malloc_r+0x22>
 8003186:	230c      	movs	r3, #12
 8003188:	6033      	str	r3, [r6, #0]
 800318a:	2000      	movs	r0, #0
 800318c:	bd70      	pop	{r4, r5, r6, pc}
 800318e:	f000 f87d 	bl	800328c <__malloc_lock>
 8003192:	4a21      	ldr	r2, [pc, #132]	; (8003218 <_malloc_r+0xac>)
 8003194:	6814      	ldr	r4, [r2, #0]
 8003196:	4621      	mov	r1, r4
 8003198:	b991      	cbnz	r1, 80031c0 <_malloc_r+0x54>
 800319a:	4c20      	ldr	r4, [pc, #128]	; (800321c <_malloc_r+0xb0>)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	b91b      	cbnz	r3, 80031a8 <_malloc_r+0x3c>
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 f863 	bl	800326c <_sbrk_r>
 80031a6:	6020      	str	r0, [r4, #0]
 80031a8:	4629      	mov	r1, r5
 80031aa:	4630      	mov	r0, r6
 80031ac:	f000 f85e 	bl	800326c <_sbrk_r>
 80031b0:	1c43      	adds	r3, r0, #1
 80031b2:	d124      	bne.n	80031fe <_malloc_r+0x92>
 80031b4:	230c      	movs	r3, #12
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	4630      	mov	r0, r6
 80031ba:	f000 f868 	bl	800328e <__malloc_unlock>
 80031be:	e7e4      	b.n	800318a <_malloc_r+0x1e>
 80031c0:	680b      	ldr	r3, [r1, #0]
 80031c2:	1b5b      	subs	r3, r3, r5
 80031c4:	d418      	bmi.n	80031f8 <_malloc_r+0x8c>
 80031c6:	2b0b      	cmp	r3, #11
 80031c8:	d90f      	bls.n	80031ea <_malloc_r+0x7e>
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	50cd      	str	r5, [r1, r3]
 80031ce:	18cc      	adds	r4, r1, r3
 80031d0:	4630      	mov	r0, r6
 80031d2:	f000 f85c 	bl	800328e <__malloc_unlock>
 80031d6:	f104 000b 	add.w	r0, r4, #11
 80031da:	1d23      	adds	r3, r4, #4
 80031dc:	f020 0007 	bic.w	r0, r0, #7
 80031e0:	1ac3      	subs	r3, r0, r3
 80031e2:	d0d3      	beq.n	800318c <_malloc_r+0x20>
 80031e4:	425a      	negs	r2, r3
 80031e6:	50e2      	str	r2, [r4, r3]
 80031e8:	e7d0      	b.n	800318c <_malloc_r+0x20>
 80031ea:	428c      	cmp	r4, r1
 80031ec:	684b      	ldr	r3, [r1, #4]
 80031ee:	bf16      	itet	ne
 80031f0:	6063      	strne	r3, [r4, #4]
 80031f2:	6013      	streq	r3, [r2, #0]
 80031f4:	460c      	movne	r4, r1
 80031f6:	e7eb      	b.n	80031d0 <_malloc_r+0x64>
 80031f8:	460c      	mov	r4, r1
 80031fa:	6849      	ldr	r1, [r1, #4]
 80031fc:	e7cc      	b.n	8003198 <_malloc_r+0x2c>
 80031fe:	1cc4      	adds	r4, r0, #3
 8003200:	f024 0403 	bic.w	r4, r4, #3
 8003204:	42a0      	cmp	r0, r4
 8003206:	d005      	beq.n	8003214 <_malloc_r+0xa8>
 8003208:	1a21      	subs	r1, r4, r0
 800320a:	4630      	mov	r0, r6
 800320c:	f000 f82e 	bl	800326c <_sbrk_r>
 8003210:	3001      	adds	r0, #1
 8003212:	d0cf      	beq.n	80031b4 <_malloc_r+0x48>
 8003214:	6025      	str	r5, [r4, #0]
 8003216:	e7db      	b.n	80031d0 <_malloc_r+0x64>
 8003218:	200000b8 	.word	0x200000b8
 800321c:	200000bc 	.word	0x200000bc

08003220 <_realloc_r>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	4607      	mov	r7, r0
 8003224:	4614      	mov	r4, r2
 8003226:	460e      	mov	r6, r1
 8003228:	b921      	cbnz	r1, 8003234 <_realloc_r+0x14>
 800322a:	4611      	mov	r1, r2
 800322c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003230:	f7ff bf9c 	b.w	800316c <_malloc_r>
 8003234:	b922      	cbnz	r2, 8003240 <_realloc_r+0x20>
 8003236:	f7ff ff4b 	bl	80030d0 <_free_r>
 800323a:	4625      	mov	r5, r4
 800323c:	4628      	mov	r0, r5
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	f000 f826 	bl	8003290 <_malloc_usable_size_r>
 8003244:	42a0      	cmp	r0, r4
 8003246:	d20f      	bcs.n	8003268 <_realloc_r+0x48>
 8003248:	4621      	mov	r1, r4
 800324a:	4638      	mov	r0, r7
 800324c:	f7ff ff8e 	bl	800316c <_malloc_r>
 8003250:	4605      	mov	r5, r0
 8003252:	2800      	cmp	r0, #0
 8003254:	d0f2      	beq.n	800323c <_realloc_r+0x1c>
 8003256:	4631      	mov	r1, r6
 8003258:	4622      	mov	r2, r4
 800325a:	f7ff ff15 	bl	8003088 <memcpy>
 800325e:	4631      	mov	r1, r6
 8003260:	4638      	mov	r0, r7
 8003262:	f7ff ff35 	bl	80030d0 <_free_r>
 8003266:	e7e9      	b.n	800323c <_realloc_r+0x1c>
 8003268:	4635      	mov	r5, r6
 800326a:	e7e7      	b.n	800323c <_realloc_r+0x1c>

0800326c <_sbrk_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4c06      	ldr	r4, [pc, #24]	; (8003288 <_sbrk_r+0x1c>)
 8003270:	2300      	movs	r3, #0
 8003272:	4605      	mov	r5, r0
 8003274:	4608      	mov	r0, r1
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	f7fe f93e 	bl	80014f8 <_sbrk>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_sbrk_r+0x1a>
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	b103      	cbz	r3, 8003286 <_sbrk_r+0x1a>
 8003284:	602b      	str	r3, [r5, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	20000114 	.word	0x20000114

0800328c <__malloc_lock>:
 800328c:	4770      	bx	lr

0800328e <__malloc_unlock>:
 800328e:	4770      	bx	lr

08003290 <_malloc_usable_size_r>:
 8003290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003294:	1f18      	subs	r0, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	bfbc      	itt	lt
 800329a:	580b      	ldrlt	r3, [r1, r0]
 800329c:	18c0      	addlt	r0, r0, r3
 800329e:	4770      	bx	lr

080032a0 <trunc>:
 80032a0:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80032a4:	ec5c bb10 	vmov	fp, ip, d0
 80032a8:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80032ac:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80032b0:	2913      	cmp	r1, #19
 80032b2:	4664      	mov	r4, ip
 80032b4:	dc11      	bgt.n	80032da <trunc+0x3a>
 80032b6:	2900      	cmp	r1, #0
 80032b8:	bfa7      	ittee	ge
 80032ba:	4b15      	ldrge	r3, [pc, #84]	; (8003310 <trunc+0x70>)
 80032bc:	fa43 f101 	asrge.w	r1, r3, r1
 80032c0:	2200      	movlt	r2, #0
 80032c2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80032c6:	bfa4      	itt	ge
 80032c8:	2200      	movge	r2, #0
 80032ca:	ea2c 0301 	bicge.w	r3, ip, r1
 80032ce:	4693      	mov	fp, r2
 80032d0:	469c      	mov	ip, r3
 80032d2:	ec4c bb10 	vmov	d0, fp, ip
 80032d6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80032da:	2933      	cmp	r1, #51	; 0x33
 80032dc:	dd0d      	ble.n	80032fa <trunc+0x5a>
 80032de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80032e2:	d1f6      	bne.n	80032d2 <trunc+0x32>
 80032e4:	4663      	mov	r3, ip
 80032e6:	ee10 2a10 	vmov	r2, s0
 80032ea:	ee10 0a10 	vmov	r0, s0
 80032ee:	4621      	mov	r1, r4
 80032f0:	f7fc ffc4 	bl	800027c <__adddf3>
 80032f4:	4683      	mov	fp, r0
 80032f6:	468c      	mov	ip, r1
 80032f8:	e7eb      	b.n	80032d2 <trunc+0x32>
 80032fa:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003302:	fa23 f000 	lsr.w	r0, r3, r0
 8003306:	ea2b 0600 	bic.w	r6, fp, r0
 800330a:	46b3      	mov	fp, r6
 800330c:	46a4      	mov	ip, r4
 800330e:	e7e0      	b.n	80032d2 <trunc+0x32>
 8003310:	000fffff 	.word	0x000fffff

08003314 <_init>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr

08003320 <_fini>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	bf00      	nop
 8003324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003326:	bc08      	pop	{r3}
 8003328:	469e      	mov	lr, r3
 800332a:	4770      	bx	lr
